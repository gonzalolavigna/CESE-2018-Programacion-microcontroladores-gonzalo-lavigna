
ejer3-template/out/ejer3-template.elf:     file format elf32-littlearm
ejer3-template/out/ejer3-template.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a002305

Program Header:
0x70000001 off    0x0000ac18 vaddr 0x1a002c18 paddr 0x1a002c18 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00008048 vaddr 0x10000048 paddr 0x10000048 align 2**15
         filesz 0x00000000 memsz 0x00000114 flags rw-
    LOAD off    0x00008000 vaddr 0x1a000000 paddr 0x1a000000 align 2**15
         filesz 0x00002c20 memsz 0x00002c20 flags r-x
    LOAD off    0x00010000 vaddr 0x10000000 paddr 0x1a002c20 align 2**15
         filesz 0x00000044 memsz 0x00000044 flags rw-
private flags = 5000402: [Version5 EABI] [hard-float ABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c18  1a000000  1a000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  10000000  1a002c20  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00010044  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00010044  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00010044  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00010044  2**2
                  CONTENTS
  6 .bss          00000114  10000048  10000048  00008048  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00010044  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00010044  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00010044  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00010044  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a002c18  1a002c18  0000ac18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  00010044  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  00010044  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  00010044  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  00010044  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  00010044  2**2
                  CONTENTS
 17 .noinit       00000000  1000015c  1000015c  00010044  2**2
                  CONTENTS
 18 .debug_info   0000d933  00000000  00000000  00010044  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 00002983  00000000  00000000  0001d977  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    000047ac  00000000  00000000  000202fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00000360  00000000  00000000  00024aa6  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_macro  00009e54  00000000  00000000  00024e06  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_line   0000b461  00000000  00000000  0002ec5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_str    0001bec2  00000000  00000000  0003a0bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .comment      00000070  00000000  00000000  00055f7d  2**0
                  CONTENTS, READONLY
 26 .ARM.attributes 00000039  00000000  00000000  00055fed  2**0
                  CONTENTS, READONLY
 27 .debug_frame  00001070  00000000  00000000  00056028  2**2
                  CONTENTS, READONLY, DEBUGGING
 28 .debug_ranges 000000a0  00000000  00000000  00057098  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000048 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a002c18 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
1000015c l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 sapi_uart.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 cooperativeOs_isr.c
00000000 l    df *ABS*	00000000 cooperativeOs_scheduler.c
1a00036c l     F .text	00000008 schedulerGoToSleep
00000000 l    df *ABS*	00000000 main.c
1a00042c l     F .text	00000028 taskBlinkLed
10000049 l     O .bss	00000001 ledState
00000000 l    df *ABS*	00000000 sapi_sleep.c
00000000 l    df *ABS*	00000000 sapi_datatypes.c
00000000 l    df *ABS*	00000000 sapi_timer.c
1a00063c l     F .text	00000002 errorOcurred
1a000640 l     F .text	00000002 doNothing
1a002944 l     O .text	00000030 timer_sd
10000000 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_tick.c
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a000c2c l     F .text	0000002c gpioObtainPinConfig
00000000 l    df *ABS*	00000000 board.c
1a000ebc l     F .text	00000040 Board_LED_Init
1a002aac l     O .text	0000000c gpioLEDBits
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a002ac8 l     O .text	00000060 pinmuxing
1a002b28 l     O .text	0000000c InitClkStates
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a001194 l     F .text	0000002c Chip_UART_GetIndex
1a0011c0 l     F .text	00000048 Chip_UART_ABIntHandler
1a002b34 l     O .text	00000008 UART_PClock
1a002b3c l     O .text	00000008 UART_BClock
1000004a l     O .bss	00000001 ABsyncSts
00000000 l    df *ABS*	00000000 ring_buffer.c
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
1a0016f4 l     F .text	00000034 Chip_USB_PllSetup
1a002b44 l     O .text	00000014 usbPLLSetup
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a0017b8 l     F .text	000000a8 pll_calc_divs
1a001860 l     F .text	00000104 pll_get_frac
1a001964 l     F .text	00000024 Chip_Clock_TestMainPLLMultiplier
1a001988 l     F .text	00000048 Chip_Clock_FindBaseClock
1a001db0 l     F .text	00000022 Chip_Clock_GetDivRate
1a002b58 l     O .text	0000006c periph_to_base
1000004c l     O .bss	00000008 audio_usb_pll_freq
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a002bd0 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 timer_18xx_43xx.c
1a002220 l     F .text	0000002c Chip_TIMER_GetClockIndex
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 bpabi.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 
1a080000 l       *ABS*	00000000 __top_MFlashA512
1a002c20 l       .ARM.exidx	00000000 __exidx_end
1a002c20 l       .ARM.exidx	00000000 _etext
20008000 l       *ABS*	00000000 __top_RamAHB32
1a002c18 l       .text	00000000 __exidx_start
20010000 l       *ABS*	00000000 __top_RamAHB_ETB16
10008000 l       *ABS*	00000000 __top_RamLoc32
2000c000 l       *ABS*	00000000 __top_RamAHB16
1008a000 l       *ABS*	00000000 __top_RamLoc40
1000015c l       .bss	00000000 _pvHeapStart
1b080000 l       *ABS*	00000000 __top_MFlashB512
1a001a80 g     F .text	0000001c Chip_Clock_GetDividerSource
1a0023e0 g     F .text	0000002e .hidden __gnu_uldivmod_helper
1a0008a4 g     F .text	00000040 TIMER2_IRQHandler
1a000194  w    F .text	00000002 DebugMon_Handler
1a0001a0  w    F .text	00000002 RIT_IRQHandler
1a000750 g     F .text	00000040 Timer_DeInit
1a0001a0  w    F .text	00000002 ADCHS_IRQHandler
1a002414 g     F .text	0000029c .hidden __divdi3
1a000114 g       .text	00000000 __section_table_start
1a0001a0  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0001a0  w    F .text	00000002 I2C0_IRQHandler
1a0004e4 g     F .text	00000044 uartReadByte
1a001728 g     F .text	00000034 Chip_USB0_Init
1a001298 g     F .text	00000010 Chip_UART_CheckBusy
1a000a2c g     F .text	0000003e delayRead
1a000180  w    F .text	00000002 HardFault_Handler
1a00152c g     F .text	0000000c Chip_UART_GetABEOStatus
1a000000 g       *ABS*	00000000 __vectors_start__
1a001640 g     F .text	00000030 RingBuffer_Pop
1a000f68 g     F .text	00000014 Board_UARTPutSTR
1a001e64 g     F .text	00000018 Chip_Clock_DisableBaseClock
1a000b18 g     F .text	00000024 SysTick_Handler
1a001314 g     F .text	00000044 Chip_UART_SetBaud
1a001bf0 g     F .text	0000009c Chip_Clock_SetupMainPLLMult
1a0001a0  w    F .text	00000002 SDIO_IRQHandler
1a000f4c g     F .text	0000001c Board_UARTGetChar
1a0001a0  w    F .text	00000002 ATIMER_IRQHandler
1a000198  w    F .text	00000002 PendSV_Handler
1a00017c  w    F .text	00000002 NMI_Handler
1a000150 g       .text	00000000 __data_section_table_end
1a0001a0  w    F .text	00000002 I2C1_IRQHandler
1a0001a0  w    F .text	00000002 UART1_IRQHandler
1a0001a0  w    F .text	00000002 GPIO5_IRQHandler
1a0003e8 g     F .text	00000040 schedulerDispatchTasks
1a0001a0  w    F .text	00000002 CAN1_IRQHandler
1a00206c g     F .text	00000014 Chip_Clock_EnablePLL
53ff5562 g       *ABS*	00000000 __valid_user_code_checksum
1a001088 g     F .text	00000028 Board_SSP_Init
1a0001a0  w    F .text	00000002 USB1_IRQHandler
1a0001a0  w    F .text	00000002 I2S0_IRQHandler
1a000558 g     F .text	00000084 waitForReceiveStringOrTimeout
1a0008e4 g     F .text	00000040 TIMER3_IRQHandler
1a001ec0 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a000178 g     F .text	00000002 UART0_IRQHandler
1a0001c0 g     F .text	00000012 bss_init
1a00227c g     F .text	00000028 Chip_TIMER_ExtMatchControlSet
1a0013fc g     F .text	0000000e Chip_UART_ReadRB
1a002264 g     F .text	00000018 Chip_TIMER_Reset
1a00291c g     F .text	00000016 memcpy
1a0001a0  w    F .text	00000002 SGPIO_IRQHandler
1a002258 g     F .text	0000000c Chip_TIMER_DeInit
1a00202c g     F .text	00000040 Chip_Clock_SetupPLL
1a002380 g     F .text	00000000 .hidden __aeabi_uldivmod
1000015c g       .noinit	00000000 _noinit
1a000618 g     F .text	00000018 uartWriteString
10000158 g     O .bss	00000004 SystemCoreClock
1a001208 g     F .text	00000050 Chip_UART_Init
1a0001a0  w    F .text	00000002 ADC0_IRQHandler
1a0015b0 g     F .text	00000090 RingBuffer_InsertMult
1a000a0c g     F .text	00000020 delayConfig
1a00018c  w    F .text	00000002 UsageFault_Handler
1a001fb0 g     F .text	0000004c Chip_Clock_GetRate
1a0001a0  w    F .text	00000002 GPIO6_IRQHandler
10000148 g     O .bss	00000008 tickCounter
1a001114 g     F .text	00000074 Board_SetupClocking
1a002218 g     F .text	00000008 Chip_SystemInit
1a002ac4 g     O .text	00000004 ExtRateIn
1a0001a0  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000b0c g     F .text	0000000c tickWrite
1a002300 g     F .text	00000002 Chip_GPIO_DeInit
1a000374 g     F .text	00000040 schedulerAddTask
1a0001a0  w    F .text	00000002 GPIO1_IRQHandler
1a000a88 g     F .text	00000078 tickConfig
1a00175c g     F .text	00000048 Chip_USB1_Init
1a0001a0  w    F .text	00000002 SSP0_IRQHandler
1a000c58 g     F .text	0000019c gpioConfig
1a0002fc g     O .text	00000004 CRP_WORD
1a002204 g     F .text	00000014 Chip_SetupIrcClocking
1a0026b0 g     F .text	0000026a .hidden __udivdi3
1a0001a0  w    F .text	00000002 ADC1_IRQHandler
10000048 g     O .bss	00000001 errorCode
1a001580 g     F .text	00000030 RingBuffer_Insert
1a001010 g     F .text	00000028 Board_Init
1a000114 g       .text	00000000 __data_section_table
1a0001a0  w    F .text	00000002 RTC_IRQHandler
1000015c g       .bss	00000000 _ebss
1a00082c g     F .text	0000003c TIMER0_IRQHandler
1a0001a0  w    F .text	00000002 SPI_IRQHandler
1a0001a0  w    F .text	00000002 LCD_IRQHandler
1a0019d0 g     F .text	0000004c Chip_Clock_EnableCrystal
1a000b3c g     F .text	000000ee boardConfig
1a0001a4 g     F .text	0000001a data_init
1a000868 g     F .text	0000003c TIMER1_IRQHandler
1a001a2c g     F .text	00000054 Chip_Clock_SetDivider
1a000630 g     F .text	00000002 UART2_IRQHandler
1a001d48 g     F .text	00000068 Chip_Clock_GetMainPLLHz
1a001258 g     F .text	0000001c Chip_UART_DeInit
1a000638 g     F .text	00000004 sAPI_NullFuncPtr
1a000528 g     F .text	00000030 uartWriteByte
1a000ea4 g     F .text	00000016 gpioToggle
1a0001a0  w    F .text	00000002 GPIO2_IRQHandler
1a001a1c g     F .text	00000010 Chip_Clock_DisableCrystal
1a001f88 g     F .text	00000014 Chip_Clock_StartPowerDown
1a000644 g     F .text	0000010c Timer_Init
1a00035c g     F .text	00000010 schedulerStart
1a000790 g     F .text	00000008 Timer_microsecondsToTicks
1a001e9c g     F .text	00000024 Chip_Clock_GetBaseClock
1a002094 g     F .text	0000000c Chip_Clock_GetPLLStatus
1a001358 g     F .text	00000024 Chip_UART_RXIntHandlerRB
1a0013b8 g     F .text	00000042 Chip_UART_SendRB
10000048 g       .bss	00000000 _bss
1a0001a0  w    F .text	00000002 I2S1_IRQHandler
1a0003b4 g     F .text	00000034 schedulerDeleteTask
1a001c8c g     F .text	000000bc Chip_Clock_SetupMainPLLHz
1a0022fc g     F .text	00000002 Chip_GPIO_Init
1a002ac0 g     O .text	00000004 OscRateIn
1a001038 g     F .text	00000024 Board_I2C_Init
1000015c g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a000fec g     F .text	00000024 Board_ENET_GetMacADDR
1a000924 g     F .text	00000052 delayInaccurate
1a0001a0  w    F .text	00000002 SSP1_IRQHandler
1a00224c g     F .text	0000000c Chip_TIMER_Init
1a001e7c g     F .text	00000020 Chip_Clock_IsBaseClockEnabled
1a000178 g       .text	00000000 __bss_section_table_end
1a001e18 g     F .text	00000034 Chip_Clock_GetBaseClockOpts
1a00047c g     F .text	00000004 sleepUntilNextInterrupt
1a002410  w    F .text	00000002 .hidden __aeabi_ldiv0
1a001670 g     F .text	00000082 RingBuffer_PopMult
1a0001a0  w    F .text	00000002 USB0_IRQHandler
1a001f54 g     F .text	00000034 Chip_Clock_Disable
1a0001a0  w    F .text	00000002 GPIO3_IRQHandler
1a0007d0 g     F .text	00000044 Timer_DisableCompareMatch
1a000f38 g     F .text	00000014 Board_UARTPutChar
1a001274 g     F .text	00000022 Chip_UART_Send
1a0001a0  w    F .text	00000002 SCT_IRQHandler
1a001ffc g     F .text	00000030 Chip_Clock_GetEMCRate
1a00140c g     F .text	00000036 Chip_UART_IRQRBHandler
1a001a9c g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a002932 g     F .text	00000010 memset
1a000184  w    F .text	00000002 MemManage_Handler
1a000454 g     F .text	00000028 main
1a0012cc g     F .text	00000022 Chip_UART_Read
1a0001a0  w    F .text	00000002 WDT_IRQHandler
1a000190  w    F .text	00000002 SVC_Handler
1a000300 g     F .text	0000003c schedulerUpdate
1a000798 g     F .text	00000038 Timer_EnableCompareMatch
1a0021f0 g     F .text	00000014 Chip_SetupXtalClocking
1a000fd4 g     F .text	00000016 Board_LED_Toggle
1a0001a0  w    F .text	00000002 GPIO7_IRQHandler
1a001ecc g     F .text	0000003c Chip_Clock_EnableOpts
1a002974 g     O .text	00000136 gpioPinsConfig
1a001ab8 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a0022a4 g     F .text	00000058 fpuInit
1a000fa4 g     F .text	00000030 Board_LED_Test
1a001b70 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a0010c4 g     F .text	0000001c SystemInit
1a0001a0  w    F .text	00000002 SPIFI_IRQHandler
1a0009d4 g     F .text	00000038 delay
1a0001a0  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a001f3c g     F .text	00000018 Chip_Clock_RTCEnable
1a000df4 g     F .text	00000058 gpioWrite
1a0012a8 g     F .text	00000024 Chip_UART_SendBlocking
1a0010e0 g     F .text	00000034 Board_SetupMuxing
1a001444 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a000b00 g     F .text	0000000c tickRead
10000150 g     O .bss	00000008 tickRateMS
1a0001a0  w    F .text	00000002 ETH_IRQHandler
10000040 g     O .data	00000004 tickHookFunction
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0005dc g     F .text	0000003a waitForReceiveStringOrTimeoutBlocking
1a0001a0  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a000178 g       .text	00000000 __section_table_end
1a000480 g     F .text	00000064 uartConfig
1a0001a0  w    F .text	00000002 GINT0_IRQHandler
1a0001a0  w    F .text	00000002 DAC_IRQHandler
1a000f10 g     F .text	00000028 Board_Debug_Init
10000044 g       .data	00000000 _edata
1a0001a0  w    F .text	00000002 M0SUB_IRQHandler
1a001538 g     F .text	00000038 Chip_UART_ABCmd
1a000428 g     F .text	00000002 schedulerReportStatus
1a0020a0 g     F .text	00000150 Chip_SetupCoreClock
1a0001a0  w    F .text	00000002 GPIO0_IRQHandler
1a00105c g     F .text	0000002c Board_SDMMC_Init
1a000000 g     O .text	00000114 g_pfnVectors
1a002304 g     F .text	0000007c ResetISR
1a0017a4 g     F .text	00000014 SystemCoreClockUpdate
1a0010b0 g     F .text	00000014 Board_DAC_Init
1a0001a0  w    F .text	00000002 DMA_IRQHandler
1a0001a0  w    F .text	00000002 EVRT_IRQHandler
1a001570 g     F .text	00000010 RingBuffer_Init
1a000978 g     F .text	0000005a delayInaccurateUs
1a002410  w    F .text	00000002 .hidden __aeabi_idiv0
1a002080 g     F .text	00000014 Chip_Clock_DisablePLL
1a001f9c g     F .text	00000014 Chip_Clock_ClearPowerDown
1a00137c g     F .text	0000003a Chip_UART_TXIntHandlerRB
1a000188  w    F .text	00000002 BusFault_Handler
1a001f08 g     F .text	00000034 Chip_Clock_Enable
1a000634 g     F .text	00000002 UART3_IRQHandler
1a000a6c g     F .text	0000001c delayWrite
1a0001a0  w    F .text	00000002 MCPWM_IRQHandler
1a0023b0 g     F .text	0000002e .hidden __gnu_ldivmod_helper
1a000f7c g     F .text	00000028 Board_LED_Set
1a0001a0  w    F .text	00000002 M0APP_IRQHandler
1a000e4c g     F .text	00000058 gpioRead
10000054 g     O .bss	000000f0 schedulerTasks
1a0001a0  w    F .text	00000002 GINT1_IRQHandler
1a00033c g     F .text	00000020 schedulerInit
1a000814 g     F .text	00000018 Timer_SetCompareMatch
1a0012f0 g     F .text	00000024 Chip_UART_ReadBlocking
1a000efc g     F .text	00000014 Board_UART_Init
1a001e4c g     F .text	00000018 Chip_Clock_EnableBaseClock
1a001dd4 g     F .text	00000044 Chip_Clock_SetBaseClock
1a0001a0  w    F .text	00000002 GPIO4_IRQHandler
1a001188 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 05 23 00 1a 7d 01 00 1a 81 01 00 1a     .....#..}.......
1a000010:	85 01 00 1a 89 01 00 1a 8d 01 00 1a 62 55 ff 53     ............bU.S
	...
1a00002c:	91 01 00 1a 95 01 00 1a 00 00 00 00 99 01 00 1a     ................
1a00003c:	19 0b 00 1a a1 01 00 1a a1 01 00 1a a1 01 00 1a     ................
1a00004c:	00 00 00 00 a1 01 00 1a a1 01 00 1a a1 01 00 1a     ................
1a00005c:	a1 01 00 1a a1 01 00 1a a1 01 00 1a a1 01 00 1a     ................
1a00006c:	a1 01 00 1a 2d 08 00 1a 69 08 00 1a a5 08 00 1a     ....-...i.......
1a00007c:	e5 08 00 1a a1 01 00 1a a1 01 00 1a a1 01 00 1a     ................
1a00008c:	a1 01 00 1a a1 01 00 1a a1 01 00 1a a1 01 00 1a     ................
1a00009c:	a1 01 00 1a 79 01 00 1a a1 01 00 1a 31 06 00 1a     ....y.......1...
1a0000ac:	35 06 00 1a a1 01 00 1a a1 01 00 1a a1 01 00 1a     5...............
1a0000bc:	a1 01 00 1a a1 01 00 1a a1 01 00 1a a1 01 00 1a     ................
1a0000cc:	a1 01 00 1a a1 01 00 1a a1 01 00 1a a1 01 00 1a     ................
1a0000dc:	a1 01 00 1a a1 01 00 1a a1 01 00 1a a1 01 00 1a     ................
1a0000ec:	a1 01 00 1a 00 00 00 00 a1 01 00 1a a1 01 00 1a     ................
1a0000fc:	a1 01 00 1a 00 00 00 00 a1 01 00 1a a1 01 00 1a     ................
1a00010c:	a1 01 00 1a a1 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a002c20 	.word	0x1a002c20
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000044 	.word	0x00000044
1a000120:	1a002c20 	.word	0x1a002c20
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a002c20 	.word	0x1a002c20
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a002c20 	.word	0x1a002c20
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a002c20 	.word	0x1a002c20
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000048 	.word	0x10000048
1a000154:	00000114 	.word	0x00000114
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <UART0_IRQHandler>:
/*==================[ISR external functions definition]======================*/

__attribute__ ((section(".after_vectors")))

/* 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24) */
void UART0_IRQHandler(void){
1a000178:	4770      	bx	lr
1a00017a:	bf00      	nop

1a00017c <NMI_Handler>:
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <NMI_Handler>
1a00017e:	bf00      	nop

1a000180 <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <HardFault_Handler>
1a000182:	bf00      	nop

1a000184 <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <MemManage_Handler>
1a000186:	bf00      	nop

1a000188 <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <BusFault_Handler>
1a00018a:	bf00      	nop

1a00018c <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a00018c:	e7fe      	b.n	1a00018c <UsageFault_Handler>
1a00018e:	bf00      	nop

1a000190 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000190:	e7fe      	b.n	1a000190 <SVC_Handler>
1a000192:	bf00      	nop

1a000194 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000194:	e7fe      	b.n	1a000194 <DebugMon_Handler>
1a000196:	bf00      	nop

1a000198 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000198:	e7fe      	b.n	1a000198 <PendSV_Handler>
1a00019a:	bf00      	nop
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a00019c:	e7fe      	b.n	1a00019c <PendSV_Handler+0x4>
1a00019e:	bf00      	nop

1a0001a0 <ADC0_IRQHandler>:
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001a0:	e7fe      	b.n	1a0001a0 <ADC0_IRQHandler>
1a0001a2:	bf00      	nop

1a0001a4 <data_init>:
// ResetISR() function in order to cope with MCUs with multiple banks of
// memory.
//*****************************************************************************
        __attribute__((section(".after_vectors"
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a0001a4:	b410      	push	{r4}
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a6:	2300      	movs	r3, #0
1a0001a8:	e004      	b.n	1a0001b4 <data_init+0x10>
        *pulDest++ = *pulSrc++;
1a0001aa:	6804      	ldr	r4, [r0, #0]
1a0001ac:	600c      	str	r4, [r1, #0]
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001ae:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a0001b0:	3004      	adds	r0, #4
1a0001b2:	3104      	adds	r1, #4
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	4293      	cmp	r3, r2
1a0001b6:	d3f8      	bcc.n	1a0001aa <data_init+0x6>
        *pulDest++ = *pulSrc++;
}
1a0001b8:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001bc:	4770      	bx	lr
1a0001be:	bf00      	nop

1a0001c0 <bss_init>:

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001c0:	2300      	movs	r3, #0
1a0001c2:	e003      	b.n	1a0001cc <bss_init+0xc>
        *pulDest++ = 0;
1a0001c4:	2200      	movs	r2, #0
1a0001c6:	6002      	str	r2, [r0, #0]

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001c8:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001ca:	3004      	adds	r0, #4

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001cc:	428b      	cmp	r3, r1
1a0001ce:	d3f9      	bcc.n	1a0001c4 <bss_init+0x4>
        *pulDest++ = 0;
}
1a0001d0:	4770      	bx	lr
1a0001d2:	bf00      	nop
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <schedulerUpdate>:

   int32_t index;
   //serialDebugPrintLnString( "schedulerUpdate." );

   // NOTE: calculations are in *TICKS* (not milliseconds)
   for( index = 0; index < SCHEDULER_MAX_TASKS; index++ ){
1a000300:	2300      	movs	r3, #0
1a000302:	e015      	b.n	1a000330 <schedulerUpdate+0x30>
      // Check if there is a task at this location
      if( schedulerTasks[index].pTask ){
1a000304:	011a      	lsls	r2, r3, #4
1a000306:	490c      	ldr	r1, [pc, #48]	; (1a000338 <schedulerUpdate+0x38>)
1a000308:	588a      	ldr	r2, [r1, r2]
1a00030a:	b182      	cbz	r2, 1a00032e <schedulerUpdate+0x2e>
         if( --schedulerTasks[index].delay <= 0 ){
1a00030c:	eb01 1103 	add.w	r1, r1, r3, lsl #4
1a000310:	684a      	ldr	r2, [r1, #4]
1a000312:	3a01      	subs	r2, #1
1a000314:	604a      	str	r2, [r1, #4]
1a000316:	2a00      	cmp	r2, #0
1a000318:	dc09      	bgt.n	1a00032e <schedulerUpdate+0x2e>
            // The task is due to run
            schedulerTasks[index].runMe += 1; // Inc. the 'runMe' flag
1a00031a:	460a      	mov	r2, r1
1a00031c:	68c9      	ldr	r1, [r1, #12]
1a00031e:	3101      	adds	r1, #1
1a000320:	60d1      	str	r1, [r2, #12]
            if( schedulerTasks[index].period ){
1a000322:	6892      	ldr	r2, [r2, #8]
1a000324:	b11a      	cbz	r2, 1a00032e <schedulerUpdate+0x2e>
               // Schedule regular tasks to run again
               schedulerTasks[index].delay = schedulerTasks[index].period;
1a000326:	4904      	ldr	r1, [pc, #16]	; (1a000338 <schedulerUpdate+0x38>)
1a000328:	eb01 1103 	add.w	r1, r1, r3, lsl #4
1a00032c:	604a      	str	r2, [r1, #4]

   int32_t index;
   //serialDebugPrintLnString( "schedulerUpdate." );

   // NOTE: calculations are in *TICKS* (not milliseconds)
   for( index = 0; index < SCHEDULER_MAX_TASKS; index++ ){
1a00032e:	3301      	adds	r3, #1
1a000330:	2b0e      	cmp	r3, #14
1a000332:	dde7      	ble.n	1a000304 <schedulerUpdate+0x4>
            }
         }
      }
   }
   return 0;
}
1a000334:	2000      	movs	r0, #0
1a000336:	4770      	bx	lr
1a000338:	10000054 	.word	0x10000054

1a00033c <schedulerInit>:
schedulerInit()
Scheduler initialization function. Prepares scheduler
data structures.
Must call this function before using the scheduler.
-*------------------------------------------------------------------*/
void schedulerInit( void ){
1a00033c:	b510      	push	{r4, lr}

   uint32_t i;
   for( i = 0; i < SCHEDULER_MAX_TASKS; i++ ){
1a00033e:	2400      	movs	r4, #0
1a000340:	e003      	b.n	1a00034a <schedulerInit+0xe>
      schedulerDeleteTask(i);
1a000342:	4620      	mov	r0, r4
1a000344:	f000 f836 	bl	1a0003b4 <schedulerDeleteTask>
Must call this function before using the scheduler.
-*------------------------------------------------------------------*/
void schedulerInit( void ){

   uint32_t i;
   for( i = 0; i < SCHEDULER_MAX_TASKS; i++ ){
1a000348:	3401      	adds	r4, #1
1a00034a:	2c0e      	cmp	r4, #14
1a00034c:	d9f9      	bls.n	1a000342 <schedulerInit+0x6>
      schedulerDeleteTask(i);
   }
   /* Reset the global error variable
      - schedulerDelete_Task() will generate an error code,
        (because the task array is empty) */
   errorCode = 0;
1a00034e:	2200      	movs	r2, #0
1a000350:	4b01      	ldr	r3, [pc, #4]	; (1a000358 <schedulerInit+0x1c>)
1a000352:	701a      	strb	r2, [r3, #0]
1a000354:	bd10      	pop	{r4, pc}
1a000356:	bf00      	nop
1a000358:	10000048 	.word	0x10000048

1a00035c <schedulerStart>:
Starts the scheduler, by enabling timer interrupts.
NOTE: Usually called after all regular tasks are added,
to keep the tasks synchronized.
NOTE: ONLY THE SCHEDULER INTERRUPT SHOULD BE ENABLED!!!
-*------------------------------------------------------------------*/
void schedulerStart( tick_t tickRateMs ){
1a00035c:	b508      	push	{r3, lr}
      El tick hook es simplemente una función que se ejecutará períodicamente
      con cada interrupción de Tick, este nombre se refiere a una función
      "enganchada" a una interrupción */

   // Inicializar el conteo de Ticks con resolución de 1ms, con tickHook
   if( tickConfig( tickRateMs, schedulerUpdate ) ){
1a00035e:	4a02      	ldr	r2, [pc, #8]	; (1a000368 <schedulerStart+0xc>)
1a000360:	f000 fb92 	bl	1a000a88 <tickConfig>
1a000364:	bd08      	pop	{r3, pc}
1a000366:	bf00      	nop
1a000368:	1a000301 	.word	0x1a000301

1a00036c <schedulerGoToSleep>:
to save power. The next clock tick will return the processor
to the normal operating state.
*** May wish to disable this if using a watchdog ***
*** ADAPT AS REQUIRED FOR YOUR HARDWARE ***
-*------------------------------------------------------------------*/
static void schedulerGoToSleep(){
1a00036c:	b508      	push	{r3, lr}
   // Se pone el sistema en bajo consumo hasta que ocurra la proxima
   // interrupcion, en este caso la de Tick.
   sleepUntilNextInterrupt();
1a00036e:	f000 f885 	bl	1a00047c <sleepUntilNextInterrupt>
1a000372:	bd08      	pop	{r3, pc}

1a000374 <schedulerAddTask>:
Task will be first executed at T = 300 ticks, then 1300, 2300, etc.
-*------------------------------------------------------------------*/
int32_t schedulerAddTask( sAPI_FuncPtr_t pFunction,
                          const int32_t DELAY,
                          const int32_t PERIOD
                        ){
1a000374:	b470      	push	{r4, r5, r6}

   int32_t index = 0;
1a000376:	2300      	movs	r3, #0

   // First find a gap in the array (if there is one)
   while( (schedulerTasks[index].pTask != 0) && (index < SCHEDULER_MAX_TASKS) ){
1a000378:	e000      	b.n	1a00037c <schedulerAddTask+0x8>
      index++;
1a00037a:	3301      	adds	r3, #1
                        ){

   int32_t index = 0;

   // First find a gap in the array (if there is one)
   while( (schedulerTasks[index].pTask != 0) && (index < SCHEDULER_MAX_TASKS) ){
1a00037c:	011c      	lsls	r4, r3, #4
1a00037e:	4d0b      	ldr	r5, [pc, #44]	; (1a0003ac <schedulerAddTask+0x38>)
1a000380:	592c      	ldr	r4, [r5, r4]
1a000382:	b10c      	cbz	r4, 1a000388 <schedulerAddTask+0x14>
1a000384:	2b0e      	cmp	r3, #14
1a000386:	ddf8      	ble.n	1a00037a <schedulerAddTask+0x6>
      index++;
   }

   // Have we reached the end of the list?
   if( index == SCHEDULER_MAX_TASKS ){
1a000388:	2b0f      	cmp	r3, #15
1a00038a:	d104      	bne.n	1a000396 <schedulerAddTask+0x22>
      // Task list is full
      // Set the global error variable
      errorCode = 2; // ERROR_schedulerTOO_MANYTasks;
1a00038c:	2202      	movs	r2, #2
1a00038e:	4b08      	ldr	r3, [pc, #32]	; (1a0003b0 <schedulerAddTask+0x3c>)
1a000390:	701a      	strb	r2, [r3, #0]
      // Also return an error code
      return SCHEDULER_MAX_TASKS;
1a000392:	200f      	movs	r0, #15
1a000394:	e008      	b.n	1a0003a8 <schedulerAddTask+0x34>
   }

   // If we're here, there is a space in the task array
   schedulerTasks[index].pTask  = pFunction;
1a000396:	4e05      	ldr	r6, [pc, #20]	; (1a0003ac <schedulerAddTask+0x38>)
1a000398:	011d      	lsls	r5, r3, #4
1a00039a:	1974      	adds	r4, r6, r5
1a00039c:	5170      	str	r0, [r6, r5]
   schedulerTasks[index].delay  = DELAY;
1a00039e:	6061      	str	r1, [r4, #4]
   schedulerTasks[index].period = PERIOD;
1a0003a0:	60a2      	str	r2, [r4, #8]
   schedulerTasks[index].runMe  = 0;
1a0003a2:	2200      	movs	r2, #0
1a0003a4:	60e2      	str	r2, [r4, #12]

   return index; // return position of task (to allow later deletion)
1a0003a6:	4618      	mov	r0, r3
}
1a0003a8:	bc70      	pop	{r4, r5, r6}
1a0003aa:	4770      	bx	lr
1a0003ac:	10000054 	.word	0x10000054
1a0003b0:	10000048 	.word	0x10000048

1a0003b4 <schedulerDeleteTask>:

taskIndex - The task index. Provided by schedulerAddTask().

RETURN VALUE: RETURN_ERROR or RETURN_NORMAL
-*------------------------------------------------------------------*/
int8_t schedulerDeleteTask( int32_t taskIndex ){
1a0003b4:	b430      	push	{r4, r5}

   int8_t returnCode;

   if(schedulerTasks[taskIndex].pTask == 0){
1a0003b6:	0103      	lsls	r3, r0, #4
1a0003b8:	4a09      	ldr	r2, [pc, #36]	; (1a0003e0 <schedulerDeleteTask+0x2c>)
1a0003ba:	58d3      	ldr	r3, [r2, r3]
1a0003bc:	b923      	cbnz	r3, 1a0003c8 <schedulerDeleteTask+0x14>
      // No task at this location...
      // Set the global error variable
      errorCode = 2; // ERROR_SCH_CANNOT_DELETE_TASK;
1a0003be:	2202      	movs	r2, #2
1a0003c0:	4b08      	ldr	r3, [pc, #32]	; (1a0003e4 <schedulerDeleteTask+0x30>)
1a0003c2:	701a      	strb	r2, [r3, #0]
      // ...also return an error code
      returnCode = -1; // RETURN_ERROR;
1a0003c4:	25ff      	movs	r5, #255	; 0xff
1a0003c6:	e000      	b.n	1a0003ca <schedulerDeleteTask+0x16>
   }
   else{
      returnCode = 0; // RETURN_NORMAL;
1a0003c8:	2500      	movs	r5, #0
   }
   schedulerTasks[taskIndex].pTask = 0x0000;
1a0003ca:	4c05      	ldr	r4, [pc, #20]	; (1a0003e0 <schedulerDeleteTask+0x2c>)
1a0003cc:	0103      	lsls	r3, r0, #4
1a0003ce:	18e1      	adds	r1, r4, r3
1a0003d0:	2200      	movs	r2, #0
1a0003d2:	50e2      	str	r2, [r4, r3]
   schedulerTasks[taskIndex].delay = (int32_t)0;
1a0003d4:	604a      	str	r2, [r1, #4]
   schedulerTasks[taskIndex].period = (int32_t)0;
1a0003d6:	608a      	str	r2, [r1, #8]
   schedulerTasks[taskIndex].runMe = (int8_t)0;
1a0003d8:	60ca      	str	r2, [r1, #12]
   return returnCode; // return status
}
1a0003da:	b268      	sxtb	r0, r5
1a0003dc:	bc30      	pop	{r4, r5}
1a0003de:	4770      	bx	lr
1a0003e0:	10000054 	.word	0x10000054
1a0003e4:	10000048 	.word	0x10000048

1a0003e8 <schedulerDispatchTasks>:
schedulerDispatchTasks()
This is the 'dispatcher' function. When a task (function)
is due to run, schedulerDispatchTasks() will run it.
This function must be called (repeatedly) from the main loop.
-*------------------------------------------------------------------*/
void schedulerDispatchTasks( void ){
1a0003e8:	b538      	push	{r3, r4, r5, lr}

   int32_t index;
   // Dispatches (runs) the next task (if one is ready)
   for (index = 0; index < SCHEDULER_MAX_TASKS; index++){
1a0003ea:	2400      	movs	r4, #0
1a0003ec:	e014      	b.n	1a000418 <schedulerDispatchTasks+0x30>

      if (schedulerTasks[index].runMe > 0){
1a0003ee:	4b0d      	ldr	r3, [pc, #52]	; (1a000424 <schedulerDispatchTasks+0x3c>)
1a0003f0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
1a0003f4:	68db      	ldr	r3, [r3, #12]
1a0003f6:	2b00      	cmp	r3, #0
1a0003f8:	dd0d      	ble.n	1a000416 <schedulerDispatchTasks+0x2e>

         (*schedulerTasks[index].pTask)(0); // Run the task
1a0003fa:	4a0a      	ldr	r2, [pc, #40]	; (1a000424 <schedulerDispatchTasks+0x3c>)
1a0003fc:	0123      	lsls	r3, r4, #4
1a0003fe:	18d5      	adds	r5, r2, r3
1a000400:	58d3      	ldr	r3, [r2, r3]
1a000402:	2000      	movs	r0, #0
1a000404:	4798      	blx	r3
         schedulerTasks[index].runMe -= 1; // Reset/reduce runMe flag
1a000406:	68eb      	ldr	r3, [r5, #12]
1a000408:	3b01      	subs	r3, #1
1a00040a:	60eb      	str	r3, [r5, #12]

         // Periodic tasks will automatically run again
         // - if this is a 'one shot' task, remove it from the array
         if (schedulerTasks[index].period == 0){
1a00040c:	68ab      	ldr	r3, [r5, #8]
1a00040e:	b913      	cbnz	r3, 1a000416 <schedulerDispatchTasks+0x2e>
            schedulerDeleteTask(index);
1a000410:	4620      	mov	r0, r4
1a000412:	f7ff ffcf 	bl	1a0003b4 <schedulerDeleteTask>
-*------------------------------------------------------------------*/
void schedulerDispatchTasks( void ){

   int32_t index;
   // Dispatches (runs) the next task (if one is ready)
   for (index = 0; index < SCHEDULER_MAX_TASKS; index++){
1a000416:	3401      	adds	r4, #1
1a000418:	2c0e      	cmp	r4, #14
1a00041a:	dde8      	ble.n	1a0003ee <schedulerDispatchTasks+0x6>
   }

   // Report system status
   schedulerReportStatus();
   // The scheduler enters idle mode at this point32_t
   schedulerGoToSleep();
1a00041c:	f7ff ffa6 	bl	1a00036c <schedulerGoToSleep>
1a000420:	bd38      	pop	{r3, r4, r5, pc}
1a000422:	bf00      	nop
1a000424:	10000054 	.word	0x10000054

1a000428 <schedulerReportStatus>:
After this the the error code is reset to 0.
This code may be easily adapted to display the last
error 'for ever': this may be appropriate in your
application.
-*------------------------------------------------------------------*/
void schedulerReportStatus( void ){
1a000428:	4770      	bx	lr
1a00042a:	bf00      	nop

1a00042c <taskBlinkLed>:
	return 0;
}

/*==================[definiciones de funciones internas]=====================*/

void taskBlinkLed(void){
1a00042c:	b508      	push	{r3, lr}

   if (ledState == ON){
1a00042e:	4b08      	ldr	r3, [pc, #32]	; (1a000450 <taskBlinkLed+0x24>)
1a000430:	781b      	ldrb	r3, [r3, #0]
1a000432:	2b01      	cmp	r3, #1
1a000434:	d103      	bne.n	1a00043e <taskBlinkLed+0x12>
      ledState = OFF; // Apago el pin
1a000436:	2200      	movs	r2, #0
1a000438:	4b05      	ldr	r3, [pc, #20]	; (1a000450 <taskBlinkLed+0x24>)
1a00043a:	701a      	strb	r2, [r3, #0]
1a00043c:	e002      	b.n	1a000444 <taskBlinkLed+0x18>
   }
   else{
      ledState = ON; // Prendo el pin
1a00043e:	2201      	movs	r2, #1
1a000440:	4b03      	ldr	r3, [pc, #12]	; (1a000450 <taskBlinkLed+0x24>)
1a000442:	701a      	strb	r2, [r3, #0]
   }

   // Use of digitalWrite
   gpioWrite( LED3, ledState );
1a000444:	202d      	movs	r0, #45	; 0x2d
1a000446:	4b02      	ldr	r3, [pc, #8]	; (1a000450 <taskBlinkLed+0x24>)
1a000448:	7819      	ldrb	r1, [r3, #0]
1a00044a:	f000 fcd3 	bl	1a000df4 <gpioWrite>
1a00044e:	bd08      	pop	{r3, pc}
1a000450:	10000049 	.word	0x10000049

1a000454 <main>:

/*==================[declaraciones de funciones externas]====================*/

/*==================[funcion principal]======================================*/

int main( void ){
1a000454:	b508      	push	{r3, lr}
	//Inicializar el hardware, perifericos, puertos, clock, etc.
	boardConfig();
1a000456:	f000 fb71 	bl	1a000b3c <boardConfig>

	//FUNCION que inicializa el planificador de tareas
	schedulerInit();
1a00045a:	f7ff ff6f 	bl	1a00033c <schedulerInit>
	//Cargar las tareas del sistema operativo con sus periodicidades
	schedulerAddTask( (sAPI_FuncPtr_t) taskBlinkLed, 0, BLINK_TIME_PERIOD );
1a00045e:	4806      	ldr	r0, [pc, #24]	; (1a000478 <main+0x24>)
1a000460:	2100      	movs	r1, #0
1a000462:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
1a000466:	f7ff ff85 	bl	1a000374 <schedulerAddTask>

	//Iniciar el planificador de tareas
	schedulerStart( 1 );
1a00046a:	2001      	movs	r0, #1
1a00046c:	2100      	movs	r1, #0
1a00046e:	f7ff ff75 	bl	1a00035c <schedulerStart>
	//Lazo infinito

	while(TRUE) {
		//Ejecutar tareas
		schedulerDispatchTasks();
1a000472:	f7ff ffb9 	bl	1a0003e8 <schedulerDispatchTasks>
	}
1a000476:	e7fc      	b.n	1a000472 <main+0x1e>
1a000478:	1a00042d 	.word	0x1a00042d

1a00047c <sleepUntilNextInterrupt>:
 * @return nothing
 */
void sleepUntilNextInterrupt( void ){

   /* Instert an assembly instruction wfi (wait for interrupt) */
   __asm volatile( "wfi" );
1a00047c:	bf30      	wfi
1a00047e:	4770      	bx	lr

1a000480 <uartConfig>:

   return retVal;
}


void uartConfig( uartMap_t uart, uint32_t baudRate ){
1a000480:	b538      	push	{r3, r4, r5, lr}
1a000482:	460c      	mov	r4, r1
   switch(uart){
1a000484:	b110      	cbz	r0, 1a00048c <uartConfig+0xc>
1a000486:	2801      	cmp	r0, #1
1a000488:	d013      	beq.n	1a0004b2 <uartConfig+0x32>
1a00048a:	bd38      	pop	{r3, r4, r5, pc}
   case UART_USB:
      Chip_UART_Init(UART_USB_LPC);
1a00048c:	4d12      	ldr	r5, [pc, #72]	; (1a0004d8 <uartConfig+0x58>)
1a00048e:	4628      	mov	r0, r5
1a000490:	f000 feba 	bl	1a001208 <Chip_UART_Init>
      Chip_UART_SetBaud(UART_USB_LPC, baudRate);  /* Set Baud rate */
1a000494:	4628      	mov	r0, r5
1a000496:	4621      	mov	r1, r4
1a000498:	f000 ff3c 	bl	1a001314 <Chip_UART_SetBaud>
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
1a00049c:	2301      	movs	r3, #1
1a00049e:	60ab      	str	r3, [r5, #8]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
    pUART->TER2 = UART_TER2_TXEN;
1a0004a0:	65eb      	str	r3, [r5, #92]	; 0x5c
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0004a2:	4b0e      	ldr	r3, [pc, #56]	; (1a0004dc <uartConfig+0x5c>)
1a0004a4:	221e      	movs	r2, #30
1a0004a6:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
1a0004aa:	22d6      	movs	r2, #214	; 0xd6
1a0004ac:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
1a0004b0:	bd38      	pop	{r3, r4, r5, pc}
      //   NVIC_SetPriority(USART2_IRQn, 6);
      // Enable Interrupt for UART channel
      //   NVIC_EnableIRQ(USART2_IRQn);
   break;
   case UART_232:
      Chip_UART_Init(UART_232_LPC);
1a0004b2:	4d0b      	ldr	r5, [pc, #44]	; (1a0004e0 <uartConfig+0x60>)
1a0004b4:	4628      	mov	r0, r5
1a0004b6:	f000 fea7 	bl	1a001208 <Chip_UART_Init>
      Chip_UART_SetBaud(UART_232_LPC, baudRate);  /* Set Baud rate */
1a0004ba:	4628      	mov	r0, r5
1a0004bc:	4621      	mov	r1, r4
1a0004be:	f000 ff29 	bl	1a001314 <Chip_UART_SetBaud>
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
1a0004c2:	2301      	movs	r3, #1
1a0004c4:	60ab      	str	r3, [r5, #8]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
    pUART->TER2 = UART_TER2_TXEN;
1a0004c6:	65eb      	str	r3, [r5, #92]	; 0x5c
1a0004c8:	4b04      	ldr	r3, [pc, #16]	; (1a0004dc <uartConfig+0x5c>)
1a0004ca:	221a      	movs	r2, #26
1a0004cc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
1a0004d0:	22d2      	movs	r2, #210	; 0xd2
1a0004d2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
1a0004d6:	bd38      	pop	{r3, r4, r5, pc}
1a0004d8:	400c1000 	.word	0x400c1000
1a0004dc:	40086000 	.word	0x40086000
1a0004e0:	400c2000 	.word	0x400c2000

1a0004e4 <uartReadByte>:

bool_t uartReadByte( uartMap_t uart, uint8_t* receivedByte ){

   bool_t retVal = TRUE;

   switch(uart){
1a0004e4:	b110      	cbz	r0, 1a0004ec <uartReadByte+0x8>
1a0004e6:	2801      	cmp	r0, #1
1a0004e8:	d00a      	beq.n	1a000500 <uartReadByte+0x1c>
1a0004ea:	e013      	b.n	1a000514 <uartReadByte+0x30>
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0004ec:	4b0c      	ldr	r3, [pc, #48]	; (1a000520 <uartReadByte+0x3c>)
1a0004ee:	695b      	ldr	r3, [r3, #20]
   case UART_USB:
      if ( Chip_UART_ReadLineStatus(UART_USB_LPC) & UART_LSR_RDR ) {
1a0004f0:	f013 0f01 	tst.w	r3, #1
1a0004f4:	d010      	beq.n	1a000518 <uartReadByte+0x34>
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0004f6:	4b0a      	ldr	r3, [pc, #40]	; (1a000520 <uartReadByte+0x3c>)
1a0004f8:	681b      	ldr	r3, [r3, #0]
         *receivedByte = Chip_UART_ReadByte(UART_USB_LPC);
1a0004fa:	700b      	strb	r3, [r1, #0]
}


bool_t uartReadByte( uartMap_t uart, uint8_t* receivedByte ){

   bool_t retVal = TRUE;
1a0004fc:	2001      	movs	r0, #1
1a0004fe:	4770      	bx	lr
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a000500:	4b08      	ldr	r3, [pc, #32]	; (1a000524 <uartReadByte+0x40>)
1a000502:	695b      	ldr	r3, [r3, #20]
      } else{
         retVal = FALSE;
      }
   break;
   case UART_232:
      if ( Chip_UART_ReadLineStatus(UART_232_LPC) & UART_LSR_RDR ) {
1a000504:	f013 0f01 	tst.w	r3, #1
1a000508:	d008      	beq.n	1a00051c <uartReadByte+0x38>
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a00050a:	4b06      	ldr	r3, [pc, #24]	; (1a000524 <uartReadByte+0x40>)
1a00050c:	681b      	ldr	r3, [r3, #0]
         *receivedByte = Chip_UART_ReadByte(UART_232_LPC);
1a00050e:	700b      	strb	r3, [r1, #0]
}


bool_t uartReadByte( uartMap_t uart, uint8_t* receivedByte ){

   bool_t retVal = TRUE;
1a000510:	2001      	movs	r0, #1
1a000512:	4770      	bx	lr
1a000514:	2001      	movs	r0, #1
1a000516:	4770      	bx	lr
   switch(uart){
   case UART_USB:
      if ( Chip_UART_ReadLineStatus(UART_USB_LPC) & UART_LSR_RDR ) {
         *receivedByte = Chip_UART_ReadByte(UART_USB_LPC);
      } else{
         retVal = FALSE;
1a000518:	2000      	movs	r0, #0
1a00051a:	4770      	bx	lr
   break;
   case UART_232:
      if ( Chip_UART_ReadLineStatus(UART_232_LPC) & UART_LSR_RDR ) {
         *receivedByte = Chip_UART_ReadByte(UART_232_LPC);
      } else{
         retVal = FALSE;
1a00051c:	2000      	movs	r0, #0
   case UART_485:
   break;
   }

   return retVal;
}
1a00051e:	4770      	bx	lr
1a000520:	400c1000 	.word	0x400c1000
1a000524:	400c2000 	.word	0x400c2000

1a000528 <uartWriteByte>:


void uartWriteByte( uartMap_t uart, uint8_t byte ){

   switch(uart){
1a000528:	b110      	cbz	r0, 1a000530 <uartWriteByte+0x8>
1a00052a:	2801      	cmp	r0, #1
1a00052c:	d008      	beq.n	1a000540 <uartWriteByte+0x18>
1a00052e:	4770      	bx	lr
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a000530:	4b07      	ldr	r3, [pc, #28]	; (1a000550 <uartWriteByte+0x28>)
1a000532:	695b      	ldr	r3, [r3, #20]
   case UART_USB:
      while ((Chip_UART_ReadLineStatus(UART_USB_LPC) & UART_LSR_THRE) == 0) {}   // Wait for space in FIFO
1a000534:	f013 0f20 	tst.w	r3, #32
1a000538:	d0fa      	beq.n	1a000530 <uartWriteByte+0x8>
 * @note	This function attempts to place a byte into the UART transmit
 *			FIFO or transmit hold register regard regardless of UART state
 */
STATIC INLINE void Chip_UART_SendByte(LPC_USART_T *pUART, uint8_t data)
{
	pUART->THR = (uint32_t) data;
1a00053a:	4b05      	ldr	r3, [pc, #20]	; (1a000550 <uartWriteByte+0x28>)
1a00053c:	6019      	str	r1, [r3, #0]
1a00053e:	4770      	bx	lr
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a000540:	4b04      	ldr	r3, [pc, #16]	; (1a000554 <uartWriteByte+0x2c>)
1a000542:	695b      	ldr	r3, [r3, #20]
      Chip_UART_SendByte(UART_USB_LPC, byte);
   break;
   case UART_232:
      while ((Chip_UART_ReadLineStatus(UART_232_LPC) & UART_LSR_THRE) == 0) {}   // Wait for space in FIFO
1a000544:	f013 0f20 	tst.w	r3, #32
1a000548:	d0fa      	beq.n	1a000540 <uartWriteByte+0x18>
 * @note	This function attempts to place a byte into the UART transmit
 *			FIFO or transmit hold register regard regardless of UART state
 */
STATIC INLINE void Chip_UART_SendByte(LPC_USART_T *pUART, uint8_t data)
{
	pUART->THR = (uint32_t) data;
1a00054a:	4b02      	ldr	r3, [pc, #8]	; (1a000554 <uartWriteByte+0x2c>)
1a00054c:	6019      	str	r1, [r3, #0]
1a00054e:	4770      	bx	lr
1a000550:	400c1000 	.word	0x400c1000
1a000554:	400c2000 	.word	0x400c2000

1a000558 <waitForReceiveStringOrTimeout>:
/*==================[external data declaration]==============================*/

/*==================[external functions declaration]=========================*/

waitForReceiveStringOrTimeoutState_t waitForReceiveStringOrTimeout(
   uartMap_t uart, waitForReceiveStringOrTimeout_t* instance ){
1a000558:	b510      	push	{r4, lr}
1a00055a:	b082      	sub	sp, #8
1a00055c:	460c      	mov	r4, r1

   uint8_t receiveByte;

   switch( instance->state ){
1a00055e:	780b      	ldrb	r3, [r1, #0]
1a000560:	2b03      	cmp	r3, #3
1a000562:	d836      	bhi.n	1a0005d2 <waitForReceiveStringOrTimeout+0x7a>
1a000564:	e8df f003 	tbb	[pc, r3]
1a000568:	322f0d02 	.word	0x322f0d02

      case UART_RECEIVE_STRING_CONFIG:

         delayConfig( &(instance->delay), instance->timeout );
1a00056c:	f101 0018 	add.w	r0, r1, #24
1a000570:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
1a000574:	f000 fa4a 	bl	1a000a0c <delayConfig>

         instance->stringIndex = 0;
1a000578:	2300      	movs	r3, #0
1a00057a:	8163      	strh	r3, [r4, #10]

         instance->state = UART_RECEIVE_STRING_RECEIVING;
1a00057c:	2301      	movs	r3, #1
1a00057e:	7023      	strb	r3, [r4, #0]

      break;
1a000580:	e029      	b.n	1a0005d6 <waitForReceiveStringOrTimeout+0x7e>

      case UART_RECEIVE_STRING_RECEIVING:

         if( uartReadByte( uart, &receiveByte ) ){
1a000582:	f10d 0107 	add.w	r1, sp, #7
1a000586:	f7ff ffad 	bl	1a0004e4 <uartReadByte>
1a00058a:	b1a0      	cbz	r0, 1a0005b6 <waitForReceiveStringOrTimeout+0x5e>

            // TODO: DEBUG
            uartWriteByte( UART_USB, receiveByte );
1a00058c:	2000      	movs	r0, #0
1a00058e:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a000592:	f7ff ffc9 	bl	1a000528 <uartWriteByte>

            if( (instance->string)[(instance->stringIndex)] == receiveByte ){
1a000596:	6862      	ldr	r2, [r4, #4]
1a000598:	8963      	ldrh	r3, [r4, #10]
1a00059a:	5cd1      	ldrb	r1, [r2, r3]
1a00059c:	f89d 2007 	ldrb.w	r2, [sp, #7]
1a0005a0:	4291      	cmp	r1, r2
1a0005a2:	d108      	bne.n	1a0005b6 <waitForReceiveStringOrTimeout+0x5e>

               (instance->stringIndex)++;
1a0005a4:	3301      	adds	r3, #1
1a0005a6:	b29b      	uxth	r3, r3
1a0005a8:	8163      	strh	r3, [r4, #10]

               if( (instance->stringIndex) == (instance->stringSize - 1) ){
1a0005aa:	8922      	ldrh	r2, [r4, #8]
1a0005ac:	3a01      	subs	r2, #1
1a0005ae:	4293      	cmp	r3, r2
1a0005b0:	d101      	bne.n	1a0005b6 <waitForReceiveStringOrTimeout+0x5e>
                  instance->state = UART_RECEIVE_STRING_RECEIVED_OK;
1a0005b2:	2302      	movs	r3, #2
1a0005b4:	7023      	strb	r3, [r4, #0]

            }

         }

         if( delayRead( &(instance->delay) ) ){
1a0005b6:	f104 0018 	add.w	r0, r4, #24
1a0005ba:	f000 fa37 	bl	1a000a2c <delayRead>
1a0005be:	b150      	cbz	r0, 1a0005d6 <waitForReceiveStringOrTimeout+0x7e>
            instance->state = UART_RECEIVE_STRING_TIMEOUT;
1a0005c0:	2303      	movs	r3, #3
1a0005c2:	7023      	strb	r3, [r4, #0]
1a0005c4:	e007      	b.n	1a0005d6 <waitForReceiveStringOrTimeout+0x7e>
         }

      break;

      case UART_RECEIVE_STRING_RECEIVED_OK:
         instance->state = UART_RECEIVE_STRING_CONFIG;
1a0005c6:	2300      	movs	r3, #0
1a0005c8:	700b      	strb	r3, [r1, #0]
      break;
1a0005ca:	e004      	b.n	1a0005d6 <waitForReceiveStringOrTimeout+0x7e>

      case UART_RECEIVE_STRING_TIMEOUT:
         instance->state = UART_RECEIVE_STRING_CONFIG;
1a0005cc:	2300      	movs	r3, #0
1a0005ce:	700b      	strb	r3, [r1, #0]
      break;
1a0005d0:	e001      	b.n	1a0005d6 <waitForReceiveStringOrTimeout+0x7e>

      default:
         instance->state = UART_RECEIVE_STRING_CONFIG;
1a0005d2:	2300      	movs	r3, #0
1a0005d4:	700b      	strb	r3, [r1, #0]
      break;
   }

   return instance->state;
}
1a0005d6:	7820      	ldrb	r0, [r4, #0]
1a0005d8:	b002      	add	sp, #8
1a0005da:	bd10      	pop	{r4, pc}

1a0005dc <waitForReceiveStringOrTimeoutBlocking>:



bool_t waitForReceiveStringOrTimeoutBlocking(
   uartMap_t uart, char* string, uint16_t stringSize, tick_t timeout ){
1a0005dc:	b510      	push	{r4, lr}
1a0005de:	b08c      	sub	sp, #48	; 0x30
1a0005e0:	4604      	mov	r4, r0
   waitForReceiveStringOrTimeout_t waitText;
   waitForReceiveStringOrTimeoutState_t waitTextState;

   waitTextState = UART_RECEIVE_STRING_CONFIG;

   waitText.state = UART_RECEIVE_STRING_CONFIG;
1a0005e2:	2000      	movs	r0, #0
1a0005e4:	f88d 0000 	strb.w	r0, [sp]
   waitText.string =  string;
1a0005e8:	9101      	str	r1, [sp, #4]
   waitText.stringSize = stringSize;
1a0005ea:	f8ad 2008 	strh.w	r2, [sp, #8]
   waitText.timeout = timeout;
1a0005ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
1a0005f2:	e9cd 2304 	strd	r2, r3, [sp, #16]

   while( waitTextState != UART_RECEIVE_STRING_RECEIVED_OK &&
1a0005f6:	e003      	b.n	1a000600 <waitForReceiveStringOrTimeoutBlocking+0x24>
          waitTextState != UART_RECEIVE_STRING_TIMEOUT ){
      waitTextState = waitForReceiveStringOrTimeout( uart, &waitText );
1a0005f8:	4620      	mov	r0, r4
1a0005fa:	4669      	mov	r1, sp
1a0005fc:	f7ff ffac 	bl	1a000558 <waitForReceiveStringOrTimeout>
   waitText.state = UART_RECEIVE_STRING_CONFIG;
   waitText.string =  string;
   waitText.stringSize = stringSize;
   waitText.timeout = timeout;

   while( waitTextState != UART_RECEIVE_STRING_RECEIVED_OK &&
1a000600:	1e83      	subs	r3, r0, #2
1a000602:	b2db      	uxtb	r3, r3
1a000604:	2b01      	cmp	r3, #1
1a000606:	d8f7      	bhi.n	1a0005f8 <waitForReceiveStringOrTimeoutBlocking+0x1c>
          waitTextState != UART_RECEIVE_STRING_TIMEOUT ){
      waitTextState = waitForReceiveStringOrTimeout( uart, &waitText );
   }

   if( waitTextState == UART_RECEIVE_STRING_TIMEOUT ){
1a000608:	2803      	cmp	r0, #3
1a00060a:	d001      	beq.n	1a000610 <waitForReceiveStringOrTimeoutBlocking+0x34>


bool_t waitForReceiveStringOrTimeoutBlocking(
   uartMap_t uart, char* string, uint16_t stringSize, tick_t timeout ){

   bool_t retVal = TRUE; // True if OK
1a00060c:	2001      	movs	r0, #1
1a00060e:	e000      	b.n	1a000612 <waitForReceiveStringOrTimeoutBlocking+0x36>
          waitTextState != UART_RECEIVE_STRING_TIMEOUT ){
      waitTextState = waitForReceiveStringOrTimeout( uart, &waitText );
   }

   if( waitTextState == UART_RECEIVE_STRING_TIMEOUT ){
      retVal = FALSE;
1a000610:	2000      	movs	r0, #0
   }

   return retVal;
}
1a000612:	b00c      	add	sp, #48	; 0x30
1a000614:	bd10      	pop	{r4, pc}
1a000616:	bf00      	nop

1a000618 <uartWriteString>:
   break;
   }
}


void uartWriteString( uartMap_t uart, char* str ){
1a000618:	b538      	push	{r3, r4, r5, lr}
1a00061a:	4605      	mov	r5, r0
1a00061c:	460c      	mov	r4, r1
   while(*str != 0){
1a00061e:	e003      	b.n	1a000628 <uartWriteString+0x10>
	  uartWriteByte( uart, (uint8_t)*str );
1a000620:	4628      	mov	r0, r5
1a000622:	f7ff ff81 	bl	1a000528 <uartWriteByte>
	  str++;
1a000626:	3401      	adds	r4, #1
   }
}


void uartWriteString( uartMap_t uart, char* str ){
   while(*str != 0){
1a000628:	7821      	ldrb	r1, [r4, #0]
1a00062a:	2900      	cmp	r1, #0
1a00062c:	d1f8      	bne.n	1a000620 <uartWriteString+0x8>
	  uartWriteByte( uart, (uint8_t)*str );
	  str++;
   }
}
1a00062e:	bd38      	pop	{r3, r4, r5, pc}

1a000630 <UART2_IRQHandler>:
/* 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24) */
void UART0_IRQHandler(void){
}

/* 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26) */
void UART2_IRQHandler(void){
1a000630:	4770      	bx	lr
1a000632:	bf00      	nop

1a000634 <UART3_IRQHandler>:
}

/* 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27) */
void UART3_IRQHandler(void){
1a000634:	4770      	bx	lr
1a000636:	bf00      	nop

1a000638 <sAPI_NullFuncPtr>:
 * param:  void * - Not used
 * return: bool_t - Return always true
 */
bool_t sAPI_NullFuncPtr(void *ptr){
   return 1;
}
1a000638:	2001      	movs	r0, #1
1a00063a:	4770      	bx	lr

1a00063c <errorOcurred>:

/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred(void){
   while(1);
1a00063c:	e7fe      	b.n	1a00063c <errorOcurred>
1a00063e:	bf00      	nop

1a000640 <doNothing>:
}

static void doNothing(void){
1a000640:	4770      	bx	lr
1a000642:	bf00      	nop

1a000644 <Timer_Init>:
 * @param   voidFunctionPointer:   function to be executed at the end of the timer cycle
 * @return   nothing
 * @note   For the 'ticks' parameter, see function Timer_microsecondsToTicks
 */
void Timer_Init( uint8_t timerNumber, uint32_t ticks,
                 voidFunctionPointer_t voidFunctionPointer){
1a000644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   /* Source:
   http://docs.lpcware.com/lpcopen/v1.03/lpc18xx__43xx_2examples_2periph_2periph__blinky_2blinky_8c_source.html */

   /*If timer period = CompareMatch0 Period = 0 => ERROR*/
   if (ticks==0){
1a000648:	b909      	cbnz	r1, 1a00064e <Timer_Init+0xa>
      errorOcurred();
1a00064a:	f7ff fff7 	bl	1a00063c <errorOcurred>
1a00064e:	4605      	mov	r5, r0
1a000650:	4617      	mov	r7, r2
1a000652:	460e      	mov	r6, r1
   }

   /* Enable timer clock and reset it */
   Chip_TIMER_Init(timer_sd[timerNumber].name);
1a000654:	4604      	mov	r4, r0
1a000656:	4a39      	ldr	r2, [pc, #228]	; (1a00073c <Timer_Init+0xf8>)
1a000658:	0043      	lsls	r3, r0, #1
1a00065a:	4403      	add	r3, r0
1a00065c:	009b      	lsls	r3, r3, #2
1a00065e:	eb02 0803 	add.w	r8, r2, r3
1a000662:	58d0      	ldr	r0, [r2, r3]
1a000664:	f001 fdf2 	bl	1a00224c <Chip_TIMER_Init>
   Chip_RGU_TriggerReset(timer_sd[timerNumber].RGU);
1a000668:	f898 3004 	ldrb.w	r3, [r8, #4]
 * @param	ResetNumber	: Peripheral reset number to trigger
 * @return	Nothing
 */
STATIC INLINE void Chip_RGU_TriggerReset(CHIP_RGU_RST_T ResetNumber)
{
	LPC_RGU->RESET_CTRL[ResetNumber >> 5] = 1 << (ResetNumber & 31);
1a00066c:	095a      	lsrs	r2, r3, #5
1a00066e:	f003 031f 	and.w	r3, r3, #31
1a000672:	2101      	movs	r1, #1
1a000674:	4099      	lsls	r1, r3
1a000676:	f102 0340 	add.w	r3, r2, #64	; 0x40
1a00067a:	4a31      	ldr	r2, [pc, #196]	; (1a000740 <Timer_Init+0xfc>)
1a00067c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   while (Chip_RGU_InReset(timer_sd[timerNumber].RGU)) {}
1a000680:	eb04 0344 	add.w	r3, r4, r4, lsl #1
1a000684:	009b      	lsls	r3, r3, #2
1a000686:	4a2d      	ldr	r2, [pc, #180]	; (1a00073c <Timer_Init+0xf8>)
1a000688:	4413      	add	r3, r2
1a00068a:	791b      	ldrb	r3, [r3, #4]
 * @param	ResetNumber	: Peripheral reset number to trigger
 * @return	true if the periperal is still being reset
 */
STATIC INLINE bool Chip_RGU_InReset(CHIP_RGU_RST_T ResetNumber)
{
	return !(LPC_RGU->RESET_ACTIVE_STATUS[ResetNumber >> 5] & (1 << (ResetNumber & 31)));
1a00068c:	095a      	lsrs	r2, r3, #5
1a00068e:	3254      	adds	r2, #84	; 0x54
1a000690:	492b      	ldr	r1, [pc, #172]	; (1a000740 <Timer_Init+0xfc>)
1a000692:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
1a000696:	f003 031f 	and.w	r3, r3, #31
1a00069a:	2201      	movs	r2, #1
1a00069c:	fa02 f303 	lsl.w	r3, r2, r3
1a0006a0:	4219      	tst	r1, r3
1a0006a2:	d0ed      	beq.n	1a000680 <Timer_Init+0x3c>
   Chip_TIMER_Reset(timer_sd[timerNumber].name);
1a0006a4:	4a25      	ldr	r2, [pc, #148]	; (1a00073c <Timer_Init+0xf8>)
1a0006a6:	006b      	lsls	r3, r5, #1
1a0006a8:	442b      	add	r3, r5
1a0006aa:	009b      	lsls	r3, r3, #2
1a0006ac:	eb02 0803 	add.w	r8, r2, r3
1a0006b0:	58d4      	ldr	r4, [r2, r3]
1a0006b2:	4620      	mov	r0, r4
1a0006b4:	f001 fdd6 	bl	1a002264 <Chip_TIMER_Reset>

   /* Update the defalut function pointer name of the Compare match 0*/
   timer_dd[timerNumber].timerCompareMatchFunctionPointer[TIMERCOMPAREMATCH0] = voidFunctionPointer;
1a0006b8:	012b      	lsls	r3, r5, #4
1a0006ba:	4a22      	ldr	r2, [pc, #136]	; (1a000744 <Timer_Init+0x100>)
1a0006bc:	50d7      	str	r7, [r2, r3]
 * @param	matchnum	: Match timer, 0 to 3
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_MatchEnableInt(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->MCR |= TIMER_INT_ON_MATCH(matchnum);
1a0006be:	6963      	ldr	r3, [r4, #20]
1a0006c0:	f043 0301 	orr.w	r3, r3, #1
1a0006c4:	6163      	str	r3, [r4, #20]
 * @return	Nothing
 * @note	Sets one of the timer match values.
 */
STATIC INLINE void Chip_TIMER_SetMatch(LPC_TIMER_T *pTMR, int8_t matchnum, uint32_t matchval)
{
	pTMR->MR[matchnum] = matchval;
1a0006c6:	61a6      	str	r6, [r4, #24]
 * @param	matchnum	: Match timer, 0 to 3
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_ResetOnMatchEnable(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->MCR |= TIMER_RESET_ON_MATCH(matchnum);
1a0006c8:	6963      	ldr	r3, [r4, #20]
1a0006ca:	f043 0302 	orr.w	r3, r3, #2
1a0006ce:	6163      	str	r3, [r4, #20]
 * @return	Nothing
 * @note	Enables the timer to start counting.
 */
STATIC INLINE void Chip_TIMER_Enable(LPC_TIMER_T *pTMR)
{
	pTMR->TCR |= TIMER_ENABLE;
1a0006d0:	6863      	ldr	r3, [r4, #4]
1a0006d2:	f043 0301 	orr.w	r3, r3, #1
1a0006d6:	6063      	str	r3, [r4, #4]

   /*Enable timer*/
   Chip_TIMER_Enable(timer_sd[timerNumber].name);

   /* Enable timer interrupt */
   NVIC_SetPriority(timer_sd[timerNumber].IRQn, MAX_SYSCALL_INTERRUPT_PRIORITY+1);
1a0006d8:	f8d8 2008 	ldr.w	r2, [r8, #8]
1a0006dc:	b2d3      	uxtb	r3, r2
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
1a0006de:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0006e2:	d006      	beq.n	1a0006f2 <Timer_Init+0xae>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
1a0006e4:	f002 020f 	and.w	r2, r2, #15
1a0006e8:	4b17      	ldr	r3, [pc, #92]	; (1a000748 <Timer_Init+0x104>)
1a0006ea:	4413      	add	r3, r2
1a0006ec:	22c0      	movs	r2, #192	; 0xc0
1a0006ee:	761a      	strb	r2, [r3, #24]
1a0006f0:	e005      	b.n	1a0006fe <Timer_Init+0xba>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
1a0006f2:	4a16      	ldr	r2, [pc, #88]	; (1a00074c <Timer_Init+0x108>)
1a0006f4:	fa42 f383 	sxtab	r3, r2, r3
1a0006f8:	22c0      	movs	r2, #192	; 0xc0
1a0006fa:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
   NVIC_EnableIRQ(timer_sd[timerNumber].IRQn);
1a0006fe:	4c0f      	ldr	r4, [pc, #60]	; (1a00073c <Timer_Init+0xf8>)
1a000700:	006e      	lsls	r6, r5, #1
1a000702:	1973      	adds	r3, r6, r5
1a000704:	009b      	lsls	r3, r3, #2
1a000706:	4423      	add	r3, r4
1a000708:	689b      	ldr	r3, [r3, #8]
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
1a00070a:	b259      	sxtb	r1, r3
1a00070c:	0949      	lsrs	r1, r1, #5
1a00070e:	f003 031f 	and.w	r3, r3, #31
1a000712:	2201      	movs	r2, #1
1a000714:	fa02 f303 	lsl.w	r3, r2, r3
1a000718:	480c      	ldr	r0, [pc, #48]	; (1a00074c <Timer_Init+0x108>)
1a00071a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   NVIC_ClearPendingIRQ(timer_sd[timerNumber].IRQn);
1a00071e:	4435      	add	r5, r6
1a000720:	00ad      	lsls	r5, r5, #2
1a000722:	4425      	add	r5, r4
1a000724:	68a9      	ldr	r1, [r5, #8]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1a000726:	b24b      	sxtb	r3, r1
1a000728:	095b      	lsrs	r3, r3, #5
1a00072a:	f001 011f 	and.w	r1, r1, #31
1a00072e:	408a      	lsls	r2, r1
1a000730:	3360      	adds	r3, #96	; 0x60
1a000732:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
1a000736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00073a:	bf00      	nop
1a00073c:	1a002944 	.word	0x1a002944
1a000740:	40053000 	.word	0x40053000
1a000744:	10000000 	.word	0x10000000
1a000748:	e000ecfc 	.word	0xe000ecfc
1a00074c:	e000e100 	.word	0xe000e100

1a000750 <Timer_DeInit>:
/*
 * @Brief   Disables timer peripheral
 * @param   timerNumber:   Timer number, 0 to 3
 * @return   nothing
 */
void Timer_DeInit(uint8_t timerNumber){
1a000750:	b538      	push	{r3, r4, r5, lr}
   NVIC_DisableIRQ(timer_sd[timerNumber].IRQn);
1a000752:	4c0d      	ldr	r4, [pc, #52]	; (1a000788 <Timer_DeInit+0x38>)
1a000754:	0045      	lsls	r5, r0, #1
1a000756:	182b      	adds	r3, r5, r0
1a000758:	009b      	lsls	r3, r3, #2
1a00075a:	4423      	add	r3, r4
1a00075c:	689a      	ldr	r2, [r3, #8]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
1a00075e:	b253      	sxtb	r3, r2
1a000760:	095b      	lsrs	r3, r3, #5
1a000762:	f002 021f 	and.w	r2, r2, #31
1a000766:	2101      	movs	r1, #1
1a000768:	fa01 f202 	lsl.w	r2, r1, r2
1a00076c:	3320      	adds	r3, #32
1a00076e:	4907      	ldr	r1, [pc, #28]	; (1a00078c <Timer_DeInit+0x3c>)
1a000770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   Chip_TIMER_Disable(timer_sd[timerNumber].name);
1a000774:	4428      	add	r0, r5
1a000776:	0080      	lsls	r0, r0, #2
1a000778:	5820      	ldr	r0, [r4, r0]
 * @return	Nothing
 * @note	Disables the timer to stop counting.
 */
STATIC INLINE void Chip_TIMER_Disable(LPC_TIMER_T *pTMR)
{
	pTMR->TCR &= ~TIMER_ENABLE;
1a00077a:	6843      	ldr	r3, [r0, #4]
1a00077c:	f023 0301 	bic.w	r3, r3, #1
1a000780:	6043      	str	r3, [r0, #4]
   Chip_TIMER_DeInit(timer_sd[timerNumber].name);
1a000782:	f001 fd69 	bl	1a002258 <Chip_TIMER_DeInit>
1a000786:	bd38      	pop	{r3, r4, r5, pc}
1a000788:	1a002944 	.word	0x1a002944
1a00078c:	e000e100 	.word	0xe000e100

1a000790 <Timer_microsecondsToTicks>:
 * @return   Equivalent in Ticks for the LPC4337
 * @note   Can be used for the second parameter in the Timer_init
 */
uint32_t Timer_microsecondsToTicks(uint32_t uS){
   return (uS*(LPC4337_MAX_FREC/1000000));
}
1a000790:	23cc      	movs	r3, #204	; 0xcc
1a000792:	fb03 f000 	mul.w	r0, r3, r0
1a000796:	4770      	bx	lr

1a000798 <Timer_EnableCompareMatch>:
 * @return   None
 * @note   For the 'ticks' parameter, see function Timer_microsecondsToTicks
 */
void Timer_EnableCompareMatch( uint8_t timerNumber, uint8_t compareMatchNumber,
                               uint32_t ticks,
                               voidFunctionPointer_t voidFunctionPointer){
1a000798:	b430      	push	{r4, r5}

   timer_dd[timerNumber].timerCompareMatchFunctionPointer[compareMatchNumber] = voidFunctionPointer;
1a00079a:	eb01 0580 	add.w	r5, r1, r0, lsl #2
1a00079e:	4c0a      	ldr	r4, [pc, #40]	; (1a0007c8 <Timer_EnableCompareMatch+0x30>)
1a0007a0:	f844 3025 	str.w	r3, [r4, r5, lsl #2]

   Chip_TIMER_MatchEnableInt(timer_sd[timerNumber].name, compareMatchNumber);
1a0007a4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0007a8:	0080      	lsls	r0, r0, #2
1a0007aa:	4b08      	ldr	r3, [pc, #32]	; (1a0007cc <Timer_EnableCompareMatch+0x34>)
1a0007ac:	5818      	ldr	r0, [r3, r0]
 * @param	matchnum	: Match timer, 0 to 3
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_MatchEnableInt(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->MCR |= TIMER_INT_ON_MATCH(matchnum);
1a0007ae:	6944      	ldr	r4, [r0, #20]
1a0007b0:	b249      	sxtb	r1, r1
1a0007b2:	eb01 0541 	add.w	r5, r1, r1, lsl #1
1a0007b6:	2301      	movs	r3, #1
1a0007b8:	40ab      	lsls	r3, r5
1a0007ba:	4323      	orrs	r3, r4
1a0007bc:	6143      	str	r3, [r0, #20]
 * @return	Nothing
 * @note	Sets one of the timer match values.
 */
STATIC INLINE void Chip_TIMER_SetMatch(LPC_TIMER_T *pTMR, int8_t matchnum, uint32_t matchval)
{
	pTMR->MR[matchnum] = matchval;
1a0007be:	3106      	adds	r1, #6
1a0007c0:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
   Chip_TIMER_SetMatch(timer_sd[timerNumber].name, compareMatchNumber, ticks);
}
1a0007c4:	bc30      	pop	{r4, r5}
1a0007c6:	4770      	bx	lr
1a0007c8:	10000000 	.word	0x10000000
1a0007cc:	1a002944 	.word	0x1a002944

1a0007d0 <Timer_DisableCompareMatch>:
 * @param   timerNumber:   Timer number, 0 to 3
 * @param   compareMatchNumber:   Compare match number, 1 to 3
 * @return   None
 */
void Timer_DisableCompareMatch( uint8_t timerNumber,
                                uint8_t compareMatchNumber ){
1a0007d0:	b410      	push	{r4}

   timer_dd[timerNumber].timerCompareMatchFunctionPointer[compareMatchNumber] = errorOcurred;
1a0007d2:	eb01 0280 	add.w	r2, r1, r0, lsl #2
1a0007d6:	4c0c      	ldr	r4, [pc, #48]	; (1a000808 <Timer_DisableCompareMatch+0x38>)
1a0007d8:	4b0c      	ldr	r3, [pc, #48]	; (1a00080c <Timer_DisableCompareMatch+0x3c>)
1a0007da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]

   Chip_TIMER_ClearMatch(timer_sd[timerNumber].name, compareMatchNumber);
1a0007de:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0007e2:	0080      	lsls	r0, r0, #2
1a0007e4:	4b0a      	ldr	r3, [pc, #40]	; (1a000810 <Timer_DisableCompareMatch+0x40>)
1a0007e6:	581a      	ldr	r2, [r3, r0]
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0007e8:	b249      	sxtb	r1, r1
1a0007ea:	2301      	movs	r3, #1
1a0007ec:	fa03 f001 	lsl.w	r0, r3, r1
1a0007f0:	6010      	str	r0, [r2, #0]
 * @param	matchnum	: Match timer, 0 to 3
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_MatchDisableInt(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->MCR &= ~TIMER_INT_ON_MATCH(matchnum);
1a0007f2:	6950      	ldr	r0, [r2, #20]
1a0007f4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
1a0007f8:	408b      	lsls	r3, r1
1a0007fa:	ea20 0303 	bic.w	r3, r0, r3
1a0007fe:	6153      	str	r3, [r2, #20]
   Chip_TIMER_MatchDisableInt(timer_sd[timerNumber].name, compareMatchNumber);
}
1a000800:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000804:	4770      	bx	lr
1a000806:	bf00      	nop
1a000808:	1a00063d 	.word	0x1a00063d
1a00080c:	10000000 	.word	0x10000000
1a000810:	1a002944 	.word	0x1a002944

1a000814 <Timer_SetCompareMatch>:
 *    interruption
 */
void Timer_SetCompareMatch( uint8_t timerNumber,
                            uint8_t compareMatchNumber,
                            uint32_t ticks){
   Chip_TIMER_SetMatch(timer_sd[timerNumber].name, compareMatchNumber,ticks);
1a000814:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a000818:	0080      	lsls	r0, r0, #2
1a00081a:	4b03      	ldr	r3, [pc, #12]	; (1a000828 <Timer_SetCompareMatch+0x14>)
1a00081c:	581b      	ldr	r3, [r3, r0]
 * @return	Nothing
 * @note	Sets one of the timer match values.
 */
STATIC INLINE void Chip_TIMER_SetMatch(LPC_TIMER_T *pTMR, int8_t matchnum, uint32_t matchval)
{
	pTMR->MR[matchnum] = matchval;
1a00081e:	b249      	sxtb	r1, r1
1a000820:	3106      	adds	r1, #6
1a000822:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
1a000826:	4770      	bx	lr
1a000828:	1a002944 	.word	0x1a002944

1a00082c <TIMER0_IRQHandler>:
/*==================[ISR external functions definition]======================*/
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void){
1a00082c:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00082e:	2400      	movs	r4, #0
1a000830:	e012      	b.n	1a000858 <TIMER0_IRQHandler+0x2c>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a000832:	4b0b      	ldr	r3, [pc, #44]	; (1a000860 <TIMER0_IRQHandler+0x34>)
1a000834:	681a      	ldr	r2, [r3, #0]
1a000836:	f004 010f 	and.w	r1, r4, #15
1a00083a:	2301      	movs	r3, #1
1a00083c:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ){
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ){
1a00083e:	421a      	tst	r2, r3
1a000840:	d008      	beq.n	1a000854 <TIMER0_IRQHandler+0x28>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])();
1a000842:	4b08      	ldr	r3, [pc, #32]	; (1a000864 <TIMER0_IRQHandler+0x38>)
1a000844:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a000848:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00084a:	b262      	sxtb	r2, r4
1a00084c:	2301      	movs	r3, #1
1a00084e:	4093      	lsls	r3, r2
1a000850:	4a03      	ldr	r2, [pc, #12]	; (1a000860 <TIMER0_IRQHandler+0x34>)
1a000852:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ){
1a000854:	3401      	adds	r4, #1
1a000856:	b2e4      	uxtb	r4, r4
 */
void TIMER0_IRQHandler(void){

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000858:	2c03      	cmp	r4, #3
1a00085a:	d9ea      	bls.n	1a000832 <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])();
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a00085c:	bd10      	pop	{r4, pc}
1a00085e:	bf00      	nop
1a000860:	40084000 	.word	0x40084000
1a000864:	10000000 	.word	0x10000000

1a000868 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void ){
1a000868:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00086a:	2400      	movs	r4, #0
1a00086c:	e013      	b.n	1a000896 <TIMER1_IRQHandler+0x2e>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a00086e:	4b0b      	ldr	r3, [pc, #44]	; (1a00089c <TIMER1_IRQHandler+0x34>)
1a000870:	681a      	ldr	r2, [r3, #0]
1a000872:	f004 010f 	and.w	r1, r4, #15
1a000876:	2301      	movs	r3, #1
1a000878:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ){
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ){
1a00087a:	421a      	tst	r2, r3
1a00087c:	d009      	beq.n	1a000892 <TIMER1_IRQHandler+0x2a>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])();
1a00087e:	1d23      	adds	r3, r4, #4
1a000880:	4a07      	ldr	r2, [pc, #28]	; (1a0008a0 <TIMER1_IRQHandler+0x38>)
1a000882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a000886:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a000888:	b262      	sxtb	r2, r4
1a00088a:	2301      	movs	r3, #1
1a00088c:	4093      	lsls	r3, r2
1a00088e:	4a03      	ldr	r2, [pc, #12]	; (1a00089c <TIMER1_IRQHandler+0x34>)
1a000890:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ){
1a000892:	3401      	adds	r4, #1
1a000894:	b2e4      	uxtb	r4, r4

void TIMER1_IRQHandler( void ){

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000896:	2c03      	cmp	r4, #3
1a000898:	d9e9      	bls.n	1a00086e <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])();
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a00089a:	bd10      	pop	{r4, pc}
1a00089c:	40085000 	.word	0x40085000
1a0008a0:	10000000 	.word	0x10000000

1a0008a4 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void ){
1a0008a4:	b510      	push	{r4, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0008a6:	2400      	movs	r4, #0
1a0008a8:	e014      	b.n	1a0008d4 <TIMER2_IRQHandler+0x30>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0008aa:	4b0c      	ldr	r3, [pc, #48]	; (1a0008dc <TIMER2_IRQHandler+0x38>)
1a0008ac:	681a      	ldr	r2, [r3, #0]
1a0008ae:	f004 010f 	and.w	r1, r4, #15
1a0008b2:	2301      	movs	r3, #1
1a0008b4:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ){
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ){
1a0008b6:	421a      	tst	r2, r3
1a0008b8:	d00a      	beq.n	1a0008d0 <TIMER2_IRQHandler+0x2c>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])();
1a0008ba:	f104 0308 	add.w	r3, r4, #8
1a0008be:	4a08      	ldr	r2, [pc, #32]	; (1a0008e0 <TIMER2_IRQHandler+0x3c>)
1a0008c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0008c4:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0008c6:	b262      	sxtb	r2, r4
1a0008c8:	2301      	movs	r3, #1
1a0008ca:	4093      	lsls	r3, r2
1a0008cc:	4a03      	ldr	r2, [pc, #12]	; (1a0008dc <TIMER2_IRQHandler+0x38>)
1a0008ce:	6013      	str	r3, [r2, #0]
void TIMER2_IRQHandler( void ){
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ){
1a0008d0:	3401      	adds	r4, #1
1a0008d2:	b2e4      	uxtb	r4, r4
}

void TIMER2_IRQHandler( void ){
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0008d4:	2c03      	cmp	r4, #3
1a0008d6:	d9e8      	bls.n	1a0008aa <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])();
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a0008d8:	bd10      	pop	{r4, pc}
1a0008da:	bf00      	nop
1a0008dc:	400c3000 	.word	0x400c3000
1a0008e0:	10000000 	.word	0x10000000

1a0008e4 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void ){
1a0008e4:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0008e6:	2400      	movs	r4, #0
1a0008e8:	e014      	b.n	1a000914 <TIMER3_IRQHandler+0x30>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0008ea:	4b0c      	ldr	r3, [pc, #48]	; (1a00091c <TIMER3_IRQHandler+0x38>)
1a0008ec:	681a      	ldr	r2, [r3, #0]
1a0008ee:	f004 010f 	and.w	r1, r4, #15
1a0008f2:	2301      	movs	r3, #1
1a0008f4:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ){
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)){
1a0008f6:	421a      	tst	r2, r3
1a0008f8:	d00a      	beq.n	1a000910 <TIMER3_IRQHandler+0x2c>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])();
1a0008fa:	f104 030c 	add.w	r3, r4, #12
1a0008fe:	4a08      	ldr	r2, [pc, #32]	; (1a000920 <TIMER3_IRQHandler+0x3c>)
1a000900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a000904:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a000906:	b262      	sxtb	r2, r4
1a000908:	2301      	movs	r3, #1
1a00090a:	4093      	lsls	r3, r2
1a00090c:	4a03      	ldr	r2, [pc, #12]	; (1a00091c <TIMER3_IRQHandler+0x38>)
1a00090e:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ){
1a000910:	3401      	adds	r4, #1
1a000912:	b2e4      	uxtb	r4, r4
/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void ){

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000914:	2c03      	cmp	r4, #3
1a000916:	d9e8      	bls.n	1a0008ea <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])();
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a000918:	bd10      	pop	{r4, pc}
1a00091a:	bf00      	nop
1a00091c:	400c4000 	.word	0x400c4000
1a000920:	10000000 	.word	0x10000000

1a000924 <delayInaccurate>:

/*==================[external functions definition]==========================*/

/* ---- Inaccurate Blocking Delay ---- */

void delayInaccurate(tick_t delay_ms) {
1a000924:	b430      	push	{r4, r5}
1a000926:	b084      	sub	sp, #16
   volatile tick_t i;
   volatile tick_t delay;

   delay = INACCURATE_TO_MS * delay_ms;
1a000928:	0109      	lsls	r1, r1, #4
1a00092a:	0104      	lsls	r4, r0, #4
1a00092c:	ea41 7510 	orr.w	r5, r1, r0, lsr #28
1a000930:	00ab      	lsls	r3, r5, #2
1a000932:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
1a000936:	00a2      	lsls	r2, r4, #2
1a000938:	1912      	adds	r2, r2, r4
1a00093a:	416b      	adcs	r3, r5
1a00093c:	0219      	lsls	r1, r3, #8
1a00093e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
1a000942:	0210      	lsls	r0, r2, #8
1a000944:	1a82      	subs	r2, r0, r2
1a000946:	eb61 0303 	sbc.w	r3, r1, r3
1a00094a:	e9cd 2300 	strd	r2, r3, [sp]

   for( i=delay; i>0; i-- );
1a00094e:	e9dd 2300 	ldrd	r2, r3, [sp]
1a000952:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a000956:	e007      	b.n	1a000968 <delayInaccurate+0x44>
1a000958:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00095c:	f112 32ff 	adds.w	r2, r2, #4294967295
1a000960:	f143 33ff 	adc.w	r3, r3, #4294967295
1a000964:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a000968:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00096c:	4313      	orrs	r3, r2
1a00096e:	d1f3      	bne.n	1a000958 <delayInaccurate+0x34>
}
1a000970:	b004      	add	sp, #16
1a000972:	bc30      	pop	{r4, r5}
1a000974:	4770      	bx	lr
1a000976:	bf00      	nop

1a000978 <delayInaccurateUs>:

void delayInaccurateUs(tick_t delay_us) {
1a000978:	b500      	push	{lr}
1a00097a:	b085      	sub	sp, #20
   volatile tick_t i;
   volatile tick_t delay;

   delay = (INACCURATE_TO_US_x10 * delay_us) / 10;
1a00097c:	1802      	adds	r2, r0, r0
1a00097e:	eb41 0301 	adc.w	r3, r1, r1
1a000982:	1880      	adds	r0, r0, r2
1a000984:	4159      	adcs	r1, r3
1a000986:	010b      	lsls	r3, r1, #4
1a000988:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
1a00098c:	0102      	lsls	r2, r0, #4
1a00098e:	1880      	adds	r0, r0, r2
1a000990:	4159      	adcs	r1, r3
1a000992:	008b      	lsls	r3, r1, #2
1a000994:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
1a000998:	0082      	lsls	r2, r0, #2
1a00099a:	4610      	mov	r0, r2
1a00099c:	4619      	mov	r1, r3
1a00099e:	220a      	movs	r2, #10
1a0009a0:	2300      	movs	r3, #0
1a0009a2:	f001 fced 	bl	1a002380 <__aeabi_uldivmod>
1a0009a6:	e9cd 0100 	strd	r0, r1, [sp]

   for( i=delay; i>0; i-- );
1a0009aa:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0009ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a0009b2:	e007      	b.n	1a0009c4 <delayInaccurateUs+0x4c>
1a0009b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0009b8:	f112 32ff 	adds.w	r2, r2, #4294967295
1a0009bc:	f143 33ff 	adc.w	r3, r3, #4294967295
1a0009c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a0009c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0009c8:	4313      	orrs	r3, r2
1a0009ca:	d1f3      	bne.n	1a0009b4 <delayInaccurateUs+0x3c>
}
1a0009cc:	b005      	add	sp, #20
1a0009ce:	f85d fb04 	ldr.w	pc, [sp], #4
1a0009d2:	bf00      	nop

1a0009d4 <delay>:

/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay(tick_t duration){
1a0009d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0009d8:	4680      	mov	r8, r0
1a0009da:	4689      	mov	r9, r1
    tick_t startTime = tickRead();
1a0009dc:	f000 f890 	bl	1a000b00 <tickRead>
1a0009e0:	4606      	mov	r6, r0
1a0009e2:	460f      	mov	r7, r1
    while ( (tick_t)(tickRead() - startTime) < duration/tickRateMS );
1a0009e4:	f000 f88c 	bl	1a000b00 <tickRead>
1a0009e8:	1b84      	subs	r4, r0, r6
1a0009ea:	eb61 0507 	sbc.w	r5, r1, r7
1a0009ee:	4640      	mov	r0, r8
1a0009f0:	4649      	mov	r1, r9
1a0009f2:	4b05      	ldr	r3, [pc, #20]	; (1a000a08 <delay+0x34>)
1a0009f4:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0009f8:	f001 fcc2 	bl	1a002380 <__aeabi_uldivmod>
1a0009fc:	428d      	cmp	r5, r1
1a0009fe:	bf08      	it	eq
1a000a00:	4284      	cmpeq	r4, r0
1a000a02:	d3ef      	bcc.n	1a0009e4 <delay+0x10>
 }
1a000a04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a000a08:	10000150 	.word	0x10000150

1a000a0c <delayConfig>:


/* ---- Non Blocking Delay ---- */

void delayConfig( delay_t * delay, tick_t duration ){
1a000a0c:	b510      	push	{r4, lr}
1a000a0e:	4604      	mov	r4, r0
   delay->duration = duration/tickRateMS;
1a000a10:	4610      	mov	r0, r2
1a000a12:	4619      	mov	r1, r3
1a000a14:	4b04      	ldr	r3, [pc, #16]	; (1a000a28 <delayConfig+0x1c>)
1a000a16:	e9d3 2300 	ldrd	r2, r3, [r3]
1a000a1a:	f001 fcb1 	bl	1a002380 <__aeabi_uldivmod>
1a000a1e:	e9c4 0102 	strd	r0, r1, [r4, #8]
   delay->running = 0;
1a000a22:	2300      	movs	r3, #0
1a000a24:	7423      	strb	r3, [r4, #16]
1a000a26:	bd10      	pop	{r4, pc}
1a000a28:	10000150 	.word	0x10000150

1a000a2c <delayRead>:
}

bool_t delayRead( delay_t * delay ){
1a000a2c:	b510      	push	{r4, lr}
1a000a2e:	4604      	mov	r4, r0

   bool_t timeArrived = 0;

   if( !delay->running ){
1a000a30:	7c03      	ldrb	r3, [r0, #16]
1a000a32:	b93b      	cbnz	r3, 1a000a44 <delayRead+0x18>
      delay->startTime = tickRead();
1a000a34:	f000 f864 	bl	1a000b00 <tickRead>
1a000a38:	e9c4 0100 	strd	r0, r1, [r4]
      delay->running = 1;
1a000a3c:	2301      	movs	r3, #1
1a000a3e:	7423      	strb	r3, [r4, #16]
   delay->running = 0;
}

bool_t delayRead( delay_t * delay ){

   bool_t timeArrived = 0;
1a000a40:	2000      	movs	r0, #0
1a000a42:	bd10      	pop	{r4, pc}
   if( !delay->running ){
      delay->startTime = tickRead();
      delay->running = 1;
   }
   else{
      if ( (tick_t)(tickRead() - delay->startTime) >= delay->duration ){
1a000a44:	f000 f85c 	bl	1a000b00 <tickRead>
1a000a48:	e9d4 2300 	ldrd	r2, r3, [r4]
1a000a4c:	1a80      	subs	r0, r0, r2
1a000a4e:	eb61 0103 	sbc.w	r1, r1, r3
1a000a52:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
1a000a56:	4299      	cmp	r1, r3
1a000a58:	bf08      	it	eq
1a000a5a:	4290      	cmpeq	r0, r2
1a000a5c:	d303      	bcc.n	1a000a66 <delayRead+0x3a>
         timeArrived = 1;
         delay->running = 0;
1a000a5e:	2300      	movs	r3, #0
1a000a60:	7423      	strb	r3, [r4, #16]
      delay->startTime = tickRead();
      delay->running = 1;
   }
   else{
      if ( (tick_t)(tickRead() - delay->startTime) >= delay->duration ){
         timeArrived = 1;
1a000a62:	2001      	movs	r0, #1
1a000a64:	bd10      	pop	{r4, pc}
   delay->running = 0;
}

bool_t delayRead( delay_t * delay ){

   bool_t timeArrived = 0;
1a000a66:	2000      	movs	r0, #0
         delay->running = 0;
      }
   }

   return timeArrived;
}
1a000a68:	bd10      	pop	{r4, pc}
1a000a6a:	bf00      	nop

1a000a6c <delayWrite>:

void delayWrite( delay_t * delay, tick_t duration ){
1a000a6c:	b510      	push	{r4, lr}
1a000a6e:	4604      	mov	r4, r0
   delay->duration = duration/tickRateMS;
1a000a70:	4610      	mov	r0, r2
1a000a72:	4619      	mov	r1, r3
1a000a74:	4b03      	ldr	r3, [pc, #12]	; (1a000a84 <delayWrite+0x18>)
1a000a76:	e9d3 2300 	ldrd	r2, r3, [r3]
1a000a7a:	f001 fc81 	bl	1a002380 <__aeabi_uldivmod>
1a000a7e:	e9c4 0102 	strd	r0, r1, [r4, #8]
1a000a82:	bd10      	pop	{r4, pc}
1a000a84:	10000150 	.word	0x10000150

1a000a88 <tickConfig>:

void tickerCallback(void);

/* Tick rate configuration 1 to 50 ms */
bool_t tickConfig( tick_t tickRateMSvalue, sAPI_FuncPtr_t tickHook )
{
1a000a88:	b508      	push	{r3, lr}
#ifndef TICK_OVER_RTOS
   bool_t ret_val = 1;
   tick_t tickRateHz = 0;

   if( tickHook ) {
1a000a8a:	b112      	cbz	r2, 1a000a92 <tickConfig+0xa>
1a000a8c:	4613      	mov	r3, r2
      tickHookFunction = tickHook;
1a000a8e:	4a17      	ldr	r2, [pc, #92]	; (1a000aec <tickConfig+0x64>)
1a000a90:	6013      	str	r3, [r2, #0]
   }

   if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a000a92:	f110 32ff 	adds.w	r2, r0, #4294967295
1a000a96:	f141 33ff 	adc.w	r3, r1, #4294967295
1a000a9a:	2b00      	cmp	r3, #0
1a000a9c:	bf08      	it	eq
1a000a9e:	2a32      	cmpeq	r2, #50	; 0x32
1a000aa0:	d220      	bcs.n	1a000ae4 <tickConfig+0x5c>
1a000aa2:	4602      	mov	r2, r0
1a000aa4:	460b      	mov	r3, r1

      tickRateMS = tickRateMSvalue;
1a000aa6:	4912      	ldr	r1, [pc, #72]	; (1a000af0 <tickConfig+0x68>)
1a000aa8:	e9c1 2300 	strd	r2, r3, [r1]
      tickRateHz = 1000 => 1000 ticks per second =>  1 ms tick
      tickRateHz =  200 =>  200 ticks per second =>  5 ms tick
      tickRateHz =  100 =>  100 ticks per second => 10 ms tick
      tickRateHz =   20 =>   20 ticks per second => 50 ms tick
      */
      tickRateHz = 1000 / tickRateMSvalue;
1a000aac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a000ab0:	2100      	movs	r1, #0
1a000ab2:	f001 fc65 	bl	1a002380 <__aeabi_uldivmod>
1a000ab6:	4602      	mov	r2, r0
1a000ab8:	460b      	mov	r3, r1

      /* Init SysTick interrupt, tickRateHz ticks per second */
      SysTick_Config( SystemCoreClock / tickRateHz);
1a000aba:	490e      	ldr	r1, [pc, #56]	; (1a000af4 <tickConfig+0x6c>)
1a000abc:	6808      	ldr	r0, [r1, #0]
1a000abe:	2100      	movs	r1, #0
1a000ac0:	f001 fc5e 	bl	1a002380 <__aeabi_uldivmod>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
1a000ac4:	3801      	subs	r0, #1
1a000ac6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a000aca:	d20d      	bcs.n	1a000ae8 <tickConfig+0x60>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
1a000acc:	4b0a      	ldr	r3, [pc, #40]	; (1a000af8 <tickConfig+0x70>)
1a000ace:	6058      	str	r0, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
1a000ad0:	21e0      	movs	r1, #224	; 0xe0
1a000ad2:	4a0a      	ldr	r2, [pc, #40]	; (1a000afc <tickConfig+0x74>)
1a000ad4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
1a000ad8:	2200      	movs	r2, #0
1a000ada:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a000adc:	2207      	movs	r2, #7
1a000ade:	601a      	str	r2, [r3, #0]

/* Tick rate configuration 1 to 50 ms */
bool_t tickConfig( tick_t tickRateMSvalue, sAPI_FuncPtr_t tickHook )
{
#ifndef TICK_OVER_RTOS
   bool_t ret_val = 1;
1a000ae0:	2001      	movs	r0, #1
1a000ae2:	bd08      	pop	{r3, pc}

      /* Init SysTick interrupt, tickRateHz ticks per second */
      SysTick_Config( SystemCoreClock / tickRateHz);
   } else {
      /* Error, tickRateMS variable not in range (1 <= tickRateMS <= 50) */
      ret_val = 0;
1a000ae4:	2000      	movs	r0, #0
1a000ae6:	bd08      	pop	{r3, pc}

/* Tick rate configuration 1 to 50 ms */
bool_t tickConfig( tick_t tickRateMSvalue, sAPI_FuncPtr_t tickHook )
{
#ifndef TICK_OVER_RTOS
   bool_t ret_val = 1;
1a000ae8:	2001      	movs	r0, #1
#else
#warning "Unknown RTOS. Ticker disabled"
   return 0;
#endif
#endif
}
1a000aea:	bd08      	pop	{r3, pc}
1a000aec:	10000040 	.word	0x10000040
1a000af0:	10000150 	.word	0x10000150
1a000af4:	10000158 	.word	0x10000158
1a000af8:	e000e010 	.word	0xe000e010
1a000afc:	e000ed00 	.word	0xe000ed00

1a000b00 <tickRead>:

/* Read Tick Counter */
tick_t tickRead( void )
{
   return tickCounter;
}
1a000b00:	4b01      	ldr	r3, [pc, #4]	; (1a000b08 <tickRead+0x8>)
1a000b02:	e9d3 0100 	ldrd	r0, r1, [r3]
1a000b06:	4770      	bx	lr
1a000b08:	10000148 	.word	0x10000148

1a000b0c <tickWrite>:


/* Write Tick Counter */
void tickWrite( tick_t ticks )
{
   tickCounter = ticks;
1a000b0c:	4b01      	ldr	r3, [pc, #4]	; (1a000b14 <tickWrite+0x8>)
1a000b0e:	e9c3 0100 	strd	r0, r1, [r3]
1a000b12:	4770      	bx	lr
1a000b14:	10000148 	.word	0x10000148

1a000b18 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

/* SysTick Timer ISR Handler */
void tickerCallback(void)
{
1a000b18:	b508      	push	{r3, lr}
   tickCounter++;
1a000b1a:	4906      	ldr	r1, [pc, #24]	; (1a000b34 <SysTick_Handler+0x1c>)
1a000b1c:	e9d1 2300 	ldrd	r2, r3, [r1]
1a000b20:	3201      	adds	r2, #1
1a000b22:	f143 0300 	adc.w	r3, r3, #0
1a000b26:	e9c1 2300 	strd	r2, r3, [r1]

   /* Execute Tick Hook function */
   (* tickHookFunction )( 0 );
1a000b2a:	4b03      	ldr	r3, [pc, #12]	; (1a000b38 <SysTick_Handler+0x20>)
1a000b2c:	681b      	ldr	r3, [r3, #0]
1a000b2e:	2000      	movs	r0, #0
1a000b30:	4798      	blx	r3
1a000b32:	bd08      	pop	{r3, pc}
1a000b34:	10000148 	.word	0x10000148
1a000b38:	10000040 	.word	0x10000040

1a000b3c <boardConfig>:
/*==================[internal functions definition]==========================*/

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardConfig(void) {
1a000b3c:	b508      	push	{r3, lr}

   /* Read clock settings and update SystemCoreClock variable */
   SystemCoreClockUpdate();
1a000b3e:	f000 fe31 	bl	1a0017a4 <SystemCoreClockUpdate>

   Board_Init(); // From Board module (modules/lpc4337_m4/board)
1a000b42:	f000 fa65 	bl	1a001010 <Board_Init>

   /* Inicializar el conteo de Ticks con resolución de 1ms, sin tickHook */
   tickConfig( 1, 0 );
1a000b46:	2001      	movs	r0, #1
1a000b48:	2100      	movs	r1, #0
1a000b4a:	2200      	movs	r2, #0
1a000b4c:	f7ff ff9c 	bl	1a000a88 <tickConfig>

   /* Inicializar GPIOs */
   gpioConfig( 0, GPIO_ENABLE );
1a000b50:	2000      	movs	r0, #0
1a000b52:	2105      	movs	r1, #5
1a000b54:	f000 f880 	bl	1a000c58 <gpioConfig>

   /* Configuración de pines de entrada para Teclas de la EDU-CIAA-NXP */
   gpioConfig( TEC1, GPIO_INPUT );
1a000b58:	2024      	movs	r0, #36	; 0x24
1a000b5a:	2100      	movs	r1, #0
1a000b5c:	f000 f87c 	bl	1a000c58 <gpioConfig>
   gpioConfig( TEC2, GPIO_INPUT );
1a000b60:	2025      	movs	r0, #37	; 0x25
1a000b62:	2100      	movs	r1, #0
1a000b64:	f000 f878 	bl	1a000c58 <gpioConfig>
   gpioConfig( TEC3, GPIO_INPUT );
1a000b68:	2026      	movs	r0, #38	; 0x26
1a000b6a:	2100      	movs	r1, #0
1a000b6c:	f000 f874 	bl	1a000c58 <gpioConfig>
   gpioConfig( TEC4, GPIO_INPUT );
1a000b70:	2027      	movs	r0, #39	; 0x27
1a000b72:	2100      	movs	r1, #0
1a000b74:	f000 f870 	bl	1a000c58 <gpioConfig>

   /* Configuración de pines de salida para Leds de la EDU-CIAA-NXP */
   gpioConfig( LEDR, GPIO_OUTPUT );
1a000b78:	2028      	movs	r0, #40	; 0x28
1a000b7a:	2101      	movs	r1, #1
1a000b7c:	f000 f86c 	bl	1a000c58 <gpioConfig>
   gpioConfig( LEDG, GPIO_OUTPUT );
1a000b80:	2029      	movs	r0, #41	; 0x29
1a000b82:	2101      	movs	r1, #1
1a000b84:	f000 f868 	bl	1a000c58 <gpioConfig>
   gpioConfig( LEDB, GPIO_OUTPUT );
1a000b88:	202a      	movs	r0, #42	; 0x2a
1a000b8a:	2101      	movs	r1, #1
1a000b8c:	f000 f864 	bl	1a000c58 <gpioConfig>
   gpioConfig( LED1, GPIO_OUTPUT );
1a000b90:	202b      	movs	r0, #43	; 0x2b
1a000b92:	2101      	movs	r1, #1
1a000b94:	f000 f860 	bl	1a000c58 <gpioConfig>
   gpioConfig( LED2, GPIO_OUTPUT );
1a000b98:	202c      	movs	r0, #44	; 0x2c
1a000b9a:	2101      	movs	r1, #1
1a000b9c:	f000 f85c 	bl	1a000c58 <gpioConfig>
   gpioConfig( LED3, GPIO_OUTPUT );
1a000ba0:	202d      	movs	r0, #45	; 0x2d
1a000ba2:	2101      	movs	r1, #1
1a000ba4:	f000 f858 	bl	1a000c58 <gpioConfig>


   /* Configuración de pines de entrada de la CIAA-NXP */
   gpioConfig( DI0, GPIO_INPUT );
1a000ba8:	202e      	movs	r0, #46	; 0x2e
1a000baa:	2100      	movs	r1, #0
1a000bac:	f000 f854 	bl	1a000c58 <gpioConfig>
   gpioConfig( DI1, GPIO_INPUT );
1a000bb0:	202f      	movs	r0, #47	; 0x2f
1a000bb2:	2100      	movs	r1, #0
1a000bb4:	f000 f850 	bl	1a000c58 <gpioConfig>
   gpioConfig( DI2, GPIO_INPUT );
1a000bb8:	2030      	movs	r0, #48	; 0x30
1a000bba:	2100      	movs	r1, #0
1a000bbc:	f000 f84c 	bl	1a000c58 <gpioConfig>
   gpioConfig( DI3, GPIO_INPUT );
1a000bc0:	2031      	movs	r0, #49	; 0x31
1a000bc2:	2100      	movs	r1, #0
1a000bc4:	f000 f848 	bl	1a000c58 <gpioConfig>
   gpioConfig( DI4, GPIO_INPUT );
1a000bc8:	2032      	movs	r0, #50	; 0x32
1a000bca:	2100      	movs	r1, #0
1a000bcc:	f000 f844 	bl	1a000c58 <gpioConfig>
   gpioConfig( DI5, GPIO_INPUT );
1a000bd0:	2033      	movs	r0, #51	; 0x33
1a000bd2:	2100      	movs	r1, #0
1a000bd4:	f000 f840 	bl	1a000c58 <gpioConfig>
   gpioConfig( DI6, GPIO_INPUT );
1a000bd8:	2034      	movs	r0, #52	; 0x34
1a000bda:	2100      	movs	r1, #0
1a000bdc:	f000 f83c 	bl	1a000c58 <gpioConfig>
   gpioConfig( DI7, GPIO_INPUT );
1a000be0:	2035      	movs	r0, #53	; 0x35
1a000be2:	2100      	movs	r1, #0
1a000be4:	f000 f838 	bl	1a000c58 <gpioConfig>

   /* Configuración de pines de salida de la CIAA-NXP */
   gpioConfig( DO0, GPIO_OUTPUT );
1a000be8:	2036      	movs	r0, #54	; 0x36
1a000bea:	2101      	movs	r1, #1
1a000bec:	f000 f834 	bl	1a000c58 <gpioConfig>
   gpioConfig( DO1, GPIO_OUTPUT );
1a000bf0:	2037      	movs	r0, #55	; 0x37
1a000bf2:	2101      	movs	r1, #1
1a000bf4:	f000 f830 	bl	1a000c58 <gpioConfig>
   gpioConfig( DO2, GPIO_OUTPUT );
1a000bf8:	2038      	movs	r0, #56	; 0x38
1a000bfa:	2101      	movs	r1, #1
1a000bfc:	f000 f82c 	bl	1a000c58 <gpioConfig>
   gpioConfig( DO3, GPIO_OUTPUT );
1a000c00:	2039      	movs	r0, #57	; 0x39
1a000c02:	2101      	movs	r1, #1
1a000c04:	f000 f828 	bl	1a000c58 <gpioConfig>
   gpioConfig( DO4, GPIO_OUTPUT );
1a000c08:	203a      	movs	r0, #58	; 0x3a
1a000c0a:	2101      	movs	r1, #1
1a000c0c:	f000 f824 	bl	1a000c58 <gpioConfig>
   gpioConfig( DO5, GPIO_OUTPUT );
1a000c10:	203b      	movs	r0, #59	; 0x3b
1a000c12:	2101      	movs	r1, #1
1a000c14:	f000 f820 	bl	1a000c58 <gpioConfig>
   gpioConfig( DO6, GPIO_OUTPUT );
1a000c18:	203c      	movs	r0, #60	; 0x3c
1a000c1a:	2101      	movs	r1, #1
1a000c1c:	f000 f81c 	bl	1a000c58 <gpioConfig>
   gpioConfig( DO7, GPIO_OUTPUT );
1a000c20:	203d      	movs	r0, #61	; 0x3d
1a000c22:	2101      	movs	r1, #1
1a000c24:	f000 f818 	bl	1a000c58 <gpioConfig>
1a000c28:	bd08      	pop	{r3, pc}
1a000c2a:	bf00      	nop

1a000c2c <gpioObtainPinConfig>:
/*==================[internal functions definition]==========================*/

static void gpioObtainPinConfig( gpioMap_t pin,
                                int8_t *pinNamePort, int8_t *pinNamePin,
																int8_t *func, int8_t *gpioPort,
																int8_t *gpioPin ){
1a000c2c:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsConfig[pin].pinName.port;
1a000c2e:	4d09      	ldr	r5, [pc, #36]	; (1a000c54 <gpioObtainPinConfig+0x28>)
1a000c30:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a000c34:	182c      	adds	r4, r5, r0
1a000c36:	5c28      	ldrb	r0, [r5, r0]
1a000c38:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsConfig[pin].pinName.pin;
1a000c3a:	7861      	ldrb	r1, [r4, #1]
1a000c3c:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsConfig[pin].func;
1a000c3e:	78a2      	ldrb	r2, [r4, #2]
1a000c40:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsConfig[pin].gpio.port;
1a000c42:	78e2      	ldrb	r2, [r4, #3]
1a000c44:	9b02      	ldr	r3, [sp, #8]
1a000c46:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsConfig[pin].gpio.pin;
1a000c48:	7922      	ldrb	r2, [r4, #4]
1a000c4a:	9b03      	ldr	r3, [sp, #12]
1a000c4c:	701a      	strb	r2, [r3, #0]
}
1a000c4e:	bc30      	pop	{r4, r5}
1a000c50:	4770      	bx	lr
1a000c52:	bf00      	nop
1a000c54:	1a002974 	.word	0x1a002974

1a000c58 <gpioConfig>:

/*==================[external functions definition]==========================*/

bool_t gpioConfig( gpioMap_t pin, gpioConfig_t config ){
1a000c58:	b570      	push	{r4, r5, r6, lr}
1a000c5a:	b084      	sub	sp, #16
1a000c5c:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a000c5e:	2300      	movs	r3, #0
1a000c60:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a000c64:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a000c68:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a000c6c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a000c70:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinConfig( pin, &pinNamePort, &pinNamePin, &func,
1a000c74:	ab03      	add	r3, sp, #12
1a000c76:	9300      	str	r3, [sp, #0]
1a000c78:	f10d 030b 	add.w	r3, sp, #11
1a000c7c:	9301      	str	r3, [sp, #4]
1a000c7e:	f10d 010f 	add.w	r1, sp, #15
1a000c82:	f10d 020e 	add.w	r2, sp, #14
1a000c86:	f10d 030d 	add.w	r3, sp, #13
1a000c8a:	f7ff ffcf 	bl	1a000c2c <gpioObtainPinConfig>
                           &gpioPort, &gpioPin );

   switch(config){
1a000c8e:	2c05      	cmp	r4, #5
1a000c90:	f200 80a8 	bhi.w	1a000de4 <gpioConfig+0x18c>
1a000c94:	e8df f004 	tbb	[pc, r4]
1a000c98:	46278408 	.word	0x46278408
1a000c9c:	0365      	.short	0x0365

      case GPIO_ENABLE:
		   /* Initializes GPIO */
		   Chip_GPIO_Init(LPC_GPIO_PORT);
1a000c9e:	4853      	ldr	r0, [pc, #332]	; (1a000dec <gpioConfig+0x194>)
1a000ca0:	f001 fb2c 	bl	1a0022fc <Chip_GPIO_Init>

/*==================[external functions definition]==========================*/

bool_t gpioConfig( gpioMap_t pin, gpioConfig_t config ){

   bool_t ret_val     = 1;
1a000ca4:	2001      	movs	r0, #1
   switch(config){

      case GPIO_ENABLE:
		   /* Initializes GPIO */
		   Chip_GPIO_Init(LPC_GPIO_PORT);
	   break;
1a000ca6:	e09e      	b.n	1a000de6 <gpioConfig+0x18e>

      case GPIO_INPUT:
         Chip_SCU_PinMux(
1a000ca8:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000cac:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a000cb0:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a000cb4:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000cb8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000cbc:	494c      	ldr	r1, [pc, #304]	; (1a000df0 <gpioConfig+0x198>)
1a000cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            pinNamePort,
            pinNamePin,
            SCU_MODE_INACT | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
            func
         );
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a000cc2:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a000cc6:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a000cca:	2001      	movs	r0, #1
1a000ccc:	fa00 f402 	lsl.w	r4, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a000cd0:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a000cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a000cd8:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a000cdc:	ea22 0204 	bic.w	r2, r2, r4
1a000ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a000ce4:	e07f      	b.n	1a000de6 <gpioConfig+0x18e>
      break;

      case GPIO_INPUT_PULLUP:
         Chip_SCU_PinMux(
1a000ce6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000cea:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a000cee:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a000cf2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000cf6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000cfa:	493d      	ldr	r1, [pc, #244]	; (1a000df0 <gpioConfig+0x198>)
1a000cfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            pinNamePort,
            pinNamePin,
            SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
            func
         );
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a000d00:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a000d04:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a000d08:	2001      	movs	r0, #1
1a000d0a:	fa00 f402 	lsl.w	r4, r0, r2
1a000d0e:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a000d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a000d16:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a000d1a:	ea22 0204 	bic.w	r2, r2, r4
1a000d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a000d22:	e060      	b.n	1a000de6 <gpioConfig+0x18e>
      break;

      case GPIO_INPUT_PULLDOWN:
         Chip_SCU_PinMux(
1a000d24:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000d28:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a000d2c:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a000d30:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000d34:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000d38:	492d      	ldr	r1, [pc, #180]	; (1a000df0 <gpioConfig+0x198>)
1a000d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            pinNamePort,
            pinNamePin,
            SCU_MODE_PULLDOWN | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
            func
         );
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a000d3e:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a000d42:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a000d46:	2001      	movs	r0, #1
1a000d48:	fa00 f402 	lsl.w	r4, r0, r2
1a000d4c:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a000d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a000d54:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a000d58:	ea22 0204 	bic.w	r2, r2, r4
1a000d5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a000d60:	e041      	b.n	1a000de6 <gpioConfig+0x18e>
      break;
      case GPIO_INPUT_PULLUP_PULLDOWN:
         Chip_SCU_PinMux(
1a000d62:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000d66:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a000d6a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a000d6e:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000d72:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000d76:	491e      	ldr	r1, [pc, #120]	; (1a000df0 <gpioConfig+0x198>)
1a000d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            pinNamePort,
            pinNamePin,
            SCU_MODE_REPEATER | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
            func
         );
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a000d7c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a000d80:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a000d84:	2001      	movs	r0, #1
1a000d86:	fa00 f402 	lsl.w	r4, r0, r2
1a000d8a:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a000d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a000d92:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a000d96:	ea22 0204 	bic.w	r2, r2, r4
1a000d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a000d9e:	e022      	b.n	1a000de6 <gpioConfig+0x18e>
      break;

      case GPIO_OUTPUT:
         Chip_SCU_PinMux(
1a000da0:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000da4:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a000da8:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a000dac:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000db0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000db4:	490e      	ldr	r1, [pc, #56]	; (1a000df0 <gpioConfig+0x198>)
1a000db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            pinNamePort,
            pinNamePin,
            SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_INBUFF_EN,
            func
         );
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a000dba:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a000dbe:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a000dc2:	b25a      	sxtb	r2, r3
1a000dc4:	2001      	movs	r0, #1
1a000dc6:	fa00 f602 	lsl.w	r6, r0, r2
 * Chip_GPIO_SetPortDIR() function instead.
 */
STATIC INLINE void Chip_GPIO_SetDir(LPC_GPIO_T *pGPIO, uint8_t portNum, uint32_t bitValue, uint8_t out)
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
1a000dca:	4a08      	ldr	r2, [pc, #32]	; (1a000dec <gpioConfig+0x194>)
1a000dcc:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a000dd0:	f852 1025 	ldr.w	r1, [r2, r5, lsl #2]
1a000dd4:	4331      	orrs	r1, r6
1a000dd6:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO->B[port][pin] = setting;
1a000dda:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a000dde:	2100      	movs	r1, #0
1a000de0:	54d1      	strb	r1, [r2, r3]
1a000de2:	e000      	b.n	1a000de6 <gpioConfig+0x18e>
         Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
      break;

      default:
         ret_val = 0;
1a000de4:	2000      	movs	r0, #0
      break;
   }

   return ret_val;

}
1a000de6:	b004      	add	sp, #16
1a000de8:	bd70      	pop	{r4, r5, r6, pc}
1a000dea:	bf00      	nop
1a000dec:	400f4000 	.word	0x400f4000
1a000df0:	40086000 	.word	0x40086000

1a000df4 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value ){
1a000df4:	b510      	push	{r4, lr}
1a000df6:	b084      	sub	sp, #16
1a000df8:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a000dfa:	2300      	movs	r3, #0
1a000dfc:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a000e00:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a000e04:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a000e08:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a000e0c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinConfig( pin, &pinNamePort, &pinNamePin, &func,
1a000e10:	ab03      	add	r3, sp, #12
1a000e12:	9300      	str	r3, [sp, #0]
1a000e14:	f10d 030b 	add.w	r3, sp, #11
1a000e18:	9301      	str	r3, [sp, #4]
1a000e1a:	f10d 010f 	add.w	r1, sp, #15
1a000e1e:	f10d 020e 	add.w	r2, sp, #14
1a000e22:	f10d 030d 	add.w	r3, sp, #13
1a000e26:	f7ff ff01 	bl	1a000c2c <gpioObtainPinConfig>
                           &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a000e2a:	f89d 200c 	ldrb.w	r2, [sp, #12]
1a000e2e:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a000e32:	3400      	adds	r4, #0
1a000e34:	bf18      	it	ne
1a000e36:	2401      	movne	r4, #1
1a000e38:	eb03 1342 	add.w	r3, r3, r2, lsl #5
1a000e3c:	4a02      	ldr	r2, [pc, #8]	; (1a000e48 <gpioWrite+0x54>)
1a000e3e:	54d4      	strb	r4, [r2, r3]

   return ret_val;
}
1a000e40:	2001      	movs	r0, #1
1a000e42:	b004      	add	sp, #16
1a000e44:	bd10      	pop	{r4, pc}
1a000e46:	bf00      	nop
1a000e48:	400f4000 	.word	0x400f4000

1a000e4c <gpioRead>:

   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin ){
1a000e4c:	b500      	push	{lr}
1a000e4e:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a000e50:	2300      	movs	r3, #0
1a000e52:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a000e56:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a000e5a:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a000e5e:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a000e62:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinConfig( pin, &pinNamePort, &pinNamePin, &func,
1a000e66:	ab03      	add	r3, sp, #12
1a000e68:	9300      	str	r3, [sp, #0]
1a000e6a:	f10d 030b 	add.w	r3, sp, #11
1a000e6e:	9301      	str	r3, [sp, #4]
1a000e70:	f10d 010f 	add.w	r1, sp, #15
1a000e74:	f10d 020e 	add.w	r2, sp, #14
1a000e78:	f10d 030d 	add.w	r3, sp, #13
1a000e7c:	f7ff fed6 	bl	1a000c2c <gpioObtainPinConfig>
                           &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a000e80:	f99d 200c 	ldrsb.w	r2, [sp, #12]
1a000e84:	f89d 300b 	ldrb.w	r3, [sp, #11]
 * @return	true of the GPIO is high, false if low
 * @note	It is recommended to use the Chip_GPIO_GetPinState() function instead.
 */
STATIC INLINE bool Chip_GPIO_ReadPortBit(LPC_GPIO_T *pGPIO, uint32_t port, uint8_t pin)
{
	return (bool) pGPIO->B[port][pin];
1a000e88:	eb03 1342 	add.w	r3, r3, r2, lsl #5
1a000e8c:	4a04      	ldr	r2, [pc, #16]	; (1a000ea0 <gpioRead+0x54>)
1a000e8e:	5cd3      	ldrb	r3, [r2, r3]
1a000e90:	f013 0fff 	tst.w	r3, #255	; 0xff

   return ret_val;
}
1a000e94:	bf14      	ite	ne
1a000e96:	2001      	movne	r0, #1
1a000e98:	2000      	moveq	r0, #0
1a000e9a:	b005      	add	sp, #20
1a000e9c:	f85d fb04 	ldr.w	pc, [sp], #4
1a000ea0:	400f4000 	.word	0x400f4000

1a000ea4 <gpioToggle>:

   return ret_val;
}


bool_t gpioToggle( gpioMap_t pin ){
1a000ea4:	b510      	push	{r4, lr}
1a000ea6:	4604      	mov	r4, r0

   return gpioWrite( pin, !gpioRead(pin) );
1a000ea8:	f7ff ffd0 	bl	1a000e4c <gpioRead>
1a000eac:	fab0 f180 	clz	r1, r0
1a000eb0:	0949      	lsrs	r1, r1, #5
1a000eb2:	4620      	mov	r0, r4
1a000eb4:	f7ff ff9e 	bl	1a000df4 <gpioWrite>
}
1a000eb8:	bd10      	pop	{r4, pc}
1a000eba:	bf00      	nop

1a000ebc <Board_LED_Init>:
   }
#endif
}

static void Board_LED_Init()
{
1a000ebc:	b470      	push	{r4, r5, r6}
   uint32_t idx;

   for (idx = 0; idx < (sizeof(gpioLEDBits) / sizeof(io_port_t)); ++idx) {
1a000ebe:	2200      	movs	r2, #0
1a000ec0:	e014      	b.n	1a000eec <Board_LED_Init+0x30>
       /* Set pin direction and init to off */
       Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, gpioLEDBits[idx].port, gpioLEDBits[idx].pin);
1a000ec2:	4b0c      	ldr	r3, [pc, #48]	; (1a000ef4 <Board_LED_Init+0x38>)
1a000ec4:	f813 4012 	ldrb.w	r4, [r3, r2, lsl #1]
1a000ec8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
1a000ecc:	7859      	ldrb	r1, [r3, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a000ece:	480a      	ldr	r0, [pc, #40]	; (1a000ef8 <Board_LED_Init+0x3c>)
1a000ed0:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a000ed4:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
1a000ed8:	2301      	movs	r3, #1
1a000eda:	408b      	lsls	r3, r1
1a000edc:	4333      	orrs	r3, r6
1a000ede:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO->B[port][pin] = setting;
1a000ee2:	eb01 1144 	add.w	r1, r1, r4, lsl #5
1a000ee6:	2300      	movs	r3, #0
1a000ee8:	5443      	strb	r3, [r0, r1]

static void Board_LED_Init()
{
   uint32_t idx;

   for (idx = 0; idx < (sizeof(gpioLEDBits) / sizeof(io_port_t)); ++idx) {
1a000eea:	3201      	adds	r2, #1
1a000eec:	2a05      	cmp	r2, #5
1a000eee:	d9e8      	bls.n	1a000ec2 <Board_LED_Init+0x6>
       /* Set pin direction and init to off */
       Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, gpioLEDBits[idx].port, gpioLEDBits[idx].pin);
       Chip_GPIO_SetPinState(LPC_GPIO_PORT, gpioLEDBits[idx].port, gpioLEDBits[idx].pin, (bool) false);
   }
}
1a000ef0:	bc70      	pop	{r4, r5, r6}
1a000ef2:	4770      	bx	lr
1a000ef4:	1a002aac 	.word	0x1a002aac
1a000ef8:	400f4000 	.word	0x400f4000

1a000efc <Board_UART_Init>:
1a000efc:	4b03      	ldr	r3, [pc, #12]	; (1a000f0c <Board_UART_Init+0x10>)
1a000efe:	2212      	movs	r2, #18
1a000f00:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
1a000f04:	22d1      	movs	r2, #209	; 0xd1
1a000f06:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
1a000f0a:	4770      	bx	lr
1a000f0c:	40086000 	.word	0x40086000

1a000f10 <Board_Debug_Init>:
   Chip_SCU_PinMuxSet(0x2, 1, (SCU_MODE_INACT | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS | SCU_MODE_FUNC1));/* P2.1 : UART0_RXD */
}

/* Initialize debug output via UART for board */
void Board_Debug_Init(void)
{
1a000f10:	b510      	push	{r4, lr}
#if defined(DEBUG_UART)
   Board_UART_Init(DEBUG_UART);
1a000f12:	4c08      	ldr	r4, [pc, #32]	; (1a000f34 <Board_Debug_Init+0x24>)
1a000f14:	4620      	mov	r0, r4
1a000f16:	f7ff fff1 	bl	1a000efc <Board_UART_Init>

   Chip_UART_Init(DEBUG_UART);
1a000f1a:	4620      	mov	r0, r4
1a000f1c:	f000 f974 	bl	1a001208 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, 115200);
1a000f20:	4620      	mov	r0, r4
1a000f22:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000f26:	f000 fa8d 	bl	1a001444 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a000f2a:	2303      	movs	r3, #3
1a000f2c:	60e3      	str	r3, [r4, #12]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
    pUART->TER2 = UART_TER2_TXEN;
1a000f2e:	2301      	movs	r3, #1
1a000f30:	65e3      	str	r3, [r4, #92]	; 0x5c
1a000f32:	bd10      	pop	{r4, pc}
1a000f34:	400c1000 	.word	0x400c1000

1a000f38 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a000f38:	4b03      	ldr	r3, [pc, #12]	; (1a000f48 <Board_UARTPutChar+0x10>)
1a000f3a:	695b      	ldr	r3, [r3, #20]
/* Sends a character on the UART */
void Board_UARTPutChar(char ch)
{
#if defined(DEBUG_UART)
   /* Wait for space in FIFO */
   while ((Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE) == 0) {}
1a000f3c:	f013 0f20 	tst.w	r3, #32
1a000f40:	d0fa      	beq.n	1a000f38 <Board_UARTPutChar>
 * @note	This function attempts to place a byte into the UART transmit
 *			FIFO or transmit hold register regard regardless of UART state
 */
STATIC INLINE void Chip_UART_SendByte(LPC_USART_T *pUART, uint8_t data)
{
	pUART->THR = (uint32_t) data;
1a000f42:	4b01      	ldr	r3, [pc, #4]	; (1a000f48 <Board_UARTPutChar+0x10>)
1a000f44:	6018      	str	r0, [r3, #0]
1a000f46:	4770      	bx	lr
1a000f48:	400c1000 	.word	0x400c1000

1a000f4c <Board_UARTGetChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a000f4c:	4b05      	ldr	r3, [pc, #20]	; (1a000f64 <Board_UARTGetChar+0x18>)
1a000f4e:	695b      	ldr	r3, [r3, #20]

/* Gets a character from the UART, returns EOF if no character is ready */
int Board_UARTGetChar(void)
{
#if defined(DEBUG_UART)
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a000f50:	f013 0f01 	tst.w	r3, #1
1a000f54:	d003      	beq.n	1a000f5e <Board_UARTGetChar+0x12>
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a000f56:	4b03      	ldr	r3, [pc, #12]	; (1a000f64 <Board_UARTGetChar+0x18>)
1a000f58:	6818      	ldr	r0, [r3, #0]
1a000f5a:	b2c0      	uxtb	r0, r0
       return (int) Chip_UART_ReadByte(DEBUG_UART);
1a000f5c:	4770      	bx	lr
   }
#endif
   return EOF;
1a000f5e:	f04f 30ff 	mov.w	r0, #4294967295
}
1a000f62:	4770      	bx	lr
1a000f64:	400c1000 	.word	0x400c1000

1a000f68 <Board_UARTPutSTR>:

/* Outputs a string on the debug UART */
void Board_UARTPutSTR(const char *str)
{
1a000f68:	b510      	push	{r4, lr}
1a000f6a:	4604      	mov	r4, r0
#if defined(DEBUG_UART)
   while (*str != '\0') {
1a000f6c:	e002      	b.n	1a000f74 <Board_UARTPutSTR+0xc>
       Board_UARTPutChar(*str++);
1a000f6e:	3401      	adds	r4, #1
1a000f70:	f7ff ffe2 	bl	1a000f38 <Board_UARTPutChar>

/* Outputs a string on the debug UART */
void Board_UARTPutSTR(const char *str)
{
#if defined(DEBUG_UART)
   while (*str != '\0') {
1a000f74:	7820      	ldrb	r0, [r4, #0]
1a000f76:	2800      	cmp	r0, #0
1a000f78:	d1f9      	bne.n	1a000f6e <Board_UARTPutSTR+0x6>
       Board_UARTPutChar(*str++);
   }
#endif
}
1a000f7a:	bd10      	pop	{r4, pc}

1a000f7c <Board_LED_Set>:
   }
}

void Board_LED_Set(uint8_t LEDNumber, bool On)
{
   if (LEDNumber < (sizeof(gpioLEDBits) / sizeof(io_port_t)))
1a000f7c:	2805      	cmp	r0, #5
1a000f7e:	d80b      	bhi.n	1a000f98 <Board_LED_Set+0x1c>
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, gpioLEDBits[LEDNumber].port, gpioLEDBits[LEDNumber].pin, (bool) !On);
1a000f80:	4b06      	ldr	r3, [pc, #24]	; (1a000f9c <Board_LED_Set+0x20>)
1a000f82:	f813 2010 	ldrb.w	r2, [r3, r0, lsl #1]
1a000f86:	eb03 0040 	add.w	r0, r3, r0, lsl #1
1a000f8a:	7843      	ldrb	r3, [r0, #1]
1a000f8c:	f081 0101 	eor.w	r1, r1, #1
1a000f90:	eb03 1342 	add.w	r3, r3, r2, lsl #5
1a000f94:	4a02      	ldr	r2, [pc, #8]	; (1a000fa0 <Board_LED_Set+0x24>)
1a000f96:	54d1      	strb	r1, [r2, r3]
1a000f98:	4770      	bx	lr
1a000f9a:	bf00      	nop
1a000f9c:	1a002aac 	.word	0x1a002aac
1a000fa0:	400f4000 	.word	0x400f4000

1a000fa4 <Board_LED_Test>:
}

bool Board_LED_Test(uint8_t LEDNumber)
{
   if (LEDNumber < (sizeof(gpioLEDBits) / sizeof(io_port_t)))
1a000fa4:	2805      	cmp	r0, #5
1a000fa6:	d80f      	bhi.n	1a000fc8 <Board_LED_Test+0x24>
       return (bool) !Chip_GPIO_GetPinState(LPC_GPIO_PORT, gpioLEDBits[LEDNumber].port, gpioLEDBits[LEDNumber].pin);
1a000fa8:	4b08      	ldr	r3, [pc, #32]	; (1a000fcc <Board_LED_Test+0x28>)
1a000faa:	f813 2010 	ldrb.w	r2, [r3, r0, lsl #1]
1a000fae:	eb03 0040 	add.w	r0, r3, r0, lsl #1
1a000fb2:	7843      	ldrb	r3, [r0, #1]
 * @return	true if the GPIO is high, false if low
 * @note	This function replaces Chip_GPIO_ReadPortBit()
 */
STATIC INLINE bool Chip_GPIO_GetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	return (bool) pGPIO->B[port][pin];
1a000fb4:	eb03 1342 	add.w	r3, r3, r2, lsl #5
1a000fb8:	4a05      	ldr	r2, [pc, #20]	; (1a000fd0 <Board_LED_Test+0x2c>)
1a000fba:	5cd3      	ldrb	r3, [r2, r3]
1a000fbc:	f013 0fff 	tst.w	r3, #255	; 0xff
1a000fc0:	bf0c      	ite	eq
1a000fc2:	2001      	moveq	r0, #1
1a000fc4:	2000      	movne	r0, #0
1a000fc6:	4770      	bx	lr

   return false;
1a000fc8:	2000      	movs	r0, #0
}
1a000fca:	4770      	bx	lr
1a000fcc:	1a002aac 	.word	0x1a002aac
1a000fd0:	400f4000 	.word	0x400f4000

1a000fd4 <Board_LED_Toggle>:

void Board_LED_Toggle(uint8_t LEDNumber)
{
1a000fd4:	b510      	push	{r4, lr}
1a000fd6:	4604      	mov	r4, r0
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
1a000fd8:	f7ff ffe4 	bl	1a000fa4 <Board_LED_Test>
1a000fdc:	f080 0101 	eor.w	r1, r0, #1
1a000fe0:	4620      	mov	r0, r4
1a000fe2:	b2c9      	uxtb	r1, r1
1a000fe4:	f7ff ffca 	bl	1a000f7c <Board_LED_Set>
1a000fe8:	bd10      	pop	{r4, pc}
1a000fea:	bf00      	nop

1a000fec <Board_ENET_GetMacADDR>:
}

/* Returns the MAC address assigned to this board */
void Board_ENET_GetMacADDR(uint8_t *mcaddr)
{
1a000fec:	b082      	sub	sp, #8
1a000fee:	4602      	mov	r2, r0
   uint8_t boardmac[] = {0x00, 0x60, 0x37, 0x12, 0x34, 0x56};
1a000ff0:	4b06      	ldr	r3, [pc, #24]	; (1a00100c <Board_ENET_GetMacADDR+0x20>)
1a000ff2:	f853 0f0c 	ldr.w	r0, [r3, #12]!
1a000ff6:	9000      	str	r0, [sp, #0]
1a000ff8:	889b      	ldrh	r3, [r3, #4]
1a000ffa:	f8ad 3004 	strh.w	r3, [sp, #4]

   memcpy(mcaddr, boardmac, 6);
1a000ffe:	9800      	ldr	r0, [sp, #0]
1a001000:	6010      	str	r0, [r2, #0]
1a001002:	f8bd 3004 	ldrh.w	r3, [sp, #4]
1a001006:	8093      	strh	r3, [r2, #4]
}
1a001008:	b002      	add	sp, #8
1a00100a:	4770      	bx	lr
1a00100c:	1a002aac 	.word	0x1a002aac

1a001010 <Board_Init>:

/* Set up and initialize all required blocks and functions related to the
   board hardware */
void Board_Init(void)
{
1a001010:	b508      	push	{r3, lr}
   /* Sets up DEBUG UART */
   DEBUGINIT();
1a001012:	f7ff ff7d 	bl	1a000f10 <Board_Debug_Init>

   /* Initializes GPIO */
   Chip_GPIO_Init(LPC_GPIO_PORT);
1a001016:	4806      	ldr	r0, [pc, #24]	; (1a001030 <Board_Init+0x20>)
1a001018:	f001 f970 	bl	1a0022fc <Chip_GPIO_Init>

   /* Initialize LEDs */
   Board_LED_Init();
1a00101c:	f7ff ff4e 	bl	1a000ebc <Board_LED_Init>
 * RMII PHY, and must be called before calling any Ethernet
 * functions.
 */
STATIC INLINE void Chip_ENET_RMIIEnable(LPC_ENET_T *pENET)
{
	LPC_CREG->CREG6 |= 0x4;
1a001020:	4a04      	ldr	r2, [pc, #16]	; (1a001034 <Board_Init+0x24>)
1a001022:	f8d2 312c 	ldr.w	r3, [r2, #300]	; 0x12c
1a001026:	f043 0304 	orr.w	r3, r3, #4
1a00102a:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
1a00102e:	bd08      	pop	{r3, pc}
1a001030:	400f4000 	.word	0x400f4000
1a001034:	40043000 	.word	0x40043000

1a001038 <Board_I2C_Init>:
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
}

void Board_I2C_Init(I2C_ID_T id)
{
   if (id == I2C1) {
1a001038:	2801      	cmp	r0, #1
1a00103a:	d106      	bne.n	1a00104a <Board_I2C_Init+0x12>
1a00103c:	4b06      	ldr	r3, [pc, #24]	; (1a001058 <Board_I2C_Init+0x20>)
1a00103e:	22c1      	movs	r2, #193	; 0xc1
1a001040:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
1a001044:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
1a001048:	4770      	bx	lr
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a00104a:	f640 0208 	movw	r2, #2056	; 0x808
1a00104e:	4b02      	ldr	r3, [pc, #8]	; (1a001058 <Board_I2C_Init+0x20>)
1a001050:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
1a001054:	4770      	bx	lr
1a001056:	bf00      	nop
1a001058:	40086000 	.word	0x40086000

1a00105c <Board_SDMMC_Init>:
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00105c:	4b09      	ldr	r3, [pc, #36]	; (1a001084 <Board_SDMMC_Init+0x28>)
1a00105e:	22e7      	movs	r2, #231	; 0xe7
1a001060:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
1a001064:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
1a001068:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
1a00106c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 * @param	modefunc	: OR'ed values or type SCU_MODE_*
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_ClockPinMuxSet(uint8_t clknum, uint16_t modefunc)
{
	LPC_SCU->SFSCLK[clknum] = (uint32_t) modefunc;
1a001070:	2154      	movs	r1, #84	; 0x54
1a001072:	f8c3 1c08 	str.w	r1, [r3, #3080]	; 0xc08
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001076:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
1a00107a:	2247      	movs	r2, #71	; 0x47
1a00107c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
1a001080:	4770      	bx	lr
1a001082:	bf00      	nop
1a001084:	40086000 	.word	0x40086000

1a001088 <Board_SSP_Init>:
   Chip_SCU_PinMuxSet(0x1, 13, (SCU_MODE_INBUFF_EN | SCU_MODE_FUNC7)); /* P1.13 connected to SDIO_CD */
}

void Board_SSP_Init(LPC_SSP_T *pSSP)
{
   if (pSSP == LPC_SSP1) {
1a001088:	4b08      	ldr	r3, [pc, #32]	; (1a0010ac <Board_SSP_Init+0x24>)
1a00108a:	4298      	cmp	r0, r3
1a00108c:	d10c      	bne.n	1a0010a8 <Board_SSP_Init+0x20>
1a00108e:	f5a3 337c 	sub.w	r3, r3, #258048	; 0x3f000
1a001092:	22f5      	movs	r2, #245	; 0xf5
1a001094:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
1a001098:	22f0      	movs	r2, #240	; 0xf0
1a00109a:	f8c3 2790 	str.w	r2, [r3, #1936]	; 0x790
1a00109e:	22d5      	movs	r2, #213	; 0xd5
1a0010a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
1a0010a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
1a0010a8:	4770      	bx	lr
1a0010aa:	bf00      	nop
1a0010ac:	400c5000 	.word	0x400c5000

1a0010b0 <Board_DAC_Init>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_DAC_Analog_Config(void)
{
	/*Enable analog function DAC on pin P4_4*/
	LPC_SCU->ENAIO[2] |= 1;
1a0010b0:	4a03      	ldr	r2, [pc, #12]	; (1a0010c0 <Board_DAC_Init+0x10>)
1a0010b2:	f8d2 3c90 	ldr.w	r3, [r2, #3216]	; 0xc90
1a0010b6:	f043 0301 	orr.w	r3, r3, #1
1a0010ba:	f8c2 3c90 	str.w	r3, [r2, #3216]	; 0xc90
1a0010be:	4770      	bx	lr
1a0010c0:	40086000 	.word	0x40086000

1a0010c4 <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a0010c4:	b508      	push	{r3, lr}
   unsigned int *pSCB_VTOR = (unsigned int *) 0xE000ED08;

   extern void *g_pfnVectors;

   *pSCB_VTOR = (unsigned int) &g_pfnVectors;
1a0010c6:	4b04      	ldr	r3, [pc, #16]	; (1a0010d8 <SystemInit+0x14>)
1a0010c8:	4a04      	ldr	r2, [pc, #16]	; (1a0010dc <SystemInit+0x18>)
1a0010ca:	601a      	str	r2, [r3, #0]

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a0010cc:	f001 f8ea 	bl	1a0022a4 <fpuInit>
#endif

   /* Board specific SystemInit */
   Board_SystemInit();
1a0010d0:	f000 f85a 	bl	1a001188 <Board_SystemInit>
1a0010d4:	bd08      	pop	{r3, pc}
1a0010d6:	bf00      	nop
1a0010d8:	e000ed08 	.word	0xe000ed08
1a0010dc:	1a000000 	.word	0x1a000000

1a0010e0 <Board_SetupMuxing>:
 * Public functions
 ****************************************************************************/

/* Sets up system pin muxing */
void Board_SetupMuxing(void)
{
1a0010e0:	b410      	push	{r4}
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0010e2:	2300      	movs	r3, #0
1a0010e4:	e00c      	b.n	1a001100 <Board_SetupMuxing+0x20>
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a0010e6:	4a09      	ldr	r2, [pc, #36]	; (1a00110c <Board_SetupMuxing+0x2c>)
1a0010e8:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a0010ec:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a0010f0:	784a      	ldrb	r2, [r1, #1]
1a0010f2:	8848      	ldrh	r0, [r1, #2]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0010f4:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a0010f8:	4905      	ldr	r1, [pc, #20]	; (1a001110 <Board_SetupMuxing+0x30>)
1a0010fa:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0010fe:	3301      	adds	r3, #1
1a001100:	2b17      	cmp	r3, #23
1a001102:	d9f0      	bls.n	1a0010e6 <Board_SetupMuxing+0x6>
   /* Setup system level pin muxing */
   Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a001104:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001108:	4770      	bx	lr
1a00110a:	bf00      	nop
1a00110c:	1a002ac8 	.word	0x1a002ac8
1a001110:	40086000 	.word	0x40086000

1a001114 <Board_SetupClocking>:

/* Set up and initialize clocking prior to call to main */
void Board_SetupClocking(void)
{
1a001114:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a001116:	4a19      	ldr	r2, [pc, #100]	; (1a00117c <Board_SetupClocking+0x68>)
1a001118:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a00111c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a001120:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a001124:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a001128:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a00112c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a001130:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a001134:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124

   /* Enable Flash acceleration and setup wait states */
   Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);

   /* Setup System core frequency to MAX_CLOCK_FREQ */
   Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a001138:	2006      	movs	r0, #6
1a00113a:	4911      	ldr	r1, [pc, #68]	; (1a001180 <Board_SetupClocking+0x6c>)
1a00113c:	2201      	movs	r2, #1
1a00113e:	f000 ffaf 	bl	1a0020a0 <Chip_SetupCoreClock>

   /* Setup system base clocks and initial states. This won't enable and
      disable individual clocks, but sets up the base clock sources for
      each individual peripheral clock. */
   for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a001142:	2400      	movs	r4, #0
1a001144:	e00d      	b.n	1a001162 <Board_SetupClocking+0x4e>
       Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a001146:	4b0f      	ldr	r3, [pc, #60]	; (1a001184 <Board_SetupClocking+0x70>)
1a001148:	eb03 0384 	add.w	r3, r3, r4, lsl #2
1a00114c:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
1a001150:	f893 1061 	ldrb.w	r1, [r3, #97]	; 0x61
1a001154:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
1a001158:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
1a00115c:	f000 fe3a 	bl	1a001dd4 <Chip_Clock_SetBaseClock>
   Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);

   /* Setup system base clocks and initial states. This won't enable and
      disable individual clocks, but sets up the base clock sources for
      each individual peripheral clock. */
   for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a001160:	3401      	adds	r4, #1
1a001162:	2c02      	cmp	r4, #2
1a001164:	d9ef      	bls.n	1a001146 <Board_SetupClocking+0x32>
       Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
                               InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
   }

   /* Reset and enable 32Khz oscillator */
   LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a001166:	4b05      	ldr	r3, [pc, #20]	; (1a00117c <Board_SetupClocking+0x68>)
1a001168:	685a      	ldr	r2, [r3, #4]
1a00116a:	f022 020c 	bic.w	r2, r2, #12
1a00116e:	605a      	str	r2, [r3, #4]
   LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a001170:	685a      	ldr	r2, [r3, #4]
1a001172:	f042 0203 	orr.w	r2, r2, #3
1a001176:	605a      	str	r2, [r3, #4]
1a001178:	bd10      	pop	{r4, pc}
1a00117a:	bf00      	nop
1a00117c:	40043000 	.word	0x40043000
1a001180:	0c28cb00 	.word	0x0c28cb00
1a001184:	1a002ac8 	.word	0x1a002ac8

1a001188 <Board_SystemInit>:
}

/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a001188:	b508      	push	{r3, lr}
   /* Setup system clocking and memory. This is done early to allow the
      application and tools to clear memory and use scatter loading to
      external memory. */
   Board_SetupMuxing();
1a00118a:	f7ff ffa9 	bl	1a0010e0 <Board_SetupMuxing>
   Board_SetupClocking();
1a00118e:	f7ff ffc1 	bl	1a001114 <Board_SetupClocking>
1a001192:	bd08      	pop	{r3, pc}

1a001194 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a001194:	4b09      	ldr	r3, [pc, #36]	; (1a0011bc <Chip_UART_GetIndex+0x28>)
1a001196:	4298      	cmp	r0, r3
1a001198:	d009      	beq.n	1a0011ae <Chip_UART_GetIndex+0x1a>
1a00119a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a00119e:	4298      	cmp	r0, r3
1a0011a0:	d007      	beq.n	1a0011b2 <Chip_UART_GetIndex+0x1e>
1a0011a2:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a0011a6:	4298      	cmp	r0, r3
1a0011a8:	d005      	beq.n	1a0011b6 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a0011aa:	2000      	movs	r0, #0
1a0011ac:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a0011ae:	2002      	movs	r0, #2
1a0011b0:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a0011b2:	2003      	movs	r0, #3
1a0011b4:	4770      	bx	lr
	uint32_t base = (uint32_t) pUART;
	switch(base) {
		case LPC_USART0_BASE:
			return 0;
		case LPC_UART1_BASE:
			return 1;
1a0011b6:	2001      	movs	r0, #1
		case LPC_USART3_BASE:
			return 3;
		default:
			return 0; /* Should never come here */
	}
}
1a0011b8:	4770      	bx	lr
1a0011ba:	bf00      	nop
1a0011bc:	400c1000 	.word	0x400c1000

1a0011c0 <Chip_UART_ABIntHandler>:
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Current pending interrupt status per the IIR register
 */
STATIC INLINE uint32_t Chip_UART_ReadIntIDReg(LPC_USART_T *pUART)
{
	return pUART->IIR;
1a0011c0:	6883      	ldr	r3, [r0, #8]

/* UART Autobaud command interrupt handler */
STATIC void Chip_UART_ABIntHandler(LPC_USART_T *pUART)
{
	/* Handle End Of Autobaud interrupt */
	if((Chip_UART_ReadIntIDReg(pUART) & UART_IIR_ABEO_INT) != 0) {
1a0011c2:	f413 7f80 	tst.w	r3, #256	; 0x100
1a0011c6:	d00f      	beq.n	1a0011e8 <Chip_UART_ABIntHandler+0x28>
 * @note	Use an Or'ed value of UART_ACR_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetAutoBaudReg(LPC_USART_T *pUART, uint32_t acr)
{
	pUART->ACR |= acr;
1a0011c8:	6a03      	ldr	r3, [r0, #32]
1a0011ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
1a0011ce:	6203      	str	r3, [r0, #32]
 *			(DLAB) in LCR must be cleared in order to access the IER register.
 *			This function doesn't alter the DLAB state
 */
STATIC INLINE void Chip_UART_IntDisable(LPC_USART_T *pUART, uint32_t intMask)
{
	pUART->IER &= ~intMask;
1a0011d0:	6843      	ldr	r3, [r0, #4]
1a0011d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
1a0011d6:	6043      	str	r3, [r0, #4]
        Chip_UART_SetAutoBaudReg(pUART, UART_ACR_ABEOINT_CLR);
		Chip_UART_IntDisable(pUART, UART_IER_ABEOINT);
	    if (ABsyncSts == RESET) {
1a0011d8:	4b0a      	ldr	r3, [pc, #40]	; (1a001204 <Chip_UART_ABIntHandler+0x44>)
1a0011da:	781b      	ldrb	r3, [r3, #0]
1a0011dc:	f013 0fff 	tst.w	r3, #255	; 0xff
1a0011e0:	d102      	bne.n	1a0011e8 <Chip_UART_ABIntHandler+0x28>
	        ABsyncSts = SET;
1a0011e2:	2201      	movs	r2, #1
1a0011e4:	4b07      	ldr	r3, [pc, #28]	; (1a001204 <Chip_UART_ABIntHandler+0x44>)
1a0011e6:	701a      	strb	r2, [r3, #0]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Current pending interrupt status per the IIR register
 */
STATIC INLINE uint32_t Chip_UART_ReadIntIDReg(LPC_USART_T *pUART)
{
	return pUART->IIR;
1a0011e8:	6883      	ldr	r3, [r0, #8]
        }
	}

    /* Handle Autobaud Timeout interrupt */
	if((Chip_UART_ReadIntIDReg(pUART) & UART_IIR_ABTO_INT) != 0) {
1a0011ea:	f413 7f00 	tst.w	r3, #512	; 0x200
1a0011ee:	d007      	beq.n	1a001200 <Chip_UART_ABIntHandler+0x40>
 * @note	Use an Or'ed value of UART_ACR_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetAutoBaudReg(LPC_USART_T *pUART, uint32_t acr)
{
	pUART->ACR |= acr;
1a0011f0:	6a03      	ldr	r3, [r0, #32]
1a0011f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
1a0011f6:	6203      	str	r3, [r0, #32]
 *			(DLAB) in LCR must be cleared in order to access the IER register.
 *			This function doesn't alter the DLAB state
 */
STATIC INLINE void Chip_UART_IntDisable(LPC_USART_T *pUART, uint32_t intMask)
{
	pUART->IER &= ~intMask;
1a0011f8:	6843      	ldr	r3, [r0, #4]
1a0011fa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
1a0011fe:	6043      	str	r3, [r0, #4]
1a001200:	4770      	bx	lr
1a001202:	bf00      	nop
1a001204:	1000004a 	.word	0x1000004a

1a001208 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a001208:	b510      	push	{r4, lr}
1a00120a:	b082      	sub	sp, #8
1a00120c:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a00120e:	f7ff ffc1 	bl	1a001194 <Chip_UART_GetIndex>
1a001212:	4b0f      	ldr	r3, [pc, #60]	; (1a001250 <Chip_UART_Init+0x48>)
1a001214:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001218:	2101      	movs	r1, #1
1a00121a:	460a      	mov	r2, r1
1a00121c:	460b      	mov	r3, r1
1a00121e:	f000 fe55 	bl	1a001ecc <Chip_Clock_EnableOpts>
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
1a001222:	2307      	movs	r3, #7
1a001224:	60a3      	str	r3, [r4, #8]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXDisable(LPC_USART_T *pUART)
{
    pUART->TER2 = 0;
1a001226:	2300      	movs	r3, #0
1a001228:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a00122a:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a00122c:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a00122e:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a001230:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a001232:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a001234:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a001236:	4b07      	ldr	r3, [pc, #28]	; (1a001254 <Chip_UART_Init+0x4c>)
1a001238:	429c      	cmp	r4, r3
1a00123a:	d103      	bne.n	1a001244 <Chip_UART_Init+0x3c>
		/* Set Modem Control to default state */
		pUART->MCR = 0;
1a00123c:	2300      	movs	r3, #0
1a00123e:	6123      	str	r3, [r4, #16]
		/*Dummy Reading to Clear Status */
		tmp = pUART->MSR;
1a001240:	69a3      	ldr	r3, [r4, #24]
1a001242:	9301      	str	r3, [sp, #4]
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a001244:	2303      	movs	r3, #3
1a001246:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a001248:	2310      	movs	r3, #16
1a00124a:	62a3      	str	r3, [r4, #40]	; 0x28
}
1a00124c:	b002      	add	sp, #8
1a00124e:	bd10      	pop	{r4, pc}
1a001250:	1a002b34 	.word	0x1a002b34
1a001254:	40082000 	.word	0x40082000

1a001258 <Chip_UART_DeInit>:

/* De-initializes the pUART peripheral */
void Chip_UART_DeInit(LPC_USART_T *pUART)
{
1a001258:	b508      	push	{r3, lr}
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXDisable(LPC_USART_T *pUART)
{
    pUART->TER2 = 0;
1a00125a:	2200      	movs	r2, #0
1a00125c:	65c2      	str	r2, [r0, #92]	; 0x5c
    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable clock */
	Chip_Clock_Disable(UART_PClock[Chip_UART_GetIndex(pUART)]);
1a00125e:	f7ff ff99 	bl	1a001194 <Chip_UART_GetIndex>
1a001262:	4b03      	ldr	r3, [pc, #12]	; (1a001270 <Chip_UART_DeInit+0x18>)
1a001264:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001268:	f000 fe74 	bl	1a001f54 <Chip_Clock_Disable>
1a00126c:	bd08      	pop	{r3, pc}
1a00126e:	bf00      	nop
1a001270:	1a002b34 	.word	0x1a002b34

1a001274 <Chip_UART_Send>:
}

/* Transmit a byte array through the UART peripheral (non-blocking) */
int Chip_UART_Send(LPC_USART_T *pUART, const void *data, int numBytes)
{
1a001274:	b410      	push	{r4}
	int sent = 0;
1a001276:	2300      	movs	r3, #0
	uint8_t *p8 = (uint8_t *) data;

	/* Send until the transmit FIFO is full or out of bytes */
	while ((sent < numBytes) &&
1a001278:	e003      	b.n	1a001282 <Chip_UART_Send+0xe>
		   ((Chip_UART_ReadLineStatus(pUART) & UART_LSR_THRE) != 0)) {
		Chip_UART_SendByte(pUART, *p8);
1a00127a:	f811 4b01 	ldrb.w	r4, [r1], #1
 * @note	This function attempts to place a byte into the UART transmit
 *			FIFO or transmit hold register regard regardless of UART state
 */
STATIC INLINE void Chip_UART_SendByte(LPC_USART_T *pUART, uint8_t data)
{
	pUART->THR = (uint32_t) data;
1a00127e:	6004      	str	r4, [r0, #0]
		p8++;
		sent++;
1a001280:	3301      	adds	r3, #1
{
	int sent = 0;
	uint8_t *p8 = (uint8_t *) data;

	/* Send until the transmit FIFO is full or out of bytes */
	while ((sent < numBytes) &&
1a001282:	4293      	cmp	r3, r2
1a001284:	da03      	bge.n	1a00128e <Chip_UART_Send+0x1a>
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a001286:	6944      	ldr	r4, [r0, #20]
1a001288:	f014 0f20 	tst.w	r4, #32
1a00128c:	d1f5      	bne.n	1a00127a <Chip_UART_Send+0x6>
		p8++;
		sent++;
	}

	return sent;
}
1a00128e:	4618      	mov	r0, r3
1a001290:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001294:	4770      	bx	lr
1a001296:	bf00      	nop

1a001298 <Chip_UART_CheckBusy>:

/* Check whether if UART is busy or not */
FlagStatus Chip_UART_CheckBusy(LPC_USART_T *pUART)
{
	if (pUART->LSR & UART_LSR_TEMT) {
1a001298:	6943      	ldr	r3, [r0, #20]
1a00129a:	f013 0f40 	tst.w	r3, #64	; 0x40
1a00129e:	d001      	beq.n	1a0012a4 <Chip_UART_CheckBusy+0xc>
		return RESET;
1a0012a0:	2000      	movs	r0, #0
1a0012a2:	4770      	bx	lr
	}
	else {
		return SET;
1a0012a4:	2001      	movs	r0, #1
	}
}
1a0012a6:	4770      	bx	lr

1a0012a8 <Chip_UART_SendBlocking>:

/* Transmit a byte array through the UART peripheral (blocking) */
int Chip_UART_SendBlocking(LPC_USART_T *pUART, const void *data, int numBytes)
{
1a0012a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0012aa:	4607      	mov	r7, r0
1a0012ac:	460d      	mov	r5, r1
1a0012ae:	4614      	mov	r4, r2
	int pass, sent = 0;
1a0012b0:	2600      	movs	r6, #0
	uint8_t *p8 = (uint8_t *) data;

	while (numBytes > 0) {
1a0012b2:	e007      	b.n	1a0012c4 <Chip_UART_SendBlocking+0x1c>
		pass = Chip_UART_Send(pUART, p8, numBytes);
1a0012b4:	4638      	mov	r0, r7
1a0012b6:	4629      	mov	r1, r5
1a0012b8:	4622      	mov	r2, r4
1a0012ba:	f7ff ffdb 	bl	1a001274 <Chip_UART_Send>
		numBytes -= pass;
1a0012be:	1a24      	subs	r4, r4, r0
		sent += pass;
1a0012c0:	4406      	add	r6, r0
		p8 += pass;
1a0012c2:	4405      	add	r5, r0
int Chip_UART_SendBlocking(LPC_USART_T *pUART, const void *data, int numBytes)
{
	int pass, sent = 0;
	uint8_t *p8 = (uint8_t *) data;

	while (numBytes > 0) {
1a0012c4:	2c00      	cmp	r4, #0
1a0012c6:	dcf5      	bgt.n	1a0012b4 <Chip_UART_SendBlocking+0xc>
		sent += pass;
		p8 += pass;
	}

	return sent;
}
1a0012c8:	4630      	mov	r0, r6
1a0012ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1a0012cc <Chip_UART_Read>:

/* Read data through the UART peripheral (non-blocking) */
int Chip_UART_Read(LPC_USART_T *pUART, void *data, int numBytes)
{
1a0012cc:	b410      	push	{r4}
	int readBytes = 0;
1a0012ce:	2300      	movs	r3, #0
	uint8_t *p8 = (uint8_t *) data;

	/* Send until the transmit FIFO is full or out of bytes */
	while ((readBytes < numBytes) &&
1a0012d0:	e003      	b.n	1a0012da <Chip_UART_Read+0xe>
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0012d2:	6804      	ldr	r4, [r0, #0]
		   ((Chip_UART_ReadLineStatus(pUART) & UART_LSR_RDR) != 0)) {
		*p8 = Chip_UART_ReadByte(pUART);
1a0012d4:	f801 4b01 	strb.w	r4, [r1], #1
		p8++;
		readBytes++;
1a0012d8:	3301      	adds	r3, #1
{
	int readBytes = 0;
	uint8_t *p8 = (uint8_t *) data;

	/* Send until the transmit FIFO is full or out of bytes */
	while ((readBytes < numBytes) &&
1a0012da:	4293      	cmp	r3, r2
1a0012dc:	da03      	bge.n	1a0012e6 <Chip_UART_Read+0x1a>
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0012de:	6944      	ldr	r4, [r0, #20]
1a0012e0:	f014 0f01 	tst.w	r4, #1
1a0012e4:	d1f5      	bne.n	1a0012d2 <Chip_UART_Read+0x6>
		p8++;
		readBytes++;
	}

	return readBytes;
}
1a0012e6:	4618      	mov	r0, r3
1a0012e8:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0012ec:	4770      	bx	lr
1a0012ee:	bf00      	nop

1a0012f0 <Chip_UART_ReadBlocking>:

/* Read data through the UART peripheral (blocking) */
int Chip_UART_ReadBlocking(LPC_USART_T *pUART, void *data, int numBytes)
{
1a0012f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0012f2:	4607      	mov	r7, r0
1a0012f4:	460d      	mov	r5, r1
1a0012f6:	4614      	mov	r4, r2
	int pass, readBytes = 0;
1a0012f8:	2600      	movs	r6, #0
	uint8_t *p8 = (uint8_t *) data;

	while (numBytes > 0) {
1a0012fa:	e007      	b.n	1a00130c <Chip_UART_ReadBlocking+0x1c>
		pass = Chip_UART_Read(pUART, p8, numBytes);
1a0012fc:	4638      	mov	r0, r7
1a0012fe:	4629      	mov	r1, r5
1a001300:	4622      	mov	r2, r4
1a001302:	f7ff ffe3 	bl	1a0012cc <Chip_UART_Read>
		numBytes -= pass;
1a001306:	1a24      	subs	r4, r4, r0
		readBytes += pass;
1a001308:	4406      	add	r6, r0
		p8 += pass;
1a00130a:	4405      	add	r5, r0
int Chip_UART_ReadBlocking(LPC_USART_T *pUART, void *data, int numBytes)
{
	int pass, readBytes = 0;
	uint8_t *p8 = (uint8_t *) data;

	while (numBytes > 0) {
1a00130c:	2c00      	cmp	r4, #0
1a00130e:	dcf5      	bgt.n	1a0012fc <Chip_UART_ReadBlocking+0xc>
		readBytes += pass;
		p8 += pass;
	}

	return readBytes;
}
1a001310:	4630      	mov	r0, r6
1a001312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1a001314 <Chip_UART_SetBaud>:

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a001314:	b538      	push	{r3, r4, r5, lr}
1a001316:	4605      	mov	r5, r0
1a001318:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00131a:	f7ff ff3b 	bl	1a001194 <Chip_UART_GetIndex>
1a00131e:	4b0d      	ldr	r3, [pc, #52]	; (1a001354 <Chip_UART_SetBaud+0x40>)
1a001320:	eb03 0040 	add.w	r0, r3, r0, lsl #1
1a001324:	8900      	ldrh	r0, [r0, #8]
1a001326:	f000 fe43 	bl	1a001fb0 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a00132a:	0124      	lsls	r4, r4, #4
1a00132c:	fbb0 f3f4 	udiv	r3, r0, r4
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a001330:	68ea      	ldr	r2, [r5, #12]
1a001332:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a001336:	60ea      	str	r2, [r5, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a001338:	b2da      	uxtb	r2, r3
1a00133a:	602a      	str	r2, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a00133c:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a001340:	606a      	str	r2, [r5, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a001342:	68ea      	ldr	r2, [r5, #12]
1a001344:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a001348:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a00134a:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a00134e:	0900      	lsrs	r0, r0, #4
1a001350:	bd38      	pop	{r3, r4, r5, pc}
1a001352:	bf00      	nop
1a001354:	1a002b34 	.word	0x1a002b34

1a001358 <Chip_UART_RXIntHandlerRB>:

/* UART receive-only interrupt handler for ring buffers */
void Chip_UART_RXIntHandlerRB(LPC_USART_T *pUART, RINGBUFF_T *pRB)
{
1a001358:	b530      	push	{r4, r5, lr}
1a00135a:	b083      	sub	sp, #12
1a00135c:	4604      	mov	r4, r0
1a00135e:	460d      	mov	r5, r1
	/* New data will be ignored if data not popped in time */
	while (Chip_UART_ReadLineStatus(pUART) & UART_LSR_RDR) {
1a001360:	e006      	b.n	1a001370 <Chip_UART_RXIntHandlerRB+0x18>
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a001362:	6823      	ldr	r3, [r4, #0]
		uint8_t ch = Chip_UART_ReadByte(pUART);
1a001364:	a902      	add	r1, sp, #8
1a001366:	f801 3d01 	strb.w	r3, [r1, #-1]!
		RingBuffer_Insert(pRB, &ch);
1a00136a:	4628      	mov	r0, r5
1a00136c:	f000 f908 	bl	1a001580 <RingBuffer_Insert>
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a001370:	6963      	ldr	r3, [r4, #20]

/* UART receive-only interrupt handler for ring buffers */
void Chip_UART_RXIntHandlerRB(LPC_USART_T *pUART, RINGBUFF_T *pRB)
{
	/* New data will be ignored if data not popped in time */
	while (Chip_UART_ReadLineStatus(pUART) & UART_LSR_RDR) {
1a001372:	f013 0f01 	tst.w	r3, #1
1a001376:	d1f4      	bne.n	1a001362 <Chip_UART_RXIntHandlerRB+0xa>
		uint8_t ch = Chip_UART_ReadByte(pUART);
		RingBuffer_Insert(pRB, &ch);
	}
}
1a001378:	b003      	add	sp, #12
1a00137a:	bd30      	pop	{r4, r5, pc}

1a00137c <Chip_UART_TXIntHandlerRB>:

/* UART transmit-only interrupt handler for ring buffers */
void Chip_UART_TXIntHandlerRB(LPC_USART_T *pUART, RINGBUFF_T *pRB)
{
1a00137c:	b530      	push	{r4, r5, lr}
1a00137e:	b083      	sub	sp, #12
1a001380:	4604      	mov	r4, r0
1a001382:	460d      	mov	r5, r1
	uint8_t ch;

	/* Fill FIFO until full or until TX ring buffer is empty */
	while ((Chip_UART_ReadLineStatus(pUART) & UART_LSR_THRE) != 0 &&
1a001384:	e002      	b.n	1a00138c <Chip_UART_TXIntHandlerRB+0x10>
		   RingBuffer_Pop(pRB, &ch)) {
		Chip_UART_SendByte(pUART, ch);
1a001386:	f89d 3007 	ldrb.w	r3, [sp, #7]
 * @note	This function attempts to place a byte into the UART transmit
 *			FIFO or transmit hold register regard regardless of UART state
 */
STATIC INLINE void Chip_UART_SendByte(LPC_USART_T *pUART, uint8_t data)
{
	pUART->THR = (uint32_t) data;
1a00138a:	6023      	str	r3, [r4, #0]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a00138c:	6963      	ldr	r3, [r4, #20]
void Chip_UART_TXIntHandlerRB(LPC_USART_T *pUART, RINGBUFF_T *pRB)
{
	uint8_t ch;

	/* Fill FIFO until full or until TX ring buffer is empty */
	while ((Chip_UART_ReadLineStatus(pUART) & UART_LSR_THRE) != 0 &&
1a00138e:	f013 0f20 	tst.w	r3, #32
1a001392:	d006      	beq.n	1a0013a2 <Chip_UART_TXIntHandlerRB+0x26>
		   RingBuffer_Pop(pRB, &ch)) {
1a001394:	4628      	mov	r0, r5
1a001396:	f10d 0107 	add.w	r1, sp, #7
1a00139a:	f000 f951 	bl	1a001640 <RingBuffer_Pop>
void Chip_UART_TXIntHandlerRB(LPC_USART_T *pUART, RINGBUFF_T *pRB)
{
	uint8_t ch;

	/* Fill FIFO until full or until TX ring buffer is empty */
	while ((Chip_UART_ReadLineStatus(pUART) & UART_LSR_THRE) != 0 &&
1a00139e:	2800      	cmp	r0, #0
1a0013a0:	d1f1      	bne.n	1a001386 <Chip_UART_TXIntHandlerRB+0xa>
 * @param	RingBuff	: Pointer to ring buffer
 * @return	1 if the ring buffer is empty, otherwise 0
 */
STATIC INLINE int RingBuffer_IsEmpty(RINGBUFF_T *RingBuff)
{
	return RB_VHEAD(RingBuff) == RB_VTAIL(RingBuff);
1a0013a2:	68ea      	ldr	r2, [r5, #12]
1a0013a4:	692b      	ldr	r3, [r5, #16]
		   RingBuffer_Pop(pRB, &ch)) {
		Chip_UART_SendByte(pUART, ch);
	}

	/* Turn off interrupt if the ring buffer is empty */
	if (RingBuffer_IsEmpty(pRB)) {
1a0013a6:	429a      	cmp	r2, r3
1a0013a8:	d103      	bne.n	1a0013b2 <Chip_UART_TXIntHandlerRB+0x36>
 *			(DLAB) in LCR must be cleared in order to access the IER register.
 *			This function doesn't alter the DLAB state
 */
STATIC INLINE void Chip_UART_IntDisable(LPC_USART_T *pUART, uint32_t intMask)
{
	pUART->IER &= ~intMask;
1a0013aa:	6863      	ldr	r3, [r4, #4]
1a0013ac:	f023 0302 	bic.w	r3, r3, #2
1a0013b0:	6063      	str	r3, [r4, #4]
		/* Shut down transmit */
		Chip_UART_IntDisable(pUART, UART_IER_THREINT);
	}
}
1a0013b2:	b003      	add	sp, #12
1a0013b4:	bd30      	pop	{r4, r5, pc}
1a0013b6:	bf00      	nop

1a0013b8 <Chip_UART_SendRB>:

/* Populate a transmit ring buffer and start UART transmit */
uint32_t Chip_UART_SendRB(LPC_USART_T *pUART, RINGBUFF_T *pRB, const void *data, int bytes)
{
1a0013b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0013bc:	4604      	mov	r4, r0
1a0013be:	460e      	mov	r6, r1
1a0013c0:	4690      	mov	r8, r2
1a0013c2:	461f      	mov	r7, r3
1a0013c4:	6843      	ldr	r3, [r0, #4]
1a0013c6:	f023 0302 	bic.w	r3, r3, #2
1a0013ca:	6043      	str	r3, [r0, #4]

	/* Don't let UART transmit ring buffer change in the UART IRQ handler */
	Chip_UART_IntDisable(pUART, UART_IER_THREINT);

	/* Move as much data as possible into transmit ring buffer */
	ret = RingBuffer_InsertMult(pRB, p8, bytes);
1a0013cc:	4608      	mov	r0, r1
1a0013ce:	4611      	mov	r1, r2
1a0013d0:	463a      	mov	r2, r7
1a0013d2:	f000 f8ed 	bl	1a0015b0 <RingBuffer_InsertMult>
1a0013d6:	4605      	mov	r5, r0
	Chip_UART_TXIntHandlerRB(pUART, pRB);
1a0013d8:	4620      	mov	r0, r4
1a0013da:	4631      	mov	r1, r6
1a0013dc:	f7ff ffce 	bl	1a00137c <Chip_UART_TXIntHandlerRB>

	/* Add additional data to transmit ring buffer if possible */
	ret += RingBuffer_InsertMult(pRB, (p8 + ret), (bytes - ret));
1a0013e0:	4630      	mov	r0, r6
1a0013e2:	eb08 0105 	add.w	r1, r8, r5
1a0013e6:	1b7a      	subs	r2, r7, r5
1a0013e8:	f000 f8e2 	bl	1a0015b0 <RingBuffer_InsertMult>
 *			(DLAB) in LCR must be cleared in order to access the IER register.
 *			This function doesn't alter the DLAB state
 */
STATIC INLINE void Chip_UART_IntEnable(LPC_USART_T *pUART, uint32_t intMask)
{
	pUART->IER |= intMask;
1a0013ec:	6863      	ldr	r3, [r4, #4]
1a0013ee:	f043 0302 	orr.w	r3, r3, #2
1a0013f2:	6063      	str	r3, [r4, #4]

	/* Enable UART transmit interrupt */
	Chip_UART_IntEnable(pUART, UART_IER_THREINT);

	return ret;
}
1a0013f4:	4428      	add	r0, r5
1a0013f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0013fa:	bf00      	nop

1a0013fc <Chip_UART_ReadRB>:

/* Copy data from a receive ring buffer */
int Chip_UART_ReadRB(LPC_USART_T *pUART, RINGBUFF_T *pRB, void *data, int bytes)
{
1a0013fc:	b508      	push	{r3, lr}
	(void) pUART;

	return RingBuffer_PopMult(pRB, (uint8_t *) data, bytes);
1a0013fe:	4608      	mov	r0, r1
1a001400:	4611      	mov	r1, r2
1a001402:	461a      	mov	r2, r3
1a001404:	f000 f934 	bl	1a001670 <RingBuffer_PopMult>
}
1a001408:	bd08      	pop	{r3, pc}
1a00140a:	bf00      	nop

1a00140c <Chip_UART_IRQRBHandler>:

/* UART receive/transmit interrupt handler for ring buffers */
void Chip_UART_IRQRBHandler(LPC_USART_T *pUART, RINGBUFF_T *pRXRB, RINGBUFF_T *pTXRB)
{
1a00140c:	b570      	push	{r4, r5, r6, lr}
1a00140e:	4604      	mov	r4, r0
1a001410:	460e      	mov	r6, r1
	/* Handle transmit interrupt if enabled */
	if (pUART->IER & UART_IER_THREINT) {
1a001412:	6843      	ldr	r3, [r0, #4]
1a001414:	f013 0f02 	tst.w	r3, #2
1a001418:	d00b      	beq.n	1a001432 <Chip_UART_IRQRBHandler+0x26>
1a00141a:	4615      	mov	r5, r2
		Chip_UART_TXIntHandlerRB(pUART, pTXRB);
1a00141c:	4611      	mov	r1, r2
1a00141e:	f7ff ffad 	bl	1a00137c <Chip_UART_TXIntHandlerRB>
1a001422:	68ea      	ldr	r2, [r5, #12]
1a001424:	692b      	ldr	r3, [r5, #16]

		/* Disable transmit interrupt if the ring buffer is empty */
		if (RingBuffer_IsEmpty(pTXRB)) {
1a001426:	429a      	cmp	r2, r3
1a001428:	d103      	bne.n	1a001432 <Chip_UART_IRQRBHandler+0x26>
 *			(DLAB) in LCR must be cleared in order to access the IER register.
 *			This function doesn't alter the DLAB state
 */
STATIC INLINE void Chip_UART_IntDisable(LPC_USART_T *pUART, uint32_t intMask)
{
	pUART->IER &= ~intMask;
1a00142a:	6863      	ldr	r3, [r4, #4]
1a00142c:	f023 0302 	bic.w	r3, r3, #2
1a001430:	6063      	str	r3, [r4, #4]
			Chip_UART_IntDisable(pUART, UART_IER_THREINT);
		}
	}

	/* Handle receive interrupt */
	Chip_UART_RXIntHandlerRB(pUART, pRXRB);
1a001432:	4620      	mov	r0, r4
1a001434:	4631      	mov	r1, r6
1a001436:	f7ff ff8f 	bl	1a001358 <Chip_UART_RXIntHandlerRB>

    /* Handle Autobaud interrupts */
    Chip_UART_ABIntHandler(pUART);
1a00143a:	4620      	mov	r0, r4
1a00143c:	f7ff fec0 	bl	1a0011c0 <Chip_UART_ABIntHandler>
1a001440:	bd70      	pop	{r4, r5, r6, pc}
1a001442:	bf00      	nop

1a001444 <Chip_UART_SetBaudFDR>:
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a001444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001448:	b083      	sub	sp, #12
1a00144a:	4683      	mov	fp, r0
1a00144c:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00144e:	f7ff fea1 	bl	1a001194 <Chip_UART_GetIndex>
1a001452:	4b35      	ldr	r3, [pc, #212]	; (1a001528 <Chip_UART_SetBaudFDR+0xe4>)
1a001454:	eb03 0040 	add.w	r0, r3, r0, lsl #1
1a001458:	8900      	ldrh	r0, [r0, #8]
1a00145a:	f000 fda9 	bl	1a001fb0 <Chip_Clock_GetRate>
1a00145e:	4606      	mov	r6, r0
/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */
1a001460:	f04f 37ff 	mov.w	r7, #4294967295

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a001464:	2401      	movs	r4, #1
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a001466:	2300      	movs	r3, #0
1a001468:	9301      	str	r3, [sp, #4]
1a00146a:	46a2      	mov	sl, r4
1a00146c:	4699      	mov	r9, r3

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a00146e:	e029      	b.n	1a0014c4 <Chip_UART_SetBaudFDR+0x80>
		for (d = 0; d < m; d++) {
			uint32_t diff, div;
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a001470:	2300      	movs	r3, #0
1a001472:	0932      	lsrs	r2, r6, #4
1a001474:	0730      	lsls	r0, r6, #28
1a001476:	fba0 0104 	umull	r0, r1, r0, r4
1a00147a:	fb04 1102 	mla	r1, r4, r2, r1
1a00147e:	1962      	adds	r2, r4, r5
1a001480:	fb08 f202 	mul.w	r2, r8, r2
1a001484:	f000 ff7c 	bl	1a002380 <__aeabi_uldivmod>

			/* Lower 32-bit of dval has diff */
			diff = (uint32_t) dval;
1a001488:	4603      	mov	r3, r0
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);
1a00148a:	460a      	mov	r2, r1

			/* Closer to next div */
			if ((int)diff < 0) {
1a00148c:	2800      	cmp	r0, #0
1a00148e:	da01      	bge.n	1a001494 <Chip_UART_SetBaudFDR+0x50>
				diff = -diff;
1a001490:	4243      	negs	r3, r0
				div ++;
1a001492:	1c4a      	adds	r2, r1, #1
			}

			/* Check if new value is worse than old or out of range */
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a001494:	429f      	cmp	r7, r3
1a001496:	d30a      	bcc.n	1a0014ae <Chip_UART_SetBaudFDR+0x6a>
1a001498:	b14a      	cbz	r2, 1a0014ae <Chip_UART_SetBaudFDR+0x6a>
1a00149a:	0c11      	lsrs	r1, r2, #16
1a00149c:	d107      	bne.n	1a0014ae <Chip_UART_SetBaudFDR+0x6a>
1a00149e:	2a02      	cmp	r2, #2
1a0014a0:	d800      	bhi.n	1a0014a4 <Chip_UART_SetBaudFDR+0x60>
1a0014a2:	b925      	cbnz	r5, 1a0014ae <Chip_UART_SetBaudFDR+0x6a>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a0014a4:	b14b      	cbz	r3, 1a0014ba <Chip_UART_SetBaudFDR+0x76>

			/* Store the new better values */
			sdiv = div;
			sd = d;
			sm = m;
			odiff = diff;
1a0014a6:	461f      	mov	r7, r3
				continue;
			}

			/* Store the new better values */
			sdiv = div;
			sd = d;
1a0014a8:	9501      	str	r5, [sp, #4]
			sm = m;
1a0014aa:	46a2      	mov	sl, r4
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a0014ac:	4691      	mov	r9, r2
	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
		for (d = 0; d < m; d++) {
1a0014ae:	3501      	adds	r5, #1
1a0014b0:	e000      	b.n	1a0014b4 <Chip_UART_SetBaudFDR+0x70>
1a0014b2:	2500      	movs	r5, #0
1a0014b4:	42a5      	cmp	r5, r4
1a0014b6:	d3db      	bcc.n	1a001470 <Chip_UART_SetBaudFDR+0x2c>
1a0014b8:	e003      	b.n	1a0014c2 <Chip_UART_SetBaudFDR+0x7e>

			/* Store the new better values */
			sdiv = div;
			sd = d;
			sm = m;
			odiff = diff;
1a0014ba:	461f      	mov	r7, r3
				continue;
			}

			/* Store the new better values */
			sdiv = div;
			sd = d;
1a0014bc:	9501      	str	r5, [sp, #4]
			sm = m;
1a0014be:	46a2      	mov	sl, r4
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a0014c0:	4691      	mov	r9, r2

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a0014c2:	3401      	adds	r4, #1
1a0014c4:	b10f      	cbz	r7, 1a0014ca <Chip_UART_SetBaudFDR+0x86>
1a0014c6:	2c0f      	cmp	r4, #15
1a0014c8:	d9f3      	bls.n	1a0014b2 <Chip_UART_SetBaudFDR+0x6e>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a0014ca:	f1b9 0f00 	cmp.w	r9, #0
1a0014ce:	d026      	beq.n	1a00151e <Chip_UART_SetBaudFDR+0xda>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0014d0:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0014d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0014d8:	f8cb 300c 	str.w	r3, [fp, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a0014dc:	fa5f f389 	uxtb.w	r3, r9
1a0014e0:	f8cb 3000 	str.w	r3, [fp]
	pUART->DLM = (uint32_t) dlm;
1a0014e4:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a0014e8:	f8cb 3004 	str.w	r3, [fp, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0014ec:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0014f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0014f4:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a0014f8:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a0014fc:	b2da      	uxtb	r2, r3
1a0014fe:	9901      	ldr	r1, [sp, #4]
1a001500:	f001 030f 	and.w	r3, r1, #15
1a001504:	4313      	orrs	r3, r2
1a001506:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a00150a:	0933      	lsrs	r3, r6, #4
1a00150c:	fb0a f303 	mul.w	r3, sl, r3
1a001510:	eb0a 0001 	add.w	r0, sl, r1
1a001514:	fb09 f000 	mul.w	r0, r9, r0
1a001518:	fbb3 f0f0 	udiv	r0, r3, r0
1a00151c:	e000      	b.n	1a001520 <Chip_UART_SetBaudFDR+0xdc>
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
		return 0;
1a00151e:	2000      	movs	r0, #0
	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
}
1a001520:	b003      	add	sp, #12
1a001522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a001526:	bf00      	nop
1a001528:	1a002b34 	.word	0x1a002b34

1a00152c <Chip_UART_GetABEOStatus>:

/* UART interrupt service routine */
FlagStatus Chip_UART_GetABEOStatus(LPC_USART_T *pUART)
{
	(void) pUART;
	return ABsyncSts;
1a00152c:	4b01      	ldr	r3, [pc, #4]	; (1a001534 <Chip_UART_GetABEOStatus+0x8>)
1a00152e:	7818      	ldrb	r0, [r3, #0]
}
1a001530:	4770      	bx	lr
1a001532:	bf00      	nop
1a001534:	1000004a 	.word	0x1000004a

1a001538 <Chip_UART_ABCmd>:
/* Start/Stop Auto Baudrate activity */
void Chip_UART_ABCmd(LPC_USART_T *pUART, uint32_t mode, bool autorestart, FunctionalState NewState)
{
    uint32_t tmp = 0;

	if (NewState == ENABLE) {
1a001538:	2b01      	cmp	r3, #1
1a00153a:	d116      	bne.n	1a00156a <Chip_UART_ABCmd+0x32>
		/* Clear DLL and DLM value */
		pUART->LCR |= UART_LCR_DLAB_EN;
1a00153c:	68c3      	ldr	r3, [r0, #12]
1a00153e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001542:	60c3      	str	r3, [r0, #12]
		pUART->DLL = 0;
1a001544:	2300      	movs	r3, #0
1a001546:	6003      	str	r3, [r0, #0]
		pUART->DLM = 0;
1a001548:	6043      	str	r3, [r0, #4]
		pUART->LCR &= ~UART_LCR_DLAB_EN;
1a00154a:	68c3      	ldr	r3, [r0, #12]
1a00154c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001550:	60c3      	str	r3, [r0, #12]

		/* FDR value must be reset to default value */
		pUART->FDR = 0x10;
1a001552:	2310      	movs	r3, #16
1a001554:	6283      	str	r3, [r0, #40]	; 0x28

		if (mode == UART_ACR_MODE1) {
1a001556:	2901      	cmp	r1, #1
1a001558:	d101      	bne.n	1a00155e <Chip_UART_ABCmd+0x26>
			tmp = UART_ACR_START | UART_ACR_MODE;
1a00155a:	2303      	movs	r3, #3
1a00155c:	e000      	b.n	1a001560 <Chip_UART_ABCmd+0x28>
		}
		else {
			tmp = UART_ACR_START;
1a00155e:	2301      	movs	r3, #1
		}

		if (autorestart == true) {
1a001560:	b10a      	cbz	r2, 1a001566 <Chip_UART_ABCmd+0x2e>
			tmp |= UART_ACR_AUTO_RESTART;
1a001562:	f043 0304 	orr.w	r3, r3, #4
		}
		pUART->ACR = tmp;
1a001566:	6203      	str	r3, [r0, #32]
1a001568:	4770      	bx	lr
	}
	else {
		pUART->ACR = 0;
1a00156a:	2300      	movs	r3, #0
1a00156c:	6203      	str	r3, [r0, #32]
1a00156e:	4770      	bx	lr

1a001570 <RingBuffer_Init>:
 ****************************************************************************/

/* Initialize ring buffer */
int RingBuffer_Init(RINGBUFF_T *RingBuff, void *buffer, int itemSize, int count)
{
	RingBuff->data = buffer;
1a001570:	6001      	str	r1, [r0, #0]
	RingBuff->count = count;
1a001572:	6043      	str	r3, [r0, #4]
	RingBuff->itemSz = itemSize;
1a001574:	6082      	str	r2, [r0, #8]
	RingBuff->head = RingBuff->tail = 0;
1a001576:	2300      	movs	r3, #0
1a001578:	6103      	str	r3, [r0, #16]
1a00157a:	60c3      	str	r3, [r0, #12]

	return 1;
}
1a00157c:	2001      	movs	r0, #1
1a00157e:	4770      	bx	lr

1a001580 <RingBuffer_Insert>:

/* Insert a single item into Ring Buffer */
int RingBuffer_Insert(RINGBUFF_T *RingBuff, const void *data)
{
1a001580:	b538      	push	{r3, r4, r5, lr}
	uint8_t *ptr = RingBuff->data;
1a001582:	6805      	ldr	r5, [r0, #0]
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Number of items in the ring buffer
 */
STATIC INLINE int RingBuffer_GetCount(RINGBUFF_T *RingBuff)
{
	return RB_VHEAD(RingBuff) - RB_VTAIL(RingBuff);
1a001584:	68c3      	ldr	r3, [r0, #12]
1a001586:	6902      	ldr	r2, [r0, #16]
1a001588:	1a9b      	subs	r3, r3, r2
 * @param	RingBuff	: Pointer to ring buffer
 * @return	1 if the ring buffer is full, otherwise 0
 */
STATIC INLINE int RingBuffer_IsFull(RINGBUFF_T *RingBuff)
{
	return (RingBuffer_GetCount(RingBuff) >= RingBuff->count);
1a00158a:	6842      	ldr	r2, [r0, #4]

	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
1a00158c:	4293      	cmp	r3, r2
1a00158e:	da0d      	bge.n	1a0015ac <RingBuffer_Insert+0x2c>
1a001590:	4604      	mov	r4, r0
		return 0;

	ptr += RB_INDH(RingBuff) * RingBuff->itemSz;
1a001592:	68c0      	ldr	r0, [r0, #12]
1a001594:	3a01      	subs	r2, #1
1a001596:	4010      	ands	r0, r2
1a001598:	68a2      	ldr	r2, [r4, #8]
	memcpy(ptr, data, RingBuff->itemSz);
1a00159a:	fb02 5000 	mla	r0, r2, r0, r5
1a00159e:	f001 f9bd 	bl	1a00291c <memcpy>
	RingBuff->head++;
1a0015a2:	68e3      	ldr	r3, [r4, #12]
1a0015a4:	3301      	adds	r3, #1
1a0015a6:	60e3      	str	r3, [r4, #12]

	return 1;
1a0015a8:	2001      	movs	r0, #1
1a0015aa:	bd38      	pop	{r3, r4, r5, pc}
{
	uint8_t *ptr = RingBuff->data;

	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
		return 0;
1a0015ac:	2000      	movs	r0, #0
	ptr += RB_INDH(RingBuff) * RingBuff->itemSz;
	memcpy(ptr, data, RingBuff->itemSz);
	RingBuff->head++;

	return 1;
}
1a0015ae:	bd38      	pop	{r3, r4, r5, pc}

1a0015b0 <RingBuffer_InsertMult>:

/* Insert multiple items into Ring Buffer */
int RingBuffer_InsertMult(RINGBUFF_T *RingBuff, const void *data, int num)
{
1a0015b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t *ptr = RingBuff->data;
1a0015b4:	f8d0 e000 	ldr.w	lr, [r0]
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Number of items in the ring buffer
 */
STATIC INLINE int RingBuffer_GetCount(RINGBUFF_T *RingBuff)
{
	return RB_VHEAD(RingBuff) - RB_VTAIL(RingBuff);
1a0015b8:	68c3      	ldr	r3, [r0, #12]
1a0015ba:	6904      	ldr	r4, [r0, #16]
1a0015bc:	1b1c      	subs	r4, r3, r4
 * @param	RingBuff	: Pointer to ring buffer
 * @return	1 if the ring buffer is full, otherwise 0
 */
STATIC INLINE int RingBuffer_IsFull(RINGBUFF_T *RingBuff)
{
	return (RingBuffer_GetCount(RingBuff) >= RingBuff->count);
1a0015be:	6843      	ldr	r3, [r0, #4]
	int cnt1, cnt2;

	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
1a0015c0:	429c      	cmp	r4, r3
1a0015c2:	da3a      	bge.n	1a00163a <RingBuffer_InsertMult+0x8a>
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Number of items in the ring buffer
 */
STATIC INLINE int RingBuffer_GetCount(RINGBUFF_T *RingBuff)
{
	return RB_VHEAD(RingBuff) - RB_VTAIL(RingBuff);
1a0015c4:	68c6      	ldr	r6, [r0, #12]
1a0015c6:	6905      	ldr	r5, [r0, #16]
1a0015c8:	1b76      	subs	r6, r6, r5
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Number of free items in the ring buffer
 */
STATIC INLINE int RingBuffer_GetFree(RINGBUFF_T *RingBuff)
{
	return RingBuff->count - RingBuffer_GetCount(RingBuff);
1a0015ca:	1b9e      	subs	r6, r3, r6
		return 0;

	/* Calculate the segment lengths */
	cnt1 = cnt2 = RingBuffer_GetFree(RingBuff);
	if (RB_INDH(RingBuff) + cnt1 >= RingBuff->count)
1a0015cc:	68c4      	ldr	r4, [r0, #12]
1a0015ce:	f103 3cff 	add.w	ip, r3, #4294967295
1a0015d2:	ea04 0c0c 	and.w	ip, r4, ip
1a0015d6:	eb0c 0406 	add.w	r4, ip, r6
1a0015da:	429c      	cmp	r4, r3
1a0015dc:	d302      	bcc.n	1a0015e4 <RingBuffer_InsertMult+0x34>
		cnt1 = RingBuff->count - RB_INDH(RingBuff);
1a0015de:	ebcc 0303 	rsb	r3, ip, r3
1a0015e2:	e000      	b.n	1a0015e6 <RingBuffer_InsertMult+0x36>
	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
		return 0;

	/* Calculate the segment lengths */
	cnt1 = cnt2 = RingBuffer_GetFree(RingBuff);
1a0015e4:	4633      	mov	r3, r6
1a0015e6:	460f      	mov	r7, r1
1a0015e8:	4604      	mov	r4, r0
	if (RB_INDH(RingBuff) + cnt1 >= RingBuff->count)
		cnt1 = RingBuff->count - RB_INDH(RingBuff);
	cnt2 -= cnt1;
1a0015ea:	1af6      	subs	r6, r6, r3

	cnt1 = MIN(cnt1, num);
1a0015ec:	4293      	cmp	r3, r2
1a0015ee:	bfa8      	it	ge
1a0015f0:	4613      	movge	r3, r2
1a0015f2:	4698      	mov	r8, r3
	num -= cnt1;
1a0015f4:	1ad5      	subs	r5, r2, r3

	cnt2 = MIN(cnt2, num);
1a0015f6:	42b5      	cmp	r5, r6
1a0015f8:	bfa8      	it	ge
1a0015fa:	4635      	movge	r5, r6
	num -= cnt2;

	/* Write segment 1 */
	ptr += RB_INDH(RingBuff) * RingBuff->itemSz;
1a0015fc:	6882      	ldr	r2, [r0, #8]
	memcpy(ptr, data, cnt1 * RingBuff->itemSz);
1a0015fe:	fb02 e00c 	mla	r0, r2, ip, lr
1a001602:	fb02 f203 	mul.w	r2, r2, r3
1a001606:	f001 f989 	bl	1a00291c <memcpy>
	RingBuff->head += cnt1;
1a00160a:	68e3      	ldr	r3, [r4, #12]
1a00160c:	eb08 0203 	add.w	r2, r8, r3
1a001610:	60e2      	str	r2, [r4, #12]

	/* Write segment 2 */
	ptr = (uint8_t *) RingBuff->data + RB_INDH(RingBuff) * RingBuff->itemSz;
1a001612:	6820      	ldr	r0, [r4, #0]
1a001614:	6863      	ldr	r3, [r4, #4]
1a001616:	3b01      	subs	r3, #1
1a001618:	4013      	ands	r3, r2
1a00161a:	68a2      	ldr	r2, [r4, #8]
	data = (const uint8_t *) data + cnt1 * RingBuff->itemSz;
	memcpy(ptr, data, cnt2 * RingBuff->itemSz);
1a00161c:	fb02 0003 	mla	r0, r2, r3, r0
1a001620:	fb02 7108 	mla	r1, r2, r8, r7
1a001624:	fb02 f205 	mul.w	r2, r2, r5
1a001628:	f001 f978 	bl	1a00291c <memcpy>
	RingBuff->head += cnt2;
1a00162c:	68e3      	ldr	r3, [r4, #12]
1a00162e:	442b      	add	r3, r5
1a001630:	60e3      	str	r3, [r4, #12]

	return cnt1 + cnt2;
1a001632:	eb08 0005 	add.w	r0, r8, r5
1a001636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t *ptr = RingBuff->data;
	int cnt1, cnt2;

	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
		return 0;
1a00163a:	2000      	movs	r0, #0
	data = (const uint8_t *) data + cnt1 * RingBuff->itemSz;
	memcpy(ptr, data, cnt2 * RingBuff->itemSz);
	RingBuff->head += cnt2;

	return cnt1 + cnt2;
}
1a00163c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a001640 <RingBuffer_Pop>:

/* Pop single item from Ring Buffer */
int RingBuffer_Pop(RINGBUFF_T *RingBuff, void *data)
{
1a001640:	b538      	push	{r3, r4, r5, lr}
	uint8_t *ptr = RingBuff->data;
1a001642:	6805      	ldr	r5, [r0, #0]
 * @param	RingBuff	: Pointer to ring buffer
 * @return	1 if the ring buffer is empty, otherwise 0
 */
STATIC INLINE int RingBuffer_IsEmpty(RINGBUFF_T *RingBuff)
{
	return RB_VHEAD(RingBuff) == RB_VTAIL(RingBuff);
1a001644:	68c2      	ldr	r2, [r0, #12]
1a001646:	6903      	ldr	r3, [r0, #16]

	/* We cannot pop when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
1a001648:	429a      	cmp	r2, r3
1a00164a:	d00f      	beq.n	1a00166c <RingBuffer_Pop+0x2c>
1a00164c:	4604      	mov	r4, r0
		return 0;

	ptr += RB_INDT(RingBuff) * RingBuff->itemSz;
1a00164e:	6902      	ldr	r2, [r0, #16]
1a001650:	6843      	ldr	r3, [r0, #4]
1a001652:	3b01      	subs	r3, #1
1a001654:	4013      	ands	r3, r2
1a001656:	6882      	ldr	r2, [r0, #8]
	memcpy(data, ptr, RingBuff->itemSz);
1a001658:	4608      	mov	r0, r1
1a00165a:	fb02 5103 	mla	r1, r2, r3, r5
1a00165e:	f001 f95d 	bl	1a00291c <memcpy>
	RingBuff->tail++;
1a001662:	6923      	ldr	r3, [r4, #16]
1a001664:	3301      	adds	r3, #1
1a001666:	6123      	str	r3, [r4, #16]

	return 1;
1a001668:	2001      	movs	r0, #1
1a00166a:	bd38      	pop	{r3, r4, r5, pc}
{
	uint8_t *ptr = RingBuff->data;

	/* We cannot pop when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
		return 0;
1a00166c:	2000      	movs	r0, #0
	ptr += RB_INDT(RingBuff) * RingBuff->itemSz;
	memcpy(data, ptr, RingBuff->itemSz);
	RingBuff->tail++;

	return 1;
}
1a00166e:	bd38      	pop	{r3, r4, r5, pc}

1a001670 <RingBuffer_PopMult>:

/* Pop multiple items from Ring buffer */
int RingBuffer_PopMult(RINGBUFF_T *RingBuff, void *data, int num)
{
1a001670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t *ptr = RingBuff->data;
1a001672:	f8d0 e000 	ldr.w	lr, [r0]
1a001676:	68c4      	ldr	r4, [r0, #12]
1a001678:	6903      	ldr	r3, [r0, #16]
	int cnt1, cnt2;

	/* We cannot insert when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
1a00167a:	429c      	cmp	r4, r3
1a00167c:	d037      	beq.n	1a0016ee <RingBuffer_PopMult+0x7e>
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Number of items in the ring buffer
 */
STATIC INLINE int RingBuffer_GetCount(RINGBUFF_T *RingBuff)
{
	return RB_VHEAD(RingBuff) - RB_VTAIL(RingBuff);
1a00167e:	68c3      	ldr	r3, [r0, #12]
1a001680:	6904      	ldr	r4, [r0, #16]
1a001682:	1b1b      	subs	r3, r3, r4
		return 0;

	/* Calculate the segment lengths */
	cnt1 = cnt2 = RingBuffer_GetCount(RingBuff);
	if (RB_INDT(RingBuff) + cnt1 >= RingBuff->count)
1a001684:	6904      	ldr	r4, [r0, #16]
1a001686:	6846      	ldr	r6, [r0, #4]
1a001688:	f106 3cff 	add.w	ip, r6, #4294967295
1a00168c:	ea04 0c0c 	and.w	ip, r4, ip
1a001690:	eb0c 0403 	add.w	r4, ip, r3
1a001694:	42b4      	cmp	r4, r6
1a001696:	d302      	bcc.n	1a00169e <RingBuffer_PopMult+0x2e>
		cnt1 = RingBuff->count - RB_INDT(RingBuff);
1a001698:	ebcc 0606 	rsb	r6, ip, r6
1a00169c:	e000      	b.n	1a0016a0 <RingBuffer_PopMult+0x30>
	/* We cannot insert when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
		return 0;

	/* Calculate the segment lengths */
	cnt1 = cnt2 = RingBuffer_GetCount(RingBuff);
1a00169e:	461e      	mov	r6, r3
1a0016a0:	460f      	mov	r7, r1
1a0016a2:	4605      	mov	r5, r0
	if (RB_INDT(RingBuff) + cnt1 >= RingBuff->count)
		cnt1 = RingBuff->count - RB_INDT(RingBuff);
	cnt2 -= cnt1;
1a0016a4:	1b9b      	subs	r3, r3, r6

	cnt1 = MIN(cnt1, num);
1a0016a6:	4296      	cmp	r6, r2
1a0016a8:	bfa8      	it	ge
1a0016aa:	4616      	movge	r6, r2
	num -= cnt1;
1a0016ac:	1b94      	subs	r4, r2, r6

	cnt2 = MIN(cnt2, num);
1a0016ae:	429c      	cmp	r4, r3
1a0016b0:	bfa8      	it	ge
1a0016b2:	461c      	movge	r4, r3
	num -= cnt2;

	/* Write segment 1 */
	ptr += RB_INDT(RingBuff) * RingBuff->itemSz;
1a0016b4:	6882      	ldr	r2, [r0, #8]
	memcpy(data, ptr, cnt1 * RingBuff->itemSz);
1a0016b6:	4608      	mov	r0, r1
1a0016b8:	fb02 e10c 	mla	r1, r2, ip, lr
1a0016bc:	fb02 f206 	mul.w	r2, r2, r6
1a0016c0:	f001 f92c 	bl	1a00291c <memcpy>
	RingBuff->tail += cnt1;
1a0016c4:	692b      	ldr	r3, [r5, #16]
1a0016c6:	18f2      	adds	r2, r6, r3
1a0016c8:	612a      	str	r2, [r5, #16]

	/* Write segment 2 */
	ptr = (uint8_t *) RingBuff->data + RB_INDT(RingBuff) * RingBuff->itemSz;
1a0016ca:	6829      	ldr	r1, [r5, #0]
1a0016cc:	686b      	ldr	r3, [r5, #4]
1a0016ce:	3b01      	subs	r3, #1
1a0016d0:	4013      	ands	r3, r2
1a0016d2:	68aa      	ldr	r2, [r5, #8]
	data = (uint8_t *) data + cnt1 * RingBuff->itemSz;
	memcpy(data, ptr, cnt2 * RingBuff->itemSz);
1a0016d4:	fb02 7006 	mla	r0, r2, r6, r7
1a0016d8:	fb02 1103 	mla	r1, r2, r3, r1
1a0016dc:	fb02 f204 	mul.w	r2, r2, r4
1a0016e0:	f001 f91c 	bl	1a00291c <memcpy>
	RingBuff->tail += cnt2;
1a0016e4:	692b      	ldr	r3, [r5, #16]
1a0016e6:	4423      	add	r3, r4
1a0016e8:	612b      	str	r3, [r5, #16]

	return cnt1 + cnt2;
1a0016ea:	1930      	adds	r0, r6, r4
1a0016ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t *ptr = RingBuff->data;
	int cnt1, cnt2;

	/* We cannot insert when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
		return 0;
1a0016ee:	2000      	movs	r0, #0
	data = (uint8_t *) data + cnt1 * RingBuff->itemSz;
	memcpy(data, ptr, cnt2 * RingBuff->itemSz);
	RingBuff->tail += cnt2;

	return cnt1 + cnt2;
}
1a0016f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0016f2:	bf00      	nop

1a0016f4 <Chip_USB_PllSetup>:
/*****************************************************************************
 * Private functions
 ****************************************************************************/

static void Chip_USB_PllSetup(void)
{
1a0016f4:	b508      	push	{r3, lr}
	/* No need to setup anything if PLL is already setup for the frequency */
	if (Chip_Clock_GetClockInputHz(CLKIN_USBPLL) == usbPLLSetup.freq)
1a0016f6:	2007      	movs	r0, #7
1a0016f8:	f000 f9de 	bl	1a001ab8 <Chip_Clock_GetClockInputHz>
1a0016fc:	4b08      	ldr	r3, [pc, #32]	; (1a001720 <Chip_USB_PllSetup+0x2c>)
1a0016fe:	4298      	cmp	r0, r3
1a001700:	d00d      	beq.n	1a00171e <Chip_USB_PllSetup+0x2a>
		return ;

	/* Setup default USB PLL state for a 480MHz output and attach */
	Chip_Clock_SetupPLL(CLKIN_CRYSTAL, CGU_USB_PLL, &usbPLLSetup);
1a001702:	2006      	movs	r0, #6
1a001704:	2100      	movs	r1, #0
1a001706:	4a07      	ldr	r2, [pc, #28]	; (1a001724 <Chip_USB_PllSetup+0x30>)
1a001708:	f000 fc90 	bl	1a00202c <Chip_Clock_SetupPLL>

	/* enable USB PLL */
	Chip_Clock_EnablePLL(CGU_USB_PLL);
1a00170c:	2000      	movs	r0, #0
1a00170e:	f000 fcad 	bl	1a00206c <Chip_Clock_EnablePLL>

	/* Wait for PLL lock */
	while (!(Chip_Clock_GetPLLStatus(CGU_USB_PLL) & CGU_PLL_LOCKED)) {}
1a001712:	2000      	movs	r0, #0
1a001714:	f000 fcbe 	bl	1a002094 <Chip_Clock_GetPLLStatus>
1a001718:	f010 0f01 	tst.w	r0, #1
1a00171c:	d0f9      	beq.n	1a001712 <Chip_USB_PllSetup+0x1e>
1a00171e:	bd08      	pop	{r3, pc}
1a001720:	1c9c3800 	.word	0x1c9c3800
1a001724:	1a002b44 	.word	0x1a002b44

1a001728 <Chip_USB0_Init>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/

void Chip_USB0_Init(void)
{
1a001728:	b508      	push	{r3, lr}
	/* Set up USB PLL */
	Chip_USB_PllSetup();
1a00172a:	f7ff ffe3 	bl	1a0016f4 <Chip_USB_PllSetup>

	/* Setup USB0 base clock as clock out from USB PLL */
	Chip_Clock_SetBaseClock( CLK_BASE_USB0, CLKIN_USBPLL, true, true);
1a00172e:	2001      	movs	r0, #1
1a001730:	2107      	movs	r1, #7
1a001732:	4602      	mov	r2, r0
1a001734:	4603      	mov	r3, r0
1a001736:	f000 fb4d 	bl	1a001dd4 <Chip_Clock_SetBaseClock>

	/* enable USB main clock */
	Chip_Clock_EnableBaseClock(CLK_BASE_USB0);
1a00173a:	2001      	movs	r0, #1
1a00173c:	f000 fb86 	bl	1a001e4c <Chip_Clock_EnableBaseClock>
	Chip_Clock_EnableOpts(CLK_MX_USB0, true, true, 1);
1a001740:	2065      	movs	r0, #101	; 0x65
1a001742:	2101      	movs	r1, #1
1a001744:	460a      	mov	r2, r1
1a001746:	460b      	mov	r3, r1
1a001748:	f000 fbc0 	bl	1a001ecc <Chip_Clock_EnableOpts>
 * @note	The USB0 PLL & clock should be configured before calling this function. This function
 * should be called before the USB0 registers are accessed.
 */
STATIC INLINE void Chip_CREG_EnableUSB0Phy(void)
{
	LPC_CREG->CREG0 &= ~(1 << 5);
1a00174c:	4a02      	ldr	r2, [pc, #8]	; (1a001758 <Chip_USB0_Init+0x30>)
1a00174e:	6853      	ldr	r3, [r2, #4]
1a001750:	f023 0320 	bic.w	r3, r3, #32
1a001754:	6053      	str	r3, [r2, #4]
1a001756:	bd08      	pop	{r3, pc}
1a001758:	40043000 	.word	0x40043000

1a00175c <Chip_USB1_Init>:
	/* enable USB0 phy */
	Chip_CREG_EnableUSB0Phy();
}

void Chip_USB1_Init(void)
{
1a00175c:	b508      	push	{r3, lr}
	/* Setup and enable the PLL */
	Chip_USB_PllSetup();
1a00175e:	f7ff ffc9 	bl	1a0016f4 <Chip_USB_PllSetup>

	/* USB1 needs a 60MHz clock. To get it, a divider of 4 and then 2 are
	   chained to make a divide by 8 function. Connect the output of
	   divider D to the USB1 base clock. */
	Chip_Clock_SetDivider(CLK_IDIV_A, CLKIN_USBPLL, 4);
1a001762:	2000      	movs	r0, #0
1a001764:	2107      	movs	r1, #7
1a001766:	2204      	movs	r2, #4
1a001768:	f000 f960 	bl	1a001a2c <Chip_Clock_SetDivider>
	Chip_Clock_SetDivider(CLK_IDIV_D, CLKIN_IDIVA, 2);
1a00176c:	2003      	movs	r0, #3
1a00176e:	210c      	movs	r1, #12
1a001770:	2202      	movs	r2, #2
1a001772:	f000 f95b 	bl	1a001a2c <Chip_Clock_SetDivider>
	Chip_Clock_SetBaseClock(CLK_BASE_USB1, CLKIN_IDIVD, true, true);
1a001776:	2003      	movs	r0, #3
1a001778:	210f      	movs	r1, #15
1a00177a:	2201      	movs	r2, #1
1a00177c:	4613      	mov	r3, r2
1a00177e:	f000 fb29 	bl	1a001dd4 <Chip_Clock_SetBaseClock>

	/* enable USB main clock */
	Chip_Clock_EnableBaseClock(CLK_BASE_USB1);
1a001782:	2003      	movs	r0, #3
1a001784:	f000 fb62 	bl	1a001e4c <Chip_Clock_EnableBaseClock>
	Chip_Clock_EnableOpts(CLK_MX_USB1, true, true, 1);
1a001788:	206e      	movs	r0, #110	; 0x6e
1a00178a:	2101      	movs	r1, #1
1a00178c:	460a      	mov	r2, r1
1a00178e:	460b      	mov	r3, r1
1a001790:	f000 fb9c 	bl	1a001ecc <Chip_Clock_EnableOpts>
	/* enable USB1_DP and USB1_DN on chip FS phy.*/
	LPC_SCU->SFSUSB = 0x12;
1a001794:	2212      	movs	r2, #18
1a001796:	4b02      	ldr	r3, [pc, #8]	; (1a0017a0 <Chip_USB1_Init+0x44>)
1a001798:	f8c3 2c80 	str.w	r2, [r3, #3200]	; 0xc80
1a00179c:	bd08      	pop	{r3, pc}
1a00179e:	bf00      	nop
1a0017a0:	40086000 	.word	0x40086000

1a0017a4 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a0017a4:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a0017a6:	2069      	movs	r0, #105	; 0x69
1a0017a8:	f000 fc02 	bl	1a001fb0 <Chip_Clock_GetRate>
1a0017ac:	4b01      	ldr	r3, [pc, #4]	; (1a0017b4 <SystemCoreClockUpdate+0x10>)
1a0017ae:	6018      	str	r0, [r3, #0]
1a0017b0:	bd08      	pop	{r3, pc}
1a0017b2:	bf00      	nop
1a0017b4:	10000158 	.word	0x10000158

1a0017b8 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0017b8:	b5f0      	push	{r4, r5, r6, r7, lr}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a0017ba:	680b      	ldr	r3, [r1, #0]
1a0017bc:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0017c0:	d002      	beq.n	1a0017c8 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a0017c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0017c6:	600b      	str	r3, [r1, #0]
1a0017c8:	4686      	mov	lr, r0
1a0017ca:	2601      	movs	r6, #1
1a0017cc:	e041      	b.n	1a001852 <pll_calc_divs+0x9a>
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
1a0017ce:	680d      	ldr	r5, [r1, #0]
1a0017d0:	f015 0f40 	tst.w	r5, #64	; 0x40
1a0017d4:	d008      	beq.n	1a0017e8 <pll_calc_divs+0x30>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a0017d6:	1c7b      	adds	r3, r7, #1
1a0017d8:	fa04 f203 	lsl.w	r2, r4, r3
1a0017dc:	694b      	ldr	r3, [r1, #20]
1a0017de:	fb03 f302 	mul.w	r3, r3, r2
1a0017e2:	fbb3 f3f6 	udiv	r3, r3, r6
1a0017e6:	e004      	b.n	1a0017f2 <pll_calc_divs+0x3a>
				} else {
					fcco = (m * ppll->fin) / n;
1a0017e8:	694b      	ldr	r3, [r1, #20]
1a0017ea:	fb04 f303 	mul.w	r3, r4, r3
1a0017ee:	fbb3 f3f6 	udiv	r3, r3, r6
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a0017f2:	4a19      	ldr	r2, [pc, #100]	; (1a001858 <pll_calc_divs+0xa0>)
1a0017f4:	4293      	cmp	r3, r2
1a0017f6:	d920      	bls.n	1a00183a <pll_calc_divs+0x82>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a0017f8:	4a18      	ldr	r2, [pc, #96]	; (1a00185c <pll_calc_divs+0xa4>)
1a0017fa:	4293      	cmp	r3, r2
1a0017fc:	d823      	bhi.n	1a001846 <pll_calc_divs+0x8e>
				if (ppll->ctrl & (1 << 7)) {
1a0017fe:	f015 0f80 	tst.w	r5, #128	; 0x80
1a001802:	d103      	bne.n	1a00180c <pll_calc_divs+0x54>
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
1a001804:	1c7a      	adds	r2, r7, #1
1a001806:	fa23 f202 	lsr.w	r2, r3, r2
1a00180a:	e000      	b.n	1a00180e <pll_calc_divs+0x56>
					fcco = (m * ppll->fin) / n;
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a00180c:	461a      	mov	r2, r3
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a00180e:	1a85      	subs	r5, r0, r2
1a001810:	d502      	bpl.n	1a001818 <pll_calc_divs+0x60>
		return -val;
1a001812:	f1c5 0c00 	rsb	ip, r5, #0
1a001816:	e000      	b.n	1a00181a <pll_calc_divs+0x62>
	return val;
1a001818:	46ac      	mov	ip, r5
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a00181a:	45e6      	cmp	lr, ip
1a00181c:	d90d      	bls.n	1a00183a <pll_calc_divs+0x82>
					ppll->nsel = n;
1a00181e:	608e      	str	r6, [r1, #8]
					ppll->psel = p + 1;
1a001820:	f107 0e01 	add.w	lr, r7, #1
1a001824:	f8c1 e00c 	str.w	lr, [r1, #12]
					ppll->msel = m;
1a001828:	610c      	str	r4, [r1, #16]
					ppll->fout = fout;
1a00182a:	618a      	str	r2, [r1, #24]
					ppll->fcco = fcco;
1a00182c:	61cb      	str	r3, [r1, #28]
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a00182e:	2d00      	cmp	r5, #0
1a001830:	da02      	bge.n	1a001838 <pll_calc_divs+0x80>
		return -val;
1a001832:	f1c5 0e00 	rsb	lr, r5, #0
1a001836:	e000      	b.n	1a00183a <pll_calc_divs+0x82>
	return val;
1a001838:	46ae      	mov	lr, r5
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
			for (m = 1; m <= 256; m++) {
1a00183a:	3401      	adds	r4, #1
1a00183c:	e000      	b.n	1a001840 <pll_calc_divs+0x88>
1a00183e:	2401      	movs	r4, #1
1a001840:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
1a001844:	ddc3      	ble.n	1a0017ce <pll_calc_divs+0x16>
	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a001846:	3701      	adds	r7, #1
1a001848:	e000      	b.n	1a00184c <pll_calc_divs+0x94>
1a00184a:	2700      	movs	r7, #0
1a00184c:	2f03      	cmp	r7, #3
1a00184e:	ddf6      	ble.n	1a00183e <pll_calc_divs+0x86>

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
1a001850:	3601      	adds	r6, #1
1a001852:	2e04      	cmp	r6, #4
1a001854:	ddf9      	ble.n	1a00184a <pll_calc_divs+0x92>
					prev = ABS(freq - fout);
				}
			}
		}
	}
}
1a001856:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a001858:	094c5eff 	.word	0x094c5eff
1a00185c:	1312d000 	.word	0x1312d000

1a001860 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001860:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001862:	b099      	sub	sp, #100	; 0x64
1a001864:	4605      	mov	r5, r0
1a001866:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a001868:	4668      	mov	r0, sp
1a00186a:	2100      	movs	r1, #0
1a00186c:	2260      	movs	r2, #96	; 0x60
1a00186e:	f001 f860 	bl	1a002932 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a001872:	2380      	movs	r3, #128	; 0x80
1a001874:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a001876:	6963      	ldr	r3, [r4, #20]
1a001878:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a00187a:	7923      	ldrb	r3, [r4, #4]
1a00187c:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a001880:	4628      	mov	r0, r5
1a001882:	4669      	mov	r1, sp
1a001884:	f7ff ff98 	bl	1a0017b8 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a001888:	9b06      	ldr	r3, [sp, #24]
1a00188a:	42ab      	cmp	r3, r5
1a00188c:	d107      	bne.n	1a00189e <pll_get_frac+0x3e>
		*ppll = pll[0];
1a00188e:	466d      	mov	r5, sp
1a001890:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001892:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001894:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001898:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a00189c:	e05e      	b.n	1a00195c <pll_get_frac+0xfc>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a00189e:	1aeb      	subs	r3, r5, r3
1a0018a0:	d500      	bpl.n	1a0018a4 <pll_get_frac+0x44>
		return -val;
1a0018a2:	425b      	negs	r3, r3
	pll_calc_divs(freq, &pll[0]);
	if (pll[0].fout == freq) {
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a0018a4:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a0018a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0018a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0018ac:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a0018ae:	6963      	ldr	r3, [r4, #20]
1a0018b0:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a0018b2:	7923      	ldrb	r3, [r4, #4]
1a0018b4:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a0018b8:	4628      	mov	r0, r5
1a0018ba:	a910      	add	r1, sp, #64	; 0x40
1a0018bc:	f7ff ff7c 	bl	1a0017b8 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a0018c0:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a0018c2:	42ab      	cmp	r3, r5
1a0018c4:	d107      	bne.n	1a0018d6 <pll_get_frac+0x76>
		*ppll = pll[2];
1a0018c6:	ad10      	add	r5, sp, #64	; 0x40
1a0018c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0018ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0018cc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0018d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a0018d4:	e042      	b.n	1a00195c <pll_get_frac+0xfc>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a0018d6:	1aeb      	subs	r3, r5, r3
1a0018d8:	d500      	bpl.n	1a0018dc <pll_get_frac+0x7c>
		return -val;
1a0018da:	425b      	negs	r3, r3
	pll_calc_divs(freq, &pll[2]);
	if (pll[2].fout == freq) {
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a0018dc:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a0018de:	4b20      	ldr	r3, [pc, #128]	; (1a001960 <pll_get_frac+0x100>)
1a0018e0:	429d      	cmp	r5, r3
1a0018e2:	d812      	bhi.n	1a00190a <pll_get_frac+0xaa>
		/* Try integer mode */
		pll[1].ctrl = (1 << 6);
1a0018e4:	2340      	movs	r3, #64	; 0x40
1a0018e6:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a0018e8:	6963      	ldr	r3, [r4, #20]
1a0018ea:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a0018ec:	4628      	mov	r0, r5
1a0018ee:	a908      	add	r1, sp, #32
1a0018f0:	f7ff ff62 	bl	1a0017b8 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a0018f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0018f6:	42ab      	cmp	r3, r5
1a0018f8:	d107      	bne.n	1a00190a <pll_get_frac+0xaa>
			*ppll = pll[1];
1a0018fa:	ad08      	add	r5, sp, #32
1a0018fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0018fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001900:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001904:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a001908:	e028      	b.n	1a00195c <pll_get_frac+0xfc>
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a00190a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a00190c:	1aed      	subs	r5, r5, r3
1a00190e:	d500      	bpl.n	1a001912 <pll_get_frac+0xb2>
		return -val;
1a001910:	426d      	negs	r5, r5
		}
	}
	diff[1] = ABS(freq - pll[1].fout);

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a001912:	42ae      	cmp	r6, r5
1a001914:	dc11      	bgt.n	1a00193a <pll_get_frac+0xda>
		if (diff[0] <= diff[2]) {
1a001916:	42be      	cmp	r6, r7
1a001918:	dc07      	bgt.n	1a00192a <pll_get_frac+0xca>
			*ppll = pll[0];
1a00191a:	466d      	mov	r5, sp
1a00191c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00191e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001920:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001924:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001928:	e018      	b.n	1a00195c <pll_get_frac+0xfc>
		} else {
			*ppll = pll[2];
1a00192a:	ad10      	add	r5, sp, #64	; 0x40
1a00192c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00192e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001930:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001934:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001938:	e010      	b.n	1a00195c <pll_get_frac+0xfc>
		}
	} else {
		if (diff[1] <= diff[2]) {
1a00193a:	42af      	cmp	r7, r5
1a00193c:	db07      	blt.n	1a00194e <pll_get_frac+0xee>
			*ppll = pll[1];
1a00193e:	ad08      	add	r5, sp, #32
1a001940:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001942:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001944:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001948:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00194c:	e006      	b.n	1a00195c <pll_get_frac+0xfc>
		} else {
			*ppll = pll[2];
1a00194e:	ad10      	add	r5, sp, #64	; 0x40
1a001950:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001952:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001954:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001958:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}
	}
}
1a00195c:	b019      	add	sp, #100	; 0x64
1a00195e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a001960:	068e7780 	.word	0x068e7780

1a001964 <Chip_Clock_TestMainPLLMultiplier>:

/* Test PLL input values for a specific frequency range */
static uint32_t Chip_Clock_TestMainPLLMultiplier(uint32_t InputHz, uint32_t TestMult, uint32_t MinHz, uint32_t MaxHz)
{
	uint32_t TestHz = TestMult * InputHz;
1a001964:	fb00 f001 	mul.w	r0, r0, r1

	if ((TestHz < MinHz) || (TestHz > MAX_CLOCK_FREQ) || (TestHz > MaxHz)) {
1a001968:	4290      	cmp	r0, r2
1a00196a:	d305      	bcc.n	1a001978 <Chip_Clock_TestMainPLLMultiplier+0x14>
1a00196c:	4a05      	ldr	r2, [pc, #20]	; (1a001984 <Chip_Clock_TestMainPLLMultiplier+0x20>)
1a00196e:	4290      	cmp	r0, r2
1a001970:	d804      	bhi.n	1a00197c <Chip_Clock_TestMainPLLMultiplier+0x18>
1a001972:	4298      	cmp	r0, r3
1a001974:	d804      	bhi.n	1a001980 <Chip_Clock_TestMainPLLMultiplier+0x1c>
1a001976:	4770      	bx	lr
		TestHz = 0;
1a001978:	2000      	movs	r0, #0
1a00197a:	4770      	bx	lr
1a00197c:	2000      	movs	r0, #0
1a00197e:	4770      	bx	lr
1a001980:	2000      	movs	r0, #0
	}

	return TestHz;
}
1a001982:	4770      	bx	lr
1a001984:	0c28cb00 	.word	0x0c28cb00

1a001988 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a001988:	b430      	push	{r4, r5}
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a00198a:	2300      	movs	r3, #0
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a00198c:	211c      	movs	r1, #28
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a00198e:	e010      	b.n	1a0019b2 <Chip_Clock_FindBaseClock+0x2a>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a001990:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001994:	0052      	lsls	r2, r2, #1
1a001996:	4d0d      	ldr	r5, [pc, #52]	; (1a0019cc <Chip_Clock_FindBaseClock+0x44>)
1a001998:	5aaa      	ldrh	r2, [r5, r2]
1a00199a:	4282      	cmp	r2, r0
1a00199c:	d806      	bhi.n	1a0019ac <Chip_Clock_FindBaseClock+0x24>
1a00199e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0019a2:	0052      	lsls	r2, r2, #1
1a0019a4:	442a      	add	r2, r5
1a0019a6:	8852      	ldrh	r2, [r2, #2]
1a0019a8:	4282      	cmp	r2, r0
1a0019aa:	d201      	bcs.n	1a0019b0 <Chip_Clock_FindBaseClock+0x28>
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a0019ac:	3301      	adds	r3, #1
1a0019ae:	e000      	b.n	1a0019b2 <Chip_Clock_FindBaseClock+0x2a>
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
1a0019b0:	4621      	mov	r1, r4
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0019b2:	291c      	cmp	r1, #28
1a0019b4:	d107      	bne.n	1a0019c6 <Chip_Clock_FindBaseClock+0x3e>
1a0019b6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0019ba:	0052      	lsls	r2, r2, #1
1a0019bc:	4c03      	ldr	r4, [pc, #12]	; (1a0019cc <Chip_Clock_FindBaseClock+0x44>)
1a0019be:	4422      	add	r2, r4
1a0019c0:	7914      	ldrb	r4, [r2, #4]
1a0019c2:	428c      	cmp	r4, r1
1a0019c4:	d1e4      	bne.n	1a001990 <Chip_Clock_FindBaseClock+0x8>
			i++;
		}
	}

	return baseclk;
}
1a0019c6:	4608      	mov	r0, r1
1a0019c8:	bc30      	pop	{r4, r5}
1a0019ca:	4770      	bx	lr
1a0019cc:	1a002b58 	.word	0x1a002b58

1a0019d0 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a0019d0:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a0019d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a0019d6:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a0019d8:	4a0d      	ldr	r2, [pc, #52]	; (1a001a10 <Chip_Clock_EnableCrystal+0x40>)
1a0019da:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a0019dc:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a0019e0:	6992      	ldr	r2, [r2, #24]
1a0019e2:	428a      	cmp	r2, r1
1a0019e4:	d001      	beq.n	1a0019ea <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0019e6:	4a0a      	ldr	r2, [pc, #40]	; (1a001a10 <Chip_Clock_EnableCrystal+0x40>)
1a0019e8:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a0019ea:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a0019ee:	4a09      	ldr	r2, [pc, #36]	; (1a001a14 <Chip_Clock_EnableCrystal+0x44>)
1a0019f0:	6811      	ldr	r1, [r2, #0]
1a0019f2:	4a09      	ldr	r2, [pc, #36]	; (1a001a18 <Chip_Clock_EnableCrystal+0x48>)
1a0019f4:	4291      	cmp	r1, r2
1a0019f6:	d901      	bls.n	1a0019fc <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a0019f8:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0019fc:	4a04      	ldr	r2, [pc, #16]	; (1a001a10 <Chip_Clock_EnableCrystal+0x40>)
1a0019fe:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a001a00:	9b01      	ldr	r3, [sp, #4]
1a001a02:	1e5a      	subs	r2, r3, #1
1a001a04:	9201      	str	r2, [sp, #4]
1a001a06:	2b00      	cmp	r3, #0
1a001a08:	d1fa      	bne.n	1a001a00 <Chip_Clock_EnableCrystal+0x30>
}
1a001a0a:	b002      	add	sp, #8
1a001a0c:	4770      	bx	lr
1a001a0e:	bf00      	nop
1a001a10:	40050000 	.word	0x40050000
1a001a14:	1a002ac0 	.word	0x1a002ac0
1a001a18:	01312cff 	.word	0x01312cff

1a001a1c <Chip_Clock_DisableCrystal>:

/* Disables the crystal oscillator */
void Chip_Clock_DisableCrystal(void)
{
	/* Disable crystal oscillator */
	LPC_CGU->XTAL_OSC_CTRL |= 1;
1a001a1c:	4a02      	ldr	r2, [pc, #8]	; (1a001a28 <Chip_Clock_DisableCrystal+0xc>)
1a001a1e:	6993      	ldr	r3, [r2, #24]
1a001a20:	f043 0301 	orr.w	r3, r3, #1
1a001a24:	6193      	str	r3, [r2, #24]
1a001a26:	4770      	bx	lr
1a001a28:	40050000 	.word	0x40050000

1a001a2c <Chip_Clock_SetDivider>:
	return (m / (2 * p)) * (freq / n);
}

/* Sets up a CGU clock divider and it's input clock */
void Chip_Clock_SetDivider(CHIP_CGU_IDIV_T Divider, CHIP_CGU_CLKIN_T Input, uint32_t Divisor)
{
1a001a2c:	b410      	push	{r4}
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a001a2e:	f100 0412 	add.w	r4, r0, #18
1a001a32:	4b11      	ldr	r3, [pc, #68]	; (1a001a78 <Chip_Clock_SetDivider+0x4c>)
1a001a34:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]

	Divisor--;
1a001a38:	3a01      	subs	r2, #1

	if (Input != CLKINPUT_PD) {
1a001a3a:	2911      	cmp	r1, #17
1a001a3c:	d013      	beq.n	1a001a66 <Chip_Clock_SetDivider+0x3a>
		/* Mask off bits that need to changes */
		reg &= ~((0x1F << 24) | 1 | (CHIP_CGU_IDIV_MASK(Divider) << 2));
1a001a3e:	4c0f      	ldr	r4, [pc, #60]	; (1a001a7c <Chip_Clock_SetDivider+0x50>)
1a001a40:	5c24      	ldrb	r4, [r4, r0]
1a001a42:	00a4      	lsls	r4, r4, #2
1a001a44:	f044 54f8 	orr.w	r4, r4, #520093696	; 0x1f000000
1a001a48:	f044 0401 	orr.w	r4, r4, #1
1a001a4c:	ea23 0304 	bic.w	r3, r3, r4

		/* Enable autoblocking, clear PD, and set clock source & divisor */
		LPC_CGU->IDIV_CTRL[Divider] = reg | (1 << 11) | (Input << 24) | (Divisor << 2);
1a001a50:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
1a001a54:	ea41 0282 	orr.w	r2, r1, r2, lsl #2
1a001a58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
1a001a5c:	3012      	adds	r0, #18
1a001a5e:	4b06      	ldr	r3, [pc, #24]	; (1a001a78 <Chip_Clock_SetDivider+0x4c>)
1a001a60:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
1a001a64:	e005      	b.n	1a001a72 <Chip_Clock_SetDivider+0x46>
	}
	else {
		LPC_CGU->IDIV_CTRL[Divider] = reg | 1;	/* Power down this divider */
1a001a66:	f043 0301 	orr.w	r3, r3, #1
1a001a6a:	3012      	adds	r0, #18
1a001a6c:	4a02      	ldr	r2, [pc, #8]	; (1a001a78 <Chip_Clock_SetDivider+0x4c>)
1a001a6e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	}
}
1a001a72:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001a76:	4770      	bx	lr
1a001a78:	40050000 	.word	0x40050000
1a001a7c:	1a002bc8 	.word	0x1a002bc8

1a001a80 <Chip_Clock_GetDividerSource>:

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a001a80:	3012      	adds	r0, #18
1a001a82:	4b05      	ldr	r3, [pc, #20]	; (1a001a98 <Chip_Clock_GetDividerSource+0x18>)
1a001a84:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a001a88:	f010 0f01 	tst.w	r0, #1
1a001a8c:	d102      	bne.n	1a001a94 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001a8e:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001a92:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];

	if (reg & 1) {	/* divider is powered down */
		return CLKINPUT_PD;
1a001a94:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a001a96:	4770      	bx	lr
1a001a98:	40050000 	.word	0x40050000

1a001a9c <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a001a9c:	f100 0212 	add.w	r2, r0, #18
1a001aa0:	4b03      	ldr	r3, [pc, #12]	; (1a001ab0 <Chip_Clock_GetDividerDivisor+0x14>)
1a001aa2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a001aa6:	4b03      	ldr	r3, [pc, #12]	; (1a001ab4 <Chip_Clock_GetDividerDivisor+0x18>)
1a001aa8:	5c18      	ldrb	r0, [r3, r0]
}
1a001aaa:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a001aae:	4770      	bx	lr
1a001ab0:	40050000 	.word	0x40050000
1a001ab4:	1a002bc8 	.word	0x1a002bc8

1a001ab8 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a001ab8:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a001aba:	2810      	cmp	r0, #16
1a001abc:	d80a      	bhi.n	1a001ad4 <Chip_Clock_GetClockInputHz+0x1c>
1a001abe:	e8df f000 	tbb	[pc, r0]
1a001ac2:	0b42      	.short	0x0b42
1a001ac4:	091f160d 	.word	0x091f160d
1a001ac8:	2b282522 	.word	0x2b282522
1a001acc:	322e0909 	.word	0x322e0909
1a001ad0:	3a36      	.short	0x3a36
1a001ad2:	3e          	.byte	0x3e
1a001ad3:	00          	.byte	0x00
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;
1a001ad4:	2000      	movs	r0, #0
1a001ad6:	bd08      	pop	{r3, pc}
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a001ad8:	481e      	ldr	r0, [pc, #120]	; (1a001b54 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a001ada:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001adc:	4b1e      	ldr	r3, [pc, #120]	; (1a001b58 <Chip_Clock_GetClockInputHz+0xa0>)
1a001ade:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001ae2:	f003 0307 	and.w	r3, r3, #7
1a001ae6:	2b04      	cmp	r3, #4
1a001ae8:	d130      	bne.n	1a001b4c <Chip_Clock_GetClockInputHz+0x94>
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;
1a001aea:	2000      	movs	r0, #0
1a001aec:	bd08      	pop	{r3, pc}
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001aee:	4b1a      	ldr	r3, [pc, #104]	; (1a001b58 <Chip_Clock_GetClockInputHz+0xa0>)
1a001af0:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001af4:	f003 0307 	and.w	r3, r3, #7
1a001af8:	2b04      	cmp	r3, #4
1a001afa:	d029      	beq.n	1a001b50 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a001afc:	4817      	ldr	r0, [pc, #92]	; (1a001b5c <Chip_Clock_GetClockInputHz+0xa4>)
1a001afe:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a001b00:	4b17      	ldr	r3, [pc, #92]	; (1a001b60 <Chip_Clock_GetClockInputHz+0xa8>)
1a001b02:	6818      	ldr	r0, [r3, #0]
		break;
1a001b04:	bd08      	pop	{r3, pc}

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a001b06:	4b17      	ldr	r3, [pc, #92]	; (1a001b64 <Chip_Clock_GetClockInputHz+0xac>)
1a001b08:	6818      	ldr	r0, [r3, #0]
		break;
1a001b0a:	bd08      	pop	{r3, pc}

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a001b0c:	4b16      	ldr	r3, [pc, #88]	; (1a001b68 <Chip_Clock_GetClockInputHz+0xb0>)
1a001b0e:	6818      	ldr	r0, [r3, #0]
		break;
1a001b10:	bd08      	pop	{r3, pc}

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a001b12:	4b15      	ldr	r3, [pc, #84]	; (1a001b68 <Chip_Clock_GetClockInputHz+0xb0>)
1a001b14:	6858      	ldr	r0, [r3, #4]
		break;
1a001b16:	bd08      	pop	{r3, pc}

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a001b18:	f000 f916 	bl	1a001d48 <Chip_Clock_GetMainPLLHz>
		break;
1a001b1c:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a001b1e:	2100      	movs	r1, #0
1a001b20:	f000 f946 	bl	1a001db0 <Chip_Clock_GetDivRate>
		break;
1a001b24:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a001b26:	2101      	movs	r1, #1
1a001b28:	f000 f942 	bl	1a001db0 <Chip_Clock_GetDivRate>
		break;
1a001b2c:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a001b2e:	2102      	movs	r1, #2
1a001b30:	f000 f93e 	bl	1a001db0 <Chip_Clock_GetDivRate>
		break;
1a001b34:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a001b36:	2103      	movs	r1, #3
1a001b38:	f000 f93a 	bl	1a001db0 <Chip_Clock_GetDivRate>
		break;
1a001b3c:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a001b3e:	2104      	movs	r1, #4
1a001b40:	f000 f936 	bl	1a001db0 <Chip_Clock_GetDivRate>
		break;
1a001b44:	bd08      	pop	{r3, pc}
{
	uint32_t rate = 0;

	switch (input) {
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
1a001b46:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a001b4a:	bd08      	pop	{r3, pc}
		break;

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a001b4c:	4803      	ldr	r0, [pc, #12]	; (1a001b5c <Chip_Clock_GetClockInputHz+0xa4>)
1a001b4e:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			rate = 25000000; /* MII uses 25 MHz */
		} else {
			rate = 50000000; /* RMII uses 50 MHz */
1a001b50:	4806      	ldr	r0, [pc, #24]	; (1a001b6c <Chip_Clock_GetClockInputHz+0xb4>)
	default:
		break;
	}

	return rate;
}
1a001b52:	bd08      	pop	{r3, pc}
1a001b54:	00b71b00 	.word	0x00b71b00
1a001b58:	40043000 	.word	0x40043000
1a001b5c:	017d7840 	.word	0x017d7840
1a001b60:	1a002ac4 	.word	0x1a002ac4
1a001b64:	1a002ac0 	.word	0x1a002ac0
1a001b68:	1000004c 	.word	0x1000004c
1a001b6c:	02faf080 	.word	0x02faf080

1a001b70 <Chip_Clock_CalcMainPLLValue>:
	while(delay--) {}
}

/* Calculate the Main PLL div values */
int Chip_Clock_CalcMainPLLValue(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001b70:	b538      	push	{r3, r4, r5, lr}
1a001b72:	4605      	mov	r5, r0
1a001b74:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a001b76:	7908      	ldrb	r0, [r1, #4]
1a001b78:	f7ff ff9e 	bl	1a001ab8 <Chip_Clock_GetClockInputHz>
1a001b7c:	6160      	str	r0, [r4, #20]

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a001b7e:	4b19      	ldr	r3, [pc, #100]	; (1a001be4 <Chip_Clock_CalcMainPLLValue+0x74>)
1a001b80:	442b      	add	r3, r5
1a001b82:	4a19      	ldr	r2, [pc, #100]	; (1a001be8 <Chip_Clock_CalcMainPLLValue+0x78>)
1a001b84:	4293      	cmp	r3, r2
1a001b86:	d821      	bhi.n	1a001bcc <Chip_Clock_CalcMainPLLValue+0x5c>
1a001b88:	b318      	cbz	r0, 1a001bd2 <Chip_Clock_CalcMainPLLValue+0x62>
		return -1;
	}

	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a001b8a:	2380      	movs	r3, #128	; 0x80
1a001b8c:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a001b8e:	2300      	movs	r3, #0
1a001b90:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a001b92:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a001b94:	fbb5 f3f0 	udiv	r3, r5, r0
1a001b98:	6123      	str	r3, [r4, #16]

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a001b9a:	4a14      	ldr	r2, [pc, #80]	; (1a001bec <Chip_Clock_CalcMainPLLValue+0x7c>)
1a001b9c:	4295      	cmp	r5, r2
1a001b9e:	d903      	bls.n	1a001ba8 <Chip_Clock_CalcMainPLLValue+0x38>
1a001ba0:	fb03 f000 	mul.w	r0, r3, r0
1a001ba4:	42a8      	cmp	r0, r5
1a001ba6:	d007      	beq.n	1a001bb8 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a001ba8:	4628      	mov	r0, r5
1a001baa:	4621      	mov	r1, r4
1a001bac:	f7ff fe58 	bl	1a001860 <pll_get_frac>
		if (!ppll->nsel) {
1a001bb0:	68a3      	ldr	r3, [r4, #8]
1a001bb2:	b18b      	cbz	r3, 1a001bd8 <Chip_Clock_CalcMainPLLValue+0x68>
			return -1;
		}
		ppll->nsel --;
1a001bb4:	3b01      	subs	r3, #1
1a001bb6:	60a3      	str	r3, [r4, #8]
	}

	if (ppll->msel == 0) {
1a001bb8:	6923      	ldr	r3, [r4, #16]
1a001bba:	b183      	cbz	r3, 1a001bde <Chip_Clock_CalcMainPLLValue+0x6e>
		return - 1;
	}

	if (ppll->psel) {
1a001bbc:	68e2      	ldr	r2, [r4, #12]
1a001bbe:	b10a      	cbz	r2, 1a001bc4 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a001bc0:	3a01      	subs	r2, #1
1a001bc2:	60e2      	str	r2, [r4, #12]
	}

	ppll->msel --;
1a001bc4:	3b01      	subs	r3, #1
1a001bc6:	6123      	str	r3, [r4, #16]

	return 0;
1a001bc8:	2000      	movs	r0, #0
1a001bca:	bd38      	pop	{r3, r4, r5, pc}
{
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
		return -1;
1a001bcc:	f04f 30ff 	mov.w	r0, #4294967295
1a001bd0:	bd38      	pop	{r3, r4, r5, pc}
1a001bd2:	f04f 30ff 	mov.w	r0, #4294967295
1a001bd6:	bd38      	pop	{r3, r4, r5, pc}
	ppll->msel = freq / ppll->fin;

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
		pll_get_frac(freq, ppll);
		if (!ppll->nsel) {
			return -1;
1a001bd8:	f04f 30ff 	mov.w	r0, #4294967295
1a001bdc:	bd38      	pop	{r3, r4, r5, pc}
		}
		ppll->nsel --;
	}

	if (ppll->msel == 0) {
		return - 1;
1a001bde:	f04f 30ff 	mov.w	r0, #4294967295
	}

	ppll->msel --;

	return 0;
}
1a001be2:	bd38      	pop	{r3, r4, r5, pc}
1a001be4:	ff6b3a10 	.word	0xff6b3a10
1a001be8:	0b940510 	.word	0x0b940510
1a001bec:	094c5eff 	.word	0x094c5eff

1a001bf0 <Chip_Clock_SetupMainPLLMult>:
	return 0;
}

/* Directly set the PLL multipler */
uint32_t Chip_Clock_SetupMainPLLMult(CHIP_CGU_CLKIN_T Input, uint32_t mult)
{
1a001bf0:	b570      	push	{r4, r5, r6, lr}
1a001bf2:	b082      	sub	sp, #8
1a001bf4:	4605      	mov	r5, r0
1a001bf6:	460c      	mov	r4, r1
	volatile uint32_t delay = 250;
1a001bf8:	23fa      	movs	r3, #250	; 0xfa
1a001bfa:	9301      	str	r3, [sp, #4]
	uint32_t freq = Chip_Clock_GetClockInputHz(Input);
1a001bfc:	f7ff ff5c 	bl	1a001ab8 <Chip_Clock_GetClockInputHz>
	uint32_t msel = 0, nsel = 0, psel = 0, pval = 1;
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a001c00:	4b1e      	ldr	r3, [pc, #120]	; (1a001c7c <Chip_Clock_SetupMainPLLMult+0x8c>)
1a001c02:	6c5a      	ldr	r2, [r3, #68]	; 0x44

	freq *= mult;
1a001c04:	fb04 f000 	mul.w	r0, r4, r0
	msel = mult - 1;
1a001c08:	1e61      	subs	r1, r4, #1

	PLLReg &= ~(0x1F << 24);/* clear input source bits */
1a001c0a:	f022 52f8 	bic.w	r2, r2, #520093696	; 0x1f000000
	PLLReg |= Input << 24;	/* set input source bits to parameter */
1a001c0e:	ea42 6205 	orr.w	r2, r2, r5, lsl #24

	/* Clear other PLL input bits */
	PLLReg &= ~((1 << 6) |	/* FBSEL */
1a001c12:	4b1b      	ldr	r3, [pc, #108]	; (1a001c80 <Chip_Clock_SetupMainPLLMult+0x90>)
1a001c14:	4013      	ands	r3, r2
				(1 << 1) |	/* BYPASS */
				(1 << 7) |	/* DIRECT */
				(0x03 << 8) | (0xFF << 16) | (0x03 << 12));	/* PSEL, MSEL, NSEL- divider ratios */
	
	PLLReg |= (1 << 11);		/* AUTOBLOCK */
1a001c16:	f443 6600 	orr.w	r6, r3, #2048	; 0x800

	if (freq < 156000000) {
1a001c1a:	4b1a      	ldr	r3, [pc, #104]	; (1a001c84 <Chip_Clock_SetupMainPLLMult+0x94>)
1a001c1c:	4298      	cmp	r0, r3
1a001c1e:	d903      	bls.n	1a001c28 <Chip_Clock_SetupMainPLLMult+0x38>
1a001c20:	e012      	b.n	1a001c48 <Chip_Clock_SetupMainPLLMult+0x58>
		/* psel is encoded such that 0=1, 1=2, 2=4, 3=8 */
		while ((2 * (pval) * freq) < 156000000) {
			psel++;
1a001c22:	3401      	adds	r4, #1
			pval *= 2;
1a001c24:	0052      	lsls	r2, r2, #1
1a001c26:	e001      	b.n	1a001c2c <Chip_Clock_SetupMainPLLMult+0x3c>
1a001c28:	2201      	movs	r2, #1
1a001c2a:	2400      	movs	r4, #0
	
	PLLReg |= (1 << 11);		/* AUTOBLOCK */

	if (freq < 156000000) {
		/* psel is encoded such that 0=1, 1=2, 2=4, 3=8 */
		while ((2 * (pval) * freq) < 156000000) {
1a001c2c:	fb00 f302 	mul.w	r3, r0, r2
1a001c30:	4d14      	ldr	r5, [pc, #80]	; (1a001c84 <Chip_Clock_SetupMainPLLMult+0x94>)
1a001c32:	ebb5 0f43 	cmp.w	r5, r3, lsl #1
1a001c36:	d2f4      	bcs.n	1a001c22 <Chip_Clock_SetupMainPLLMult+0x32>
			psel++;
			pval *= 2;
		}

		PLLReg |= (msel << 16) | (nsel << 12) | (psel << 8) | (1 << 6);	/* dividers + FBSEL */
1a001c38:	0224      	lsls	r4, r4, #8
1a001c3a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
1a001c3e:	ea44 0306 	orr.w	r3, r4, r6
1a001c42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a001c46:	e00e      	b.n	1a001c66 <Chip_Clock_SetupMainPLLMult+0x76>
	}
	else if (freq < 320000000) {
1a001c48:	4b0f      	ldr	r3, [pc, #60]	; (1a001c88 <Chip_Clock_SetupMainPLLMult+0x98>)
1a001c4a:	4298      	cmp	r0, r3
1a001c4c:	d804      	bhi.n	1a001c58 <Chip_Clock_SetupMainPLLMult+0x68>
		PLLReg |= (msel << 16) | (nsel << 12) | (psel << 8) | (1 << 7) | (1 << 6);	/* dividers + DIRECT + FBSEL */
1a001c4e:	ea46 4301 	orr.w	r3, r6, r1, lsl #16
1a001c52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
1a001c56:	e006      	b.n	1a001c66 <Chip_Clock_SetupMainPLLMult+0x76>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a001c58:	4a08      	ldr	r2, [pc, #32]	; (1a001c7c <Chip_Clock_SetupMainPLLMult+0x8c>)
1a001c5a:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a001c5c:	f043 0301 	orr.w	r3, r3, #1
1a001c60:	6453      	str	r3, [r2, #68]	; 0x44
	}
	else {
		Chip_Clock_DisableMainPLL();
		return 0;
1a001c62:	2000      	movs	r0, #0
1a001c64:	e008      	b.n	1a001c78 <Chip_Clock_SetupMainPLLMult+0x88>
	}
	LPC_CGU->PLL1_CTRL = PLLReg & ~(1 << 0);
1a001c66:	f023 0301 	bic.w	r3, r3, #1
1a001c6a:	4a04      	ldr	r2, [pc, #16]	; (1a001c7c <Chip_Clock_SetupMainPLLMult+0x8c>)
1a001c6c:	6453      	str	r3, [r2, #68]	; 0x44

	/* Wait for 50uSec */
	while(delay--) {}
1a001c6e:	9b01      	ldr	r3, [sp, #4]
1a001c70:	1e5a      	subs	r2, r3, #1
1a001c72:	9201      	str	r2, [sp, #4]
1a001c74:	2b00      	cmp	r3, #0
1a001c76:	d1fa      	bne.n	1a001c6e <Chip_Clock_SetupMainPLLMult+0x7e>

	return freq;
}
1a001c78:	b002      	add	sp, #8
1a001c7a:	bd70      	pop	{r4, r5, r6, pc}
1a001c7c:	40050000 	.word	0x40050000
1a001c80:	ff00cc3d 	.word	0xff00cc3d
1a001c84:	094c5eff 	.word	0x094c5eff
1a001c88:	1312cfff 	.word	0x1312cfff

1a001c8c <Chip_Clock_SetupMainPLLHz>:
	LPC_CGU->XTAL_OSC_CTRL |= 1;
}

/* Configures the main PLL */
uint32_t Chip_Clock_SetupMainPLLHz(CHIP_CGU_CLKIN_T Input, uint32_t MinHz, uint32_t DesiredHz, uint32_t MaxHz)
{
1a001c8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001c90:	4682      	mov	sl, r0
1a001c92:	460f      	mov	r7, r1
1a001c94:	4690      	mov	r8, r2
1a001c96:	461e      	mov	r6, r3
	uint32_t freqin = Chip_Clock_GetClockInputHz(Input);
1a001c98:	f7ff ff0e 	bl	1a001ab8 <Chip_Clock_GetClockInputHz>
1a001c9c:	4605      	mov	r5, r0
	uint32_t Mult, LastMult, MultEnd;
	uint32_t freqout, freqout2;

	if (DesiredHz != 0xFFFFFFFF) {
1a001c9e:	f1b8 3fff 	cmp.w	r8, #4294967295
1a001ca2:	d033      	beq.n	1a001d0c <Chip_Clock_SetupMainPLLHz+0x80>
		/* Test DesiredHz rounded down */
		Mult = DesiredHz / freqin;
1a001ca4:	fbb8 f9f0 	udiv	r9, r8, r0
		freqout = Chip_Clock_TestMainPLLMultiplier(freqin, Mult, MinHz, MaxHz);
1a001ca8:	4649      	mov	r1, r9
1a001caa:	463a      	mov	r2, r7
1a001cac:	4633      	mov	r3, r6
1a001cae:	f7ff fe59 	bl	1a001964 <Chip_Clock_TestMainPLLMultiplier>
1a001cb2:	4604      	mov	r4, r0

		/* Test DesiredHz rounded up */
		Mult++;
1a001cb4:	f109 0b01 	add.w	fp, r9, #1
		freqout2 = Chip_Clock_TestMainPLLMultiplier(freqin, Mult, MinHz, MaxHz);
1a001cb8:	4628      	mov	r0, r5
1a001cba:	4659      	mov	r1, fp
1a001cbc:	463a      	mov	r2, r7
1a001cbe:	4633      	mov	r3, r6
1a001cc0:	f7ff fe50 	bl	1a001964 <Chip_Clock_TestMainPLLMultiplier>

		if (freqout && !freqout2) {	/* rounding up is no good? set first multiplier */
1a001cc4:	b134      	cbz	r4, 1a001cd4 <Chip_Clock_SetupMainPLLHz+0x48>
1a001cc6:	b928      	cbnz	r0, 1a001cd4 <Chip_Clock_SetupMainPLLHz+0x48>
			Mult--;
			return Chip_Clock_SetupMainPLLMult(Input, Mult);
1a001cc8:	4650      	mov	r0, sl
1a001cca:	4649      	mov	r1, r9
1a001ccc:	f7ff ff90 	bl	1a001bf0 <Chip_Clock_SetupMainPLLMult>
1a001cd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		if (!freqout && freqout2) {	/* didn't work until rounded up? set 2nd multiplier */
1a001cd4:	b934      	cbnz	r4, 1a001ce4 <Chip_Clock_SetupMainPLLHz+0x58>
1a001cd6:	b128      	cbz	r0, 1a001ce4 <Chip_Clock_SetupMainPLLHz+0x58>
			return Chip_Clock_SetupMainPLLMult(Input, Mult);
1a001cd8:	4650      	mov	r0, sl
1a001cda:	4659      	mov	r1, fp
1a001cdc:	f7ff ff88 	bl	1a001bf0 <Chip_Clock_SetupMainPLLMult>
1a001ce0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}

		if (freqout && freqout2) {	/* either multiplier okay? choose closer one */
1a001ce4:	b194      	cbz	r4, 1a001d0c <Chip_Clock_SetupMainPLLHz+0x80>
1a001ce6:	b188      	cbz	r0, 1a001d0c <Chip_Clock_SetupMainPLLHz+0x80>
			if ((DesiredHz - freqout) > (freqout2 - DesiredHz)) {
1a001ce8:	ebc4 0408 	rsb	r4, r4, r8
1a001cec:	ebc8 0000 	rsb	r0, r8, r0
1a001cf0:	4284      	cmp	r4, r0
1a001cf2:	d905      	bls.n	1a001d00 <Chip_Clock_SetupMainPLLHz+0x74>
				Mult--;
				return Chip_Clock_SetupMainPLLMult(Input, Mult);
1a001cf4:	4650      	mov	r0, sl
1a001cf6:	4649      	mov	r1, r9
1a001cf8:	f7ff ff7a 	bl	1a001bf0 <Chip_Clock_SetupMainPLLMult>
1a001cfc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			}
			else {
				return Chip_Clock_SetupMainPLLMult(Input, Mult);
1a001d00:	4650      	mov	r0, sl
1a001d02:	4659      	mov	r1, fp
1a001d04:	f7ff ff74 	bl	1a001bf0 <Chip_Clock_SetupMainPLLMult>
1a001d08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
	}

	/* Neither multiplier okay? Try to start at MinHz and increment.
	   This should find the highest multiplier that is still good */
	Mult = MinHz / freqin;
1a001d0c:	fbb7 f4f5 	udiv	r4, r7, r5
	MultEnd = MaxHz / freqin;
1a001d10:	fbb6 f8f5 	udiv	r8, r6, r5
	LastMult = 0;
1a001d14:	f04f 0900 	mov.w	r9, #0
	while (1) {
		freqout = Chip_Clock_TestMainPLLMultiplier(freqin, Mult, MinHz, MaxHz);
1a001d18:	4628      	mov	r0, r5
1a001d1a:	4621      	mov	r1, r4
1a001d1c:	463a      	mov	r2, r7
1a001d1e:	4633      	mov	r3, r6
1a001d20:	f7ff fe20 	bl	1a001964 <Chip_Clock_TestMainPLLMultiplier>

		if (freqout) {
1a001d24:	b100      	cbz	r0, 1a001d28 <Chip_Clock_SetupMainPLLHz+0x9c>
			LastMult = Mult;
1a001d26:	46a1      	mov	r9, r4
		}

		if (Mult >= MultEnd) {
1a001d28:	4544      	cmp	r4, r8
1a001d2a:	d201      	bcs.n	1a001d30 <Chip_Clock_SetupMainPLLHz+0xa4>
			break;
		}
		Mult++;
1a001d2c:	3401      	adds	r4, #1
	}
1a001d2e:	e7f3      	b.n	1a001d18 <Chip_Clock_SetupMainPLLHz+0x8c>

	if (LastMult) {
1a001d30:	f1b9 0f00 	cmp.w	r9, #0
1a001d34:	d005      	beq.n	1a001d42 <Chip_Clock_SetupMainPLLHz+0xb6>
		return Chip_Clock_SetupMainPLLMult(Input, LastMult);
1a001d36:	4650      	mov	r0, sl
1a001d38:	4649      	mov	r1, r9
1a001d3a:	f7ff ff59 	bl	1a001bf0 <Chip_Clock_SetupMainPLLMult>
1a001d3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	return 0;
1a001d42:	2000      	movs	r0, #0
}
1a001d44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

1a001d48 <Chip_Clock_GetMainPLLHz>:
	return freq;
}

/* Returns the frequency of the main PLL */
uint32_t Chip_Clock_GetMainPLLHz(void)
{
1a001d48:	b570      	push	{r4, r5, r6, lr}
1a001d4a:	b082      	sub	sp, #8
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a001d4c:	4d16      	ldr	r5, [pc, #88]	; (1a001da8 <Chip_Clock_GetMainPLLHz+0x60>)
1a001d4e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a001d50:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a001d54:	f7ff feb0 	bl	1a001ab8 <Chip_Clock_GetClockInputHz>
1a001d58:	4606      	mov	r6, r0
	uint32_t msel, nsel, psel, direct, fbsel;
	uint32_t m, n, p;
	const uint8_t ptab[] = {1, 2, 4, 8};
1a001d5a:	4b14      	ldr	r3, [pc, #80]	; (1a001dac <Chip_Clock_GetMainPLLHz+0x64>)
1a001d5c:	6818      	ldr	r0, [r3, #0]
1a001d5e:	9001      	str	r0, [sp, #4]

	/* No lock? */
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a001d60:	6c28      	ldr	r0, [r5, #64]	; 0x40
1a001d62:	f010 0001 	ands.w	r0, r0, #1
1a001d66:	d01d      	beq.n	1a001da4 <Chip_Clock_GetMainPLLHz+0x5c>
		return 0;
	}

	msel = (PLLReg >> 16) & 0xFF;
1a001d68:	f3c4 4007 	ubfx	r0, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a001d6c:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a001d70:	f3c4 2101 	ubfx	r1, r4, #8, #2
	direct = (PLLReg >> 7) & 0x1;
	fbsel = (PLLReg >> 6) & 0x1;
1a001d74:	f3c4 1580 	ubfx	r5, r4, #6, #1

	m = msel + 1;
1a001d78:	1c43      	adds	r3, r0, #1
	n = nsel + 1;
1a001d7a:	3201      	adds	r2, #1
	p = ptab[psel];
1a001d7c:	a802      	add	r0, sp, #8
1a001d7e:	4401      	add	r1, r0
1a001d80:	f811 0c04 	ldrb.w	r0, [r1, #-4]

	if (direct || fbsel) {
1a001d84:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001d88:	d100      	bne.n	1a001d8c <Chip_Clock_GetMainPLLHz+0x44>
1a001d8a:	b125      	cbz	r5, 1a001d96 <Chip_Clock_GetMainPLLHz+0x4e>
		return m * (freq / n);
1a001d8c:	fbb6 f0f2 	udiv	r0, r6, r2
1a001d90:	fb03 f000 	mul.w	r0, r3, r0
1a001d94:	e006      	b.n	1a001da4 <Chip_Clock_GetMainPLLHz+0x5c>
	}

	return (m / (2 * p)) * (freq / n);
1a001d96:	0040      	lsls	r0, r0, #1
1a001d98:	fbb3 f3f0 	udiv	r3, r3, r0
1a001d9c:	fbb6 f0f2 	udiv	r0, r6, r2
1a001da0:	fb00 f003 	mul.w	r0, r0, r3
}
1a001da4:	b002      	add	sp, #8
1a001da6:	bd70      	pop	{r4, r5, r6, pc}
1a001da8:	40050000 	.word	0x40050000
1a001dac:	1a002bc4 	.word	0x1a002bc4

1a001db0 <Chip_Clock_GetDivRate>:
	return TestHz;
}

/* Returns clock rate out of a divider */
static uint32_t Chip_Clock_GetDivRate(CHIP_CGU_CLKIN_T clock, CHIP_CGU_IDIV_T divider)
{
1a001db0:	b538      	push	{r3, r4, r5, lr}
1a001db2:	460c      	mov	r4, r1
	CHIP_CGU_CLKIN_T input;
	uint32_t div;

	input = Chip_Clock_GetDividerSource(divider);
1a001db4:	4608      	mov	r0, r1
1a001db6:	f7ff fe63 	bl	1a001a80 <Chip_Clock_GetDividerSource>
1a001dba:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a001dbc:	4620      	mov	r0, r4
1a001dbe:	f7ff fe6d 	bl	1a001a9c <Chip_Clock_GetDividerDivisor>
1a001dc2:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a001dc4:	4628      	mov	r0, r5
1a001dc6:	f7ff fe77 	bl	1a001ab8 <Chip_Clock_GetClockInputHz>
1a001dca:	3401      	adds	r4, #1
}
1a001dcc:	fbb0 f0f4 	udiv	r0, r0, r4
1a001dd0:	bd38      	pop	{r3, r4, r5, pc}
1a001dd2:	bf00      	nop

1a001dd4 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a001dd4:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a001dd6:	0085      	lsls	r5, r0, #2
1a001dd8:	4c0d      	ldr	r4, [pc, #52]	; (1a001e10 <Chip_Clock_SetBaseClock+0x3c>)
1a001dda:	5965      	ldr	r5, [r4, r5]

	if (BaseClock < CLK_BASE_NONE) {
1a001ddc:	281b      	cmp	r0, #27
1a001dde:	d80f      	bhi.n	1a001e00 <Chip_Clock_SetBaseClock+0x2c>
		if (Input != CLKINPUT_PD) {
1a001de0:	2911      	cmp	r1, #17
1a001de2:	d012      	beq.n	1a001e0a <Chip_Clock_SetBaseClock+0x36>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a001de4:	4c0b      	ldr	r4, [pc, #44]	; (1a001e14 <Chip_Clock_SetBaseClock+0x40>)
1a001de6:	402c      	ands	r4, r5

			if (autoblocken) {
1a001de8:	b10a      	cbz	r2, 1a001dee <Chip_Clock_SetBaseClock+0x1a>
				reg |= (1 << 11);
1a001dea:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
			}
			if (powerdn) {
1a001dee:	b10b      	cbz	r3, 1a001df4 <Chip_Clock_SetBaseClock+0x20>
				reg |= (1 << 0);
1a001df0:	f044 0401 	orr.w	r4, r4, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a001df4:	ea44 6401 	orr.w	r4, r4, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a001df8:	0080      	lsls	r0, r0, #2
1a001dfa:	4b05      	ldr	r3, [pc, #20]	; (1a001e10 <Chip_Clock_SetBaseClock+0x3c>)
1a001dfc:	501c      	str	r4, [r3, r0]
1a001dfe:	e004      	b.n	1a001e0a <Chip_Clock_SetBaseClock+0x36>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a001e00:	f045 0501 	orr.w	r5, r5, #1
1a001e04:	0080      	lsls	r0, r0, #2
1a001e06:	4b02      	ldr	r3, [pc, #8]	; (1a001e10 <Chip_Clock_SetBaseClock+0x3c>)
1a001e08:	501d      	str	r5, [r3, r0]
	}
}
1a001e0a:	bc30      	pop	{r4, r5}
1a001e0c:	4770      	bx	lr
1a001e0e:	bf00      	nop
1a001e10:	4005005c 	.word	0x4005005c
1a001e14:	e0fff7fe 	.word	0xe0fff7fe

1a001e18 <Chip_Clock_GetBaseClockOpts>:

/* Reads CGU Base Clock clock source information */
void Chip_Clock_GetBaseClockOpts(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T *Input, bool *autoblocken,
								 bool *powerdn)
{
1a001e18:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a001e1a:	0085      	lsls	r5, r0, #2
1a001e1c:	4c0a      	ldr	r4, [pc, #40]	; (1a001e48 <Chip_Clock_GetBaseClockOpts+0x30>)
1a001e1e:	5964      	ldr	r4, [r4, r5]
	CHIP_CGU_CLKIN_T ClkIn = (CHIP_CGU_CLKIN_T) ((reg  >> 24) & 0x1F );
1a001e20:	f3c4 6504 	ubfx	r5, r4, #24, #5

	if (BaseClock < CLK_BASE_NONE) {
1a001e24:	281b      	cmp	r0, #27
1a001e26:	d807      	bhi.n	1a001e38 <Chip_Clock_GetBaseClockOpts+0x20>
		/* Get settings */
		*Input = ClkIn;
1a001e28:	700d      	strb	r5, [r1, #0]
		*autoblocken = (reg & (1 << 11)) ? true : false;
1a001e2a:	f3c4 21c0 	ubfx	r1, r4, #11, #1
1a001e2e:	7011      	strb	r1, [r2, #0]
		*powerdn = (reg & (1 << 0)) ? true : false;
1a001e30:	f004 0401 	and.w	r4, r4, #1
1a001e34:	701c      	strb	r4, [r3, #0]
1a001e36:	e004      	b.n	1a001e42 <Chip_Clock_GetBaseClockOpts+0x2a>
	}
	else {
		*Input = CLKINPUT_PD;
1a001e38:	2011      	movs	r0, #17
1a001e3a:	7008      	strb	r0, [r1, #0]
		*powerdn = true;
1a001e3c:	2101      	movs	r1, #1
1a001e3e:	7019      	strb	r1, [r3, #0]
		*autoblocken = true;
1a001e40:	7011      	strb	r1, [r2, #0]
	}
}
1a001e42:	bc30      	pop	{r4, r5}
1a001e44:	4770      	bx	lr
1a001e46:	bf00      	nop
1a001e48:	4005005c 	.word	0x4005005c

1a001e4c <Chip_Clock_EnableBaseClock>:

/*Enables a base clock source */
void Chip_Clock_EnableBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	if (BaseClock < CLK_BASE_NONE) {
1a001e4c:	281b      	cmp	r0, #27
1a001e4e:	d805      	bhi.n	1a001e5c <Chip_Clock_EnableBaseClock+0x10>
		LPC_CGU->BASE_CLK[BaseClock] &= ~1;
1a001e50:	0080      	lsls	r0, r0, #2
1a001e52:	4b03      	ldr	r3, [pc, #12]	; (1a001e60 <Chip_Clock_EnableBaseClock+0x14>)
1a001e54:	581a      	ldr	r2, [r3, r0]
1a001e56:	f022 0201 	bic.w	r2, r2, #1
1a001e5a:	501a      	str	r2, [r3, r0]
1a001e5c:	4770      	bx	lr
1a001e5e:	bf00      	nop
1a001e60:	4005005c 	.word	0x4005005c

1a001e64 <Chip_Clock_DisableBaseClock>:
}

/* Disables a base clock source */
void Chip_Clock_DisableBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	if (BaseClock < CLK_BASE_NONE) {
1a001e64:	281b      	cmp	r0, #27
1a001e66:	d805      	bhi.n	1a001e74 <Chip_Clock_DisableBaseClock+0x10>
		LPC_CGU->BASE_CLK[BaseClock] |= 1;
1a001e68:	0080      	lsls	r0, r0, #2
1a001e6a:	4b03      	ldr	r3, [pc, #12]	; (1a001e78 <Chip_Clock_DisableBaseClock+0x14>)
1a001e6c:	581a      	ldr	r2, [r3, r0]
1a001e6e:	f042 0201 	orr.w	r2, r2, #1
1a001e72:	501a      	str	r2, [r3, r0]
1a001e74:	4770      	bx	lr
1a001e76:	bf00      	nop
1a001e78:	4005005c 	.word	0x4005005c

1a001e7c <Chip_Clock_IsBaseClockEnabled>:
/* Returns base clock enable state */
bool Chip_Clock_IsBaseClockEnabled(CHIP_CGU_BASE_CLK_T BaseClock)
{
	bool enabled;

	if (BaseClock < CLK_BASE_NONE) {
1a001e7c:	281b      	cmp	r0, #27
1a001e7e:	d808      	bhi.n	1a001e92 <Chip_Clock_IsBaseClockEnabled+0x16>
		enabled = (bool) ((LPC_CGU->BASE_CLK[BaseClock] & 1) == 0);
1a001e80:	0080      	lsls	r0, r0, #2
1a001e82:	4b05      	ldr	r3, [pc, #20]	; (1a001e98 <Chip_Clock_IsBaseClockEnabled+0x1c>)
1a001e84:	581b      	ldr	r3, [r3, r0]
1a001e86:	f013 0f01 	tst.w	r3, #1
1a001e8a:	bf0c      	ite	eq
1a001e8c:	2001      	moveq	r0, #1
1a001e8e:	2000      	movne	r0, #0
1a001e90:	4770      	bx	lr
	}
	else {
		enabled = false;
1a001e92:	2000      	movs	r0, #0
	}

	return enabled;
}
1a001e94:	4770      	bx	lr
1a001e96:	bf00      	nop
1a001e98:	4005005c 	.word	0x4005005c

1a001e9c <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a001e9c:	281b      	cmp	r0, #27
1a001e9e:	d808      	bhi.n	1a001eb2 <Chip_Clock_GetBaseClock+0x16>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a001ea0:	0080      	lsls	r0, r0, #2
1a001ea2:	4b06      	ldr	r3, [pc, #24]	; (1a001ebc <Chip_Clock_GetBaseClock+0x20>)
1a001ea4:	5818      	ldr	r0, [r3, r0]

	/* base clock is powered down? */
	if (reg & 1) {
1a001ea6:	f010 0f01 	tst.w	r0, #1
1a001eaa:	d104      	bne.n	1a001eb6 <Chip_Clock_GetBaseClock+0x1a>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001eac:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001eb0:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
		return CLKINPUT_PD;
1a001eb2:	2011      	movs	r0, #17
1a001eb4:	4770      	bx	lr

	reg = LPC_CGU->BASE_CLK[BaseClock];

	/* base clock is powered down? */
	if (reg & 1) {
		return CLKINPUT_PD;
1a001eb6:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a001eb8:	4770      	bx	lr
1a001eba:	bf00      	nop
1a001ebc:	4005005c 	.word	0x4005005c

1a001ec0 <Chip_Clock_GetBaseClocktHz>:
	return rate;
}

/* Returns the frequency of the specified base clock source */
uint32_t Chip_Clock_GetBaseClocktHz(CHIP_CGU_BASE_CLK_T clock)
{
1a001ec0:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a001ec2:	f7ff ffeb 	bl	1a001e9c <Chip_Clock_GetBaseClock>
1a001ec6:	f7ff fdf7 	bl	1a001ab8 <Chip_Clock_GetClockInputHz>
}
1a001eca:	bd08      	pop	{r3, pc}

1a001ecc <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a001ecc:	b909      	cbnz	r1, 1a001ed2 <Chip_Clock_EnableOpts+0x6>
}

/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;
1a001ece:	2101      	movs	r1, #1
1a001ed0:	e000      	b.n	1a001ed4 <Chip_Clock_EnableOpts+0x8>

	if (autoen) {
		reg |= (1 << 1);
1a001ed2:	2103      	movs	r1, #3
	}
	if (wakeupen) {
1a001ed4:	b10a      	cbz	r2, 1a001eda <Chip_Clock_EnableOpts+0xe>
		reg |= (1 << 2);
1a001ed6:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a001eda:	2b02      	cmp	r3, #2
1a001edc:	d101      	bne.n	1a001ee2 <Chip_Clock_EnableOpts+0x16>
		reg |= (1 << 5);
1a001ede:	f041 0120 	orr.w	r1, r1, #32
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a001ee2:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001ee6:	d305      	bcc.n	1a001ef4 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a001ee8:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001eec:	4b04      	ldr	r3, [pc, #16]	; (1a001f00 <Chip_Clock_EnableOpts+0x34>)
1a001eee:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a001ef2:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a001ef4:	3020      	adds	r0, #32
1a001ef6:	4b03      	ldr	r3, [pc, #12]	; (1a001f04 <Chip_Clock_EnableOpts+0x38>)
1a001ef8:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a001efc:	4770      	bx	lr
1a001efe:	bf00      	nop
1a001f00:	40052000 	.word	0x40052000
1a001f04:	40051000 	.word	0x40051000

1a001f08 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a001f08:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001f0c:	d309      	bcc.n	1a001f22 <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a001f0e:	4a09      	ldr	r2, [pc, #36]	; (1a001f34 <Chip_Clock_Enable+0x2c>)
1a001f10:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001f14:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001f18:	f043 0301 	orr.w	r3, r3, #1
1a001f1c:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a001f20:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a001f22:	4a05      	ldr	r2, [pc, #20]	; (1a001f38 <Chip_Clock_Enable+0x30>)
1a001f24:	3020      	adds	r0, #32
1a001f26:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001f2a:	f043 0301 	orr.w	r3, r3, #1
1a001f2e:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a001f32:	4770      	bx	lr
1a001f34:	40052000 	.word	0x40052000
1a001f38:	40051000 	.word	0x40051000

1a001f3c <Chip_Clock_RTCEnable>:
}

/* Enable RTC Clock */
void Chip_Clock_RTCEnable(void)
{
	LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));	/* Reset 32Khz oscillator */
1a001f3c:	4b04      	ldr	r3, [pc, #16]	; (1a001f50 <Chip_Clock_RTCEnable+0x14>)
1a001f3e:	685a      	ldr	r2, [r3, #4]
1a001f40:	f022 020c 	bic.w	r2, r2, #12
1a001f44:	605a      	str	r2, [r3, #4]
	LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);	/* Enable 32 kHz & 1 kHz on osc32k and release reset */
1a001f46:	685a      	ldr	r2, [r3, #4]
1a001f48:	f042 0203 	orr.w	r2, r2, #3
1a001f4c:	605a      	str	r2, [r3, #4]
1a001f4e:	4770      	bx	lr
1a001f50:	40043000 	.word	0x40043000

1a001f54 <Chip_Clock_Disable>:

/* Disables a peripheral clock */
void Chip_Clock_Disable(CHIP_CCU_CLK_T clk)
{
	/* Stop peripheral clock */
	if (clk >= CLK_CCU2_START) {
1a001f54:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001f58:	d309      	bcc.n	1a001f6e <Chip_Clock_Disable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG &= ~1;
1a001f5a:	4a09      	ldr	r2, [pc, #36]	; (1a001f80 <Chip_Clock_Disable+0x2c>)
1a001f5c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001f60:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001f64:	f023 0301 	bic.w	r3, r3, #1
1a001f68:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a001f6c:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG &= ~1;
1a001f6e:	4a05      	ldr	r2, [pc, #20]	; (1a001f84 <Chip_Clock_Disable+0x30>)
1a001f70:	3020      	adds	r0, #32
1a001f72:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001f76:	f023 0301 	bic.w	r3, r3, #1
1a001f7a:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a001f7e:	4770      	bx	lr
1a001f80:	40052000 	.word	0x40052000
1a001f84:	40051000 	.word	0x40051000

1a001f88 <Chip_Clock_StartPowerDown>:
 * power down sequence started
 */
void Chip_Clock_StartPowerDown(void)
{
	/* Set Power Down bit */
	LPC_CCU1->PM = 1;
1a001f88:	2301      	movs	r3, #1
1a001f8a:	4a03      	ldr	r2, [pc, #12]	; (1a001f98 <Chip_Clock_StartPowerDown+0x10>)
1a001f8c:	6013      	str	r3, [r2, #0]
	LPC_CCU2->PM = 1;
1a001f8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
1a001f92:	6013      	str	r3, [r2, #0]
1a001f94:	4770      	bx	lr
1a001f96:	bf00      	nop
1a001f98:	40051000 	.word	0x40051000

1a001f9c <Chip_Clock_ClearPowerDown>:
 * Only the clocks with wake up mechanism enabled will be enabled
 */
void Chip_Clock_ClearPowerDown(void)
{
	/* Clear Power Down bit */
	LPC_CCU1->PM = 0;
1a001f9c:	2300      	movs	r3, #0
1a001f9e:	4a03      	ldr	r2, [pc, #12]	; (1a001fac <Chip_Clock_ClearPowerDown+0x10>)
1a001fa0:	6013      	str	r3, [r2, #0]
	LPC_CCU2->PM = 0;
1a001fa2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
1a001fa6:	6013      	str	r3, [r2, #0]
1a001fa8:	4770      	bx	lr
1a001faa:	bf00      	nop
1a001fac:	40051000 	.word	0x40051000

1a001fb0 <Chip_Clock_GetRate>:
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a001fb0:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a001fb2:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001fb6:	d305      	bcc.n	1a001fc4 <Chip_Clock_GetRate+0x14>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a001fb8:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a001fbc:	4a0d      	ldr	r2, [pc, #52]	; (1a001ff4 <Chip_Clock_GetRate+0x44>)
1a001fbe:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a001fc2:	e004      	b.n	1a001fce <Chip_Clock_GetRate+0x1e>
	}
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a001fc4:	f100 0320 	add.w	r3, r0, #32
1a001fc8:	4a0b      	ldr	r2, [pc, #44]	; (1a001ff8 <Chip_Clock_GetRate+0x48>)
1a001fca:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a001fce:	f014 0f01 	tst.w	r4, #1
1a001fd2:	d00c      	beq.n	1a001fee <Chip_Clock_GetRate+0x3e>
		/* Get base clock for this peripheral clock */
		baseclk = Chip_Clock_FindBaseClock(clk);
1a001fd4:	f7ff fcd8 	bl	1a001988 <Chip_Clock_FindBaseClock>

		/* Get base clock rate */
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a001fd8:	f7ff ff72 	bl	1a001ec0 <Chip_Clock_GetBaseClocktHz>

		/* Get divider for this clock */
		if (((reg >> 5) & 0x7) == 0) {
1a001fdc:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a001fe0:	d101      	bne.n	1a001fe6 <Chip_Clock_GetRate+0x36>
			div = 1;
1a001fe2:	2301      	movs	r3, #1
1a001fe4:	e000      	b.n	1a001fe8 <Chip_Clock_GetRate+0x38>
		}
		else {
			div = 2;/* No other dividers supported */
1a001fe6:	2302      	movs	r3, #2

		}
		rate = rate / div;
1a001fe8:	fbb0 f0f3 	udiv	r0, r0, r3
1a001fec:	bd10      	pop	{r4, pc}
	}
	else {
		rate = 0;
1a001fee:	2000      	movs	r0, #0
	}

	return rate;
}
1a001ff0:	bd10      	pop	{r4, pc}
1a001ff2:	bf00      	nop
1a001ff4:	40052000 	.word	0x40052000
1a001ff8:	40051000 	.word	0x40051000

1a001ffc <Chip_Clock_GetEMCRate>:

/* Get EMC Clock Rate */
uint32_t Chip_Clock_GetEMCRate(void)

{
1a001ffc:	b508      	push	{r3, lr}
	uint32_t ClkFreq;
	uint32_t EMCDiv;
	ClkFreq = Chip_Clock_GetRate(CLK_MX_EMC);
1a001ffe:	2066      	movs	r0, #102	; 0x66
1a002000:	f7ff ffd6 	bl	1a001fb0 <Chip_Clock_GetRate>

	/* EMC Divider readback at pos 27
	    TODO: just checked but dont mention in UM */
	EMCDiv = (LPC_CCU1->CLKCCU[CLK_MX_EMC_DIV].CFG >> 27) & 0x07;
1a002004:	4b07      	ldr	r3, [pc, #28]	; (1a002024 <Chip_Clock_GetEMCRate+0x28>)
1a002006:	f8d3 3478 	ldr.w	r3, [r3, #1144]	; 0x478
1a00200a:	f3c3 63c2 	ubfx	r3, r3, #27, #3

	/* Check EMC Divider to get real EMC clock out */
	if ((EMCDiv == 1) && (LPC_CREG->CREG6 & (1 << 16))) {
1a00200e:	2b01      	cmp	r3, #1
1a002010:	d106      	bne.n	1a002020 <Chip_Clock_GetEMCRate+0x24>
1a002012:	4b05      	ldr	r3, [pc, #20]	; (1a002028 <Chip_Clock_GetEMCRate+0x2c>)
1a002014:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002018:	f413 3f80 	tst.w	r3, #65536	; 0x10000
1a00201c:	d000      	beq.n	1a002020 <Chip_Clock_GetEMCRate+0x24>
		ClkFreq >>= 1;
1a00201e:	0840      	lsrs	r0, r0, #1
	}
	return ClkFreq;
}
1a002020:	bd08      	pop	{r3, pc}
1a002022:	bf00      	nop
1a002024:	40051000 	.word	0x40051000
1a002028:	40043000 	.word	0x40043000

1a00202c <Chip_Clock_SetupPLL>:

/* Sets up the audio or USB PLL */
void Chip_Clock_SetupPLL(CHIP_CGU_CLKIN_T Input, CHIP_CGU_USB_AUDIO_PLL_T pllnum,
						 const CGU_USBAUDIO_PLL_SETUP_T *pPLLSetup)
{
1a00202c:	b410      	push	{r4}
	uint32_t reg = pPLLSetup->ctrl | (Input << 24);
1a00202e:	6813      	ldr	r3, [r2, #0]
1a002030:	ea43 6000 	orr.w	r0, r3, r0, lsl #24

	/* Setup from passed values */
	LPC_CGU->PLL[pllnum].PLL_CTRL = reg;
1a002034:	4b0b      	ldr	r3, [pc, #44]	; (1a002064 <Chip_Clock_SetupPLL+0x38>)
1a002036:	eb03 1401 	add.w	r4, r3, r1, lsl #4
1a00203a:	6220      	str	r0, [r4, #32]
	LPC_CGU->PLL[pllnum].PLL_MDIV = pPLLSetup->mdiv;
1a00203c:	6850      	ldr	r0, [r2, #4]
1a00203e:	1c8c      	adds	r4, r1, #2
1a002040:	eb03 1304 	add.w	r3, r3, r4, lsl #4
1a002044:	6058      	str	r0, [r3, #4]
	LPC_CGU->PLL[pllnum].PLL_NP_DIV = pPLLSetup->ndiv;
1a002046:	6890      	ldr	r0, [r2, #8]
1a002048:	6098      	str	r0, [r3, #8]

	/* Fractional divider is for audio PLL only */
	if (pllnum == CGU_AUDIO_PLL) {
1a00204a:	2901      	cmp	r1, #1
1a00204c:	d102      	bne.n	1a002054 <Chip_Clock_SetupPLL+0x28>
		LPC_CGU->PLL0AUDIO_FRAC = pPLLSetup->fract;
1a00204e:	68d0      	ldr	r0, [r2, #12]
1a002050:	4b04      	ldr	r3, [pc, #16]	; (1a002064 <Chip_Clock_SetupPLL+0x38>)
1a002052:	63d8      	str	r0, [r3, #60]	; 0x3c
	}
	audio_usb_pll_freq[pllnum] = pPLLSetup->freq;
1a002054:	6912      	ldr	r2, [r2, #16]
1a002056:	4b04      	ldr	r3, [pc, #16]	; (1a002068 <Chip_Clock_SetupPLL+0x3c>)
1a002058:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
1a00205c:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002060:	4770      	bx	lr
1a002062:	bf00      	nop
1a002064:	40050000 	.word	0x40050000
1a002068:	1000004c 	.word	0x1000004c

1a00206c <Chip_Clock_EnablePLL>:

/* Enables the audio or USB PLL */
void Chip_Clock_EnablePLL(CHIP_CGU_USB_AUDIO_PLL_T pllnum)
{
	LPC_CGU->PLL[pllnum].PLL_CTRL &= ~1;
1a00206c:	0100      	lsls	r0, r0, #4
1a00206e:	4b03      	ldr	r3, [pc, #12]	; (1a00207c <Chip_Clock_EnablePLL+0x10>)
1a002070:	581a      	ldr	r2, [r3, r0]
1a002072:	f022 0201 	bic.w	r2, r2, #1
1a002076:	501a      	str	r2, [r3, r0]
1a002078:	4770      	bx	lr
1a00207a:	bf00      	nop
1a00207c:	40050020 	.word	0x40050020

1a002080 <Chip_Clock_DisablePLL>:
}

/* Disables the audio or USB PLL */
void Chip_Clock_DisablePLL(CHIP_CGU_USB_AUDIO_PLL_T pllnum)
{
	LPC_CGU->PLL[pllnum].PLL_CTRL |= 1;
1a002080:	0100      	lsls	r0, r0, #4
1a002082:	4b03      	ldr	r3, [pc, #12]	; (1a002090 <Chip_Clock_DisablePLL+0x10>)
1a002084:	581a      	ldr	r2, [r3, r0]
1a002086:	f042 0201 	orr.w	r2, r2, #1
1a00208a:	501a      	str	r2, [r3, r0]
1a00208c:	4770      	bx	lr
1a00208e:	bf00      	nop
1a002090:	40050020 	.word	0x40050020

1a002094 <Chip_Clock_GetPLLStatus>:
}

/* Returns the PLL status */
uint32_t Chip_Clock_GetPLLStatus(CHIP_CGU_USB_AUDIO_PLL_T pllnum)
{
	return LPC_CGU->PLL[pllnum].PLL_STAT;
1a002094:	0100      	lsls	r0, r0, #4
1a002096:	4b01      	ldr	r3, [pc, #4]	; (1a00209c <Chip_Clock_GetPLLStatus+0x8>)
1a002098:	5818      	ldr	r0, [r3, r0]
}
1a00209a:	4770      	bx	lr
1a00209c:	4005001c 	.word	0x4005001c

1a0020a0 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a0020a0:	b570      	push	{r4, r5, r6, lr}
1a0020a2:	b08a      	sub	sp, #40	; 0x28
1a0020a4:	4605      	mov	r5, r0
1a0020a6:	460e      	mov	r6, r1
1a0020a8:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 500;
1a0020aa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
1a0020ae:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a0020b0:	2806      	cmp	r0, #6
1a0020b2:	d101      	bne.n	1a0020b8 <Chip_SetupCoreClock+0x18>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
1a0020b4:	f7ff fc8c 	bl	1a0019d0 <Chip_Clock_EnableCrystal>
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a0020b8:	2004      	movs	r0, #4
1a0020ba:	4629      	mov	r1, r5
1a0020bc:	2201      	movs	r2, #1
1a0020be:	2300      	movs	r3, #0
1a0020c0:	f7ff fe88 	bl	1a001dd4 <Chip_Clock_SetBaseClock>
1a0020c4:	4a47      	ldr	r2, [pc, #284]	; (1a0021e4 <Chip_SetupCoreClock+0x144>)
1a0020c6:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a0020c8:	f043 0301 	orr.w	r3, r3, #1
1a0020cc:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a0020ce:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a0020d2:	4630      	mov	r0, r6
1a0020d4:	a901      	add	r1, sp, #4
1a0020d6:	f7ff fd4b 	bl	1a001b70 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a0020da:	4b43      	ldr	r3, [pc, #268]	; (1a0021e8 <Chip_SetupCoreClock+0x148>)
1a0020dc:	429e      	cmp	r6, r3
1a0020de:	d913      	bls.n	1a002108 <Chip_SetupCoreClock+0x68>
		if (ppll.ctrl & (1 << 6)) {
1a0020e0:	9b01      	ldr	r3, [sp, #4]
1a0020e2:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0020e6:	d000      	beq.n	1a0020ea <Chip_SetupCoreClock+0x4a>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a0020e8:	e7fe      	b.n	1a0020e8 <Chip_SetupCoreClock+0x48>
		} else if (ppll.ctrl & (1 << 7)){
1a0020ea:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0020ee:	d005      	beq.n	1a0020fc <Chip_SetupCoreClock+0x5c>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a0020f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0020f4:	9301      	str	r3, [sp, #4]
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
	int i;
	volatile uint32_t delay = 500;
	uint32_t direct = 0, pdivide = 0;
1a0020f6:	2500      	movs	r5, #0

	if (core_freq > 110000000UL) {
		if (ppll.ctrl & (1 << 6)) {
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
			direct = 1;
1a0020f8:	2601      	movs	r6, #1
1a0020fa:	e007      	b.n	1a00210c <Chip_SetupCoreClock+0x6c>
			ppll.ctrl &= ~(1 << 7);
		} else {
			pdivide = 1;
			ppll.psel++;
1a0020fc:	9b04      	ldr	r3, [sp, #16]
1a0020fe:	3301      	adds	r3, #1
1a002100:	9304      	str	r3, [sp, #16]
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
		} else {
			pdivide = 1;
1a002102:	2501      	movs	r5, #1
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
	int i;
	volatile uint32_t delay = 500;
	uint32_t direct = 0, pdivide = 0;
1a002104:	2600      	movs	r6, #0
1a002106:	e001      	b.n	1a00210c <Chip_SetupCoreClock+0x6c>
1a002108:	2500      	movs	r5, #0
1a00210a:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00210c:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a002110:	9b01      	ldr	r3, [sp, #4]
1a002112:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a002116:	9a05      	ldr	r2, [sp, #20]
1a002118:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00211c:	9a03      	ldr	r2, [sp, #12]
1a00211e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a002122:	9a04      	ldr	r2, [sp, #16]
1a002124:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002128:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00212c:	4a2d      	ldr	r2, [pc, #180]	; (1a0021e4 <Chip_SetupCoreClock+0x144>)
1a00212e:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a002130:	4b2c      	ldr	r3, [pc, #176]	; (1a0021e4 <Chip_SetupCoreClock+0x144>)
1a002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a002134:	f013 0f01 	tst.w	r3, #1
1a002138:	d0fa      	beq.n	1a002130 <Chip_SetupCoreClock+0x90>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a00213a:	2004      	movs	r0, #4
1a00213c:	2109      	movs	r1, #9
1a00213e:	2201      	movs	r2, #1
1a002140:	2300      	movs	r3, #0
1a002142:	f7ff fe47 	bl	1a001dd4 <Chip_Clock_SetBaseClock>

	if (direct) {
1a002146:	b1ee      	cbz	r6, 1a002184 <Chip_SetupCoreClock+0xe4>
		delay = 1000;
1a002148:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a00214c:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a00214e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a002150:	1e5a      	subs	r2, r3, #1
1a002152:	9209      	str	r2, [sp, #36]	; 0x24
1a002154:	2b00      	cmp	r3, #0
1a002156:	d1fa      	bne.n	1a00214e <Chip_SetupCoreClock+0xae>
		ppll.ctrl |= 1 << 7;
1a002158:	9b01      	ldr	r3, [sp, #4]
1a00215a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00215e:	9301      	str	r3, [sp, #4]
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a002160:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a002164:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a002168:	9a05      	ldr	r2, [sp, #20]
1a00216a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00216e:	9a03      	ldr	r2, [sp, #12]
1a002170:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a002174:	9a04      	ldr	r2, [sp, #16]
1a002176:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00217a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00217e:	4a19      	ldr	r2, [pc, #100]	; (1a0021e4 <Chip_SetupCoreClock+0x144>)
1a002180:	6453      	str	r3, [r2, #68]	; 0x44
1a002182:	e01c      	b.n	1a0021be <Chip_SetupCoreClock+0x11e>
		Chip_Clock_SetupMainPLL(&ppll); /* Set DIRECT to operate at full frequency */
	} else if (pdivide) {
1a002184:	b1dd      	cbz	r5, 1a0021be <Chip_SetupCoreClock+0x11e>
		delay = 1000;
1a002186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a00218a:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a00218c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00218e:	1e5a      	subs	r2, r3, #1
1a002190:	9209      	str	r2, [sp, #36]	; 0x24
1a002192:	2b00      	cmp	r3, #0
1a002194:	d1fa      	bne.n	1a00218c <Chip_SetupCoreClock+0xec>
		ppll.psel--;
1a002196:	9b04      	ldr	r3, [sp, #16]
1a002198:	1e59      	subs	r1, r3, #1
1a00219a:	9104      	str	r1, [sp, #16]
1a00219c:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0021a0:	9b01      	ldr	r3, [sp, #4]
1a0021a2:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
1a0021a6:	9b05      	ldr	r3, [sp, #20]
1a0021a8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a0021ac:	9b03      	ldr	r3, [sp, #12]
1a0021ae:	ea42 3303 	orr.w	r3, r2, r3, lsl #12
1a0021b2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
1a0021b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0021ba:	4a0a      	ldr	r2, [pc, #40]	; (1a0021e4 <Chip_SetupCoreClock+0x144>)
1a0021bc:	6453      	str	r3, [r2, #68]	; 0x44
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a0021be:	b964      	cbnz	r4, 1a0021da <Chip_SetupCoreClock+0x13a>
1a0021c0:	e00e      	b.n	1a0021e0 <Chip_SetupCoreClock+0x140>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a0021c2:	4a0a      	ldr	r2, [pc, #40]	; (1a0021ec <Chip_SetupCoreClock+0x14c>)
1a0021c4:	eb02 0384 	add.w	r3, r2, r4, lsl #2
1a0021c8:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
1a0021cc:	7859      	ldrb	r1, [r3, #1]
1a0021ce:	789a      	ldrb	r2, [r3, #2]
1a0021d0:	78db      	ldrb	r3, [r3, #3]
1a0021d2:	f7ff fdff 	bl	1a001dd4 <Chip_Clock_SetBaseClock>

	if (setbase) {
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0021d6:	3401      	adds	r4, #1
1a0021d8:	e000      	b.n	1a0021dc <Chip_SetupCoreClock+0x13c>
1a0021da:	2400      	movs	r4, #0
1a0021dc:	2c11      	cmp	r4, #17
1a0021de:	d9f0      	bls.n	1a0021c2 <Chip_SetupCoreClock+0x122>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a0021e0:	b00a      	add	sp, #40	; 0x28
1a0021e2:	bd70      	pop	{r4, r5, r6, pc}
1a0021e4:	40050000 	.word	0x40050000
1a0021e8:	068e7780 	.word	0x068e7780
1a0021ec:	1a002bd0 	.word	0x1a002bd0

1a0021f0 <Chip_SetupXtalClocking>:

/* Setup system clocking */
void Chip_SetupXtalClocking(void)
{
1a0021f0:	b508      	push	{r3, lr}
	Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a0021f2:	2006      	movs	r0, #6
1a0021f4:	4902      	ldr	r1, [pc, #8]	; (1a002200 <Chip_SetupXtalClocking+0x10>)
1a0021f6:	2201      	movs	r2, #1
1a0021f8:	f7ff ff52 	bl	1a0020a0 <Chip_SetupCoreClock>
1a0021fc:	bd08      	pop	{r3, pc}
1a0021fe:	bf00      	nop
1a002200:	0c28cb00 	.word	0x0c28cb00

1a002204 <Chip_SetupIrcClocking>:
}

/* Set up and initialize hardware prior to call to main */
void Chip_SetupIrcClocking(void)
{
1a002204:	b508      	push	{r3, lr}
	Chip_SetupCoreClock(CLKIN_IRC, MAX_CLOCK_FREQ, true);
1a002206:	2001      	movs	r0, #1
1a002208:	4902      	ldr	r1, [pc, #8]	; (1a002214 <Chip_SetupIrcClocking+0x10>)
1a00220a:	4602      	mov	r2, r0
1a00220c:	f7ff ff48 	bl	1a0020a0 <Chip_SetupCoreClock>
1a002210:	bd08      	pop	{r3, pc}
1a002212:	bf00      	nop
1a002214:	0c28cb00 	.word	0x0c28cb00

1a002218 <Chip_SystemInit>:
}

/* Set up and initialize hardware prior to call to main */
void Chip_SystemInit(void)
{
1a002218:	b508      	push	{r3, lr}
	/* Initial internal clocking */
	Chip_SetupIrcClocking();
1a00221a:	f7ff fff3 	bl	1a002204 <Chip_SetupIrcClocking>
1a00221e:	bd08      	pop	{r3, pc}

1a002220 <Chip_TIMER_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_TIMER_GetClockIndex(LPC_TIMER_T *pTMR)
{
	CHIP_CCU_CLK_T clkTMR;

	if (pTMR == LPC_TIMER3) {
1a002220:	4b09      	ldr	r3, [pc, #36]	; (1a002248 <Chip_TIMER_GetClockIndex+0x28>)
1a002222:	4298      	cmp	r0, r3
1a002224:	d009      	beq.n	1a00223a <Chip_TIMER_GetClockIndex+0x1a>
		clkTMR = CLK_MX_TIMER3;
	}
    else if (pTMR == LPC_TIMER2) {
1a002226:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
1a00222a:	4298      	cmp	r0, r3
1a00222c:	d007      	beq.n	1a00223e <Chip_TIMER_GetClockIndex+0x1e>
		clkTMR = CLK_MX_TIMER2;
	}
    else if (pTMR == LPC_TIMER1) {
1a00222e:	f5a3 3378 	sub.w	r3, r3, #253952	; 0x3e000
1a002232:	4298      	cmp	r0, r3
1a002234:	d105      	bne.n	1a002242 <Chip_TIMER_GetClockIndex+0x22>
		clkTMR = CLK_MX_TIMER1;
1a002236:	2085      	movs	r0, #133	; 0x85
1a002238:	4770      	bx	lr
STATIC CHIP_CCU_CLK_T Chip_TIMER_GetClockIndex(LPC_TIMER_T *pTMR)
{
	CHIP_CCU_CLK_T clkTMR;

	if (pTMR == LPC_TIMER3) {
		clkTMR = CLK_MX_TIMER3;
1a00223a:	20a4      	movs	r0, #164	; 0xa4
1a00223c:	4770      	bx	lr
	}
    else if (pTMR == LPC_TIMER2) {
		clkTMR = CLK_MX_TIMER2;
1a00223e:	20a3      	movs	r0, #163	; 0xa3
1a002240:	4770      	bx	lr
	}
    else if (pTMR == LPC_TIMER1) {
		clkTMR = CLK_MX_TIMER1;
	}
	else {
		clkTMR = CLK_MX_TIMER0;
1a002242:	2084      	movs	r0, #132	; 0x84
	}

	return clkTMR;
}
1a002244:	4770      	bx	lr
1a002246:	bf00      	nop
1a002248:	400c4000 	.word	0x400c4000

1a00224c <Chip_TIMER_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize a timer */
void Chip_TIMER_Init(LPC_TIMER_T *pTMR)
{
1a00224c:	b508      	push	{r3, lr}
	Chip_Clock_Enable(Chip_TIMER_GetClockIndex(pTMR));
1a00224e:	f7ff ffe7 	bl	1a002220 <Chip_TIMER_GetClockIndex>
1a002252:	f7ff fe59 	bl	1a001f08 <Chip_Clock_Enable>
1a002256:	bd08      	pop	{r3, pc}

1a002258 <Chip_TIMER_DeInit>:
}

/*	Shutdown a timer */
void Chip_TIMER_DeInit(LPC_TIMER_T *pTMR)
{
1a002258:	b508      	push	{r3, lr}
	Chip_Clock_Disable(Chip_TIMER_GetClockIndex(pTMR));
1a00225a:	f7ff ffe1 	bl	1a002220 <Chip_TIMER_GetClockIndex>
1a00225e:	f7ff fe79 	bl	1a001f54 <Chip_Clock_Disable>
1a002262:	bd08      	pop	{r3, pc}

1a002264 <Chip_TIMER_Reset>:
void Chip_TIMER_Reset(LPC_TIMER_T *pTMR)
{
	uint32_t reg;

	/* Disable timer, set terminal count to non-0 */
	reg = pTMR->TCR;
1a002264:	6842      	ldr	r2, [r0, #4]
	pTMR->TCR = 0;
1a002266:	2300      	movs	r3, #0
1a002268:	6043      	str	r3, [r0, #4]
	pTMR->TC = 1;
1a00226a:	2301      	movs	r3, #1
1a00226c:	6083      	str	r3, [r0, #8]

	/* Reset timer counter */
	pTMR->TCR = TIMER_RESET;
1a00226e:	2302      	movs	r3, #2
1a002270:	6043      	str	r3, [r0, #4]

	/* Wait for terminal count to clear */
	while (pTMR->TC != 0) {}
1a002272:	6883      	ldr	r3, [r0, #8]
1a002274:	2b00      	cmp	r3, #0
1a002276:	d1fc      	bne.n	1a002272 <Chip_TIMER_Reset+0xe>

	/* Restore timer state */
	pTMR->TCR = reg;
1a002278:	6042      	str	r2, [r0, #4]
1a00227a:	4770      	bx	lr

1a00227c <Chip_TIMER_ExtMatchControlSet>:
}

/* Sets external match control (MATn.matchnum) pin control */
void Chip_TIMER_ExtMatchControlSet(LPC_TIMER_T *pTMR, int8_t initial_state,
								   TIMER_PIN_MATCH_STATE_T matchState, int8_t matchnum)
{
1a00227c:	b470      	push	{r4, r5, r6}
	uint32_t mask, reg;

	/* Clear bits corresponding to selected match register */
	mask = (1 << matchnum) | (0x03 << (4 + (matchnum * 2)));
1a00227e:	2401      	movs	r4, #1
1a002280:	fa04 f603 	lsl.w	r6, r4, r3
1a002284:	1c9d      	adds	r5, r3, #2
1a002286:	40a5      	lsls	r5, r4
1a002288:	2403      	movs	r4, #3
1a00228a:	40ac      	lsls	r4, r5
1a00228c:	4334      	orrs	r4, r6
	reg = pTMR->EMR &= ~mask;
1a00228e:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
1a002290:	ea26 0404 	bic.w	r4, r6, r4
1a002294:	63c4      	str	r4, [r0, #60]	; 0x3c

	/* Set new configuration for selected match register */
	pTMR->EMR = reg | (((uint32_t) initial_state) << matchnum) |
1a002296:	4099      	lsls	r1, r3
1a002298:	430c      	orrs	r4, r1
				(((uint32_t) matchState) << (4 + (matchnum * 2)));
1a00229a:	40aa      	lsls	r2, r5
	/* Clear bits corresponding to selected match register */
	mask = (1 << matchnum) | (0x03 << (4 + (matchnum * 2)));
	reg = pTMR->EMR &= ~mask;

	/* Set new configuration for selected match register */
	pTMR->EMR = reg | (((uint32_t) initial_state) << matchnum) |
1a00229c:	4314      	orrs	r4, r2
1a00229e:	63c4      	str	r4, [r0, #60]	; 0x3c
				(((uint32_t) matchState) << (4 + (matchnum * 2)));
}
1a0022a0:	bc70      	pop	{r4, r5, r6}
1a0022a2:	4770      	bx	lr

1a0022a4 <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a0022a4:	b084      	sub	sp, #16
	volatile uint32_t Cpacr;
	volatile uint32_t Mvfr0;
	volatile uint32_t Mvfr1;
	char vfpPresent = 0;

	Mvfr0 = *regMvfr0;
1a0022a6:	4b10      	ldr	r3, [pc, #64]	; (1a0022e8 <fpuInit+0x44>)
1a0022a8:	681b      	ldr	r3, [r3, #0]
1a0022aa:	9302      	str	r3, [sp, #8]
	Mvfr1 = *regMvfr1;
1a0022ac:	4b0f      	ldr	r3, [pc, #60]	; (1a0022ec <fpuInit+0x48>)
1a0022ae:	681b      	ldr	r3, [r3, #0]
1a0022b0:	9301      	str	r3, [sp, #4]

	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a0022b2:	9a02      	ldr	r2, [sp, #8]
1a0022b4:	4b0e      	ldr	r3, [pc, #56]	; (1a0022f0 <fpuInit+0x4c>)
1a0022b6:	429a      	cmp	r2, r3
1a0022b8:	d105      	bne.n	1a0022c6 <fpuInit+0x22>
1a0022ba:	9a01      	ldr	r2, [sp, #4]
1a0022bc:	4b0d      	ldr	r3, [pc, #52]	; (1a0022f4 <fpuInit+0x50>)
1a0022be:	429a      	cmp	r2, r3
1a0022c0:	d003      	beq.n	1a0022ca <fpuInit+0x26>
1a0022c2:	2300      	movs	r3, #0
1a0022c4:	e002      	b.n	1a0022cc <fpuInit+0x28>
1a0022c6:	2300      	movs	r3, #0
1a0022c8:	e000      	b.n	1a0022cc <fpuInit+0x28>
1a0022ca:	2301      	movs	r3, #1

	if (vfpPresent) {
1a0022cc:	f013 0fff 	tst.w	r3, #255	; 0xff
1a0022d0:	d008      	beq.n	1a0022e4 <fpuInit+0x40>
		Cpacr = *regCpacr;
1a0022d2:	4a09      	ldr	r2, [pc, #36]	; (1a0022f8 <fpuInit+0x54>)
1a0022d4:	6813      	ldr	r3, [r2, #0]
1a0022d6:	9303      	str	r3, [sp, #12]
		Cpacr |= (0xF << 20);
1a0022d8:	9b03      	ldr	r3, [sp, #12]
1a0022da:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a0022de:	9303      	str	r3, [sp, #12]
		*regCpacr = Cpacr;	// enable CP10 and CP11 for full access
1a0022e0:	9b03      	ldr	r3, [sp, #12]
1a0022e2:	6013      	str	r3, [r2, #0]
	}
#endif /* __FPU_PRESENT != 0 */
}
1a0022e4:	b004      	add	sp, #16
1a0022e6:	4770      	bx	lr
1a0022e8:	e000ef40 	.word	0xe000ef40
1a0022ec:	e000ef44 	.word	0xe000ef44
1a0022f0:	10110021 	.word	0x10110021
1a0022f4:	11000011 	.word	0x11000011
1a0022f8:	e000ed88 	.word	0xe000ed88

1a0022fc <Chip_GPIO_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
1a0022fc:	4770      	bx	lr
1a0022fe:	bf00      	nop

1a002300 <Chip_GPIO_DeInit>:
}

/* De-Initialize GPIO block */
void Chip_GPIO_DeInit(LPC_GPIO_T *pGPIO)
{
1a002300:	4770      	bx	lr
1a002302:	bf00      	nop

1a002304 <ResetISR>:
// not debug) by setting the define 'DONT_RESET_ON_RESTART'.
//
#ifndef DONT_RESET_ON_RESTART

    // Disable interrupts
    __asm volatile ("cpsid i");
1a002304:	b672      	cpsid	i
    // Note that we do not use the CMSIS register access mechanism,
    // as there is no guarantee that the project has been configured
    // to use CMSIS.

    // Write to LPC_RGU->RESET_CTRL0
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a002306:	4a17      	ldr	r2, [pc, #92]	; (1a002364 <ResetISR+0x60>)
1a002308:	4b17      	ldr	r3, [pc, #92]	; (1a002368 <ResetISR+0x64>)
1a00230a:	601a      	str	r2, [r3, #0]
    // GPIO_RST|AES_RST|ETHERNET_RST|SDIO_RST|DMA_RST|
    // USB1_RST|USB0_RST|LCD_RST|M0_SUB_RST

    // Write to LPC_RGU->RESET_CTRL1
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a00230c:	4a17      	ldr	r2, [pc, #92]	; (1a00236c <ResetISR+0x68>)
1a00230e:	3304      	adds	r3, #4
1a002310:	601a      	str	r2, [r3, #0]
    // RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a002312:	2300      	movs	r3, #0
1a002314:	e005      	b.n	1a002322 <ResetISR+0x1e>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a002316:	f04f 31ff 	mov.w	r1, #4294967295
1a00231a:	4a15      	ldr	r2, [pc, #84]	; (1a002370 <ResetISR+0x6c>)
1a00231c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a002320:	3301      	adds	r3, #1
1a002322:	2b07      	cmp	r3, #7
1a002324:	d9f7      	bls.n	1a002316 <ResetISR+0x12>
// Reset entry point for your code.
// Sets up a simple runtime environment and initializes the C/C++
// library.
//
//*****************************************************************************
void ResetISR(void) {
1a002326:	b510      	push	{r4, lr}
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
    }

    // Reenable interrupts
    __asm volatile ("cpsie i");
1a002328:	b662      	cpsie	i

#endif  // ifndef DONT_RESET_ON_RESTART
// *************************************************************

#if defined (__USE_LPCOPEN)
    SystemInit();
1a00232a:	f7fe fecb 	bl	1a0010c4 <SystemInit>
    //
    unsigned int LoadAddr, ExeAddr, SectionLen;
    unsigned int *SectionTableAddr;

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;
1a00232e:	4b11      	ldr	r3, [pc, #68]	; (1a002374 <ResetISR+0x70>)

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a002330:	e007      	b.n	1a002342 <ResetISR+0x3e>
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a002332:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a002336:	6818      	ldr	r0, [r3, #0]
1a002338:	6859      	ldr	r1, [r3, #4]
1a00233a:	689a      	ldr	r2, [r3, #8]
1a00233c:	f7fd ff32 	bl	1a0001a4 <data_init>

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a002340:	4623      	mov	r3, r4

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a002342:	4a0d      	ldr	r2, [pc, #52]	; (1a002378 <ResetISR+0x74>)
1a002344:	4293      	cmp	r3, r2
1a002346:	d3f4      	bcc.n	1a002332 <ResetISR+0x2e>
1a002348:	e006      	b.n	1a002358 <ResetISR+0x54>
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
1a00234a:	461c      	mov	r4, r3
        SectionLen = *SectionTableAddr++;
        bss_init(ExeAddr, SectionLen);
1a00234c:	f854 0b08 	ldr.w	r0, [r4], #8
1a002350:	6859      	ldr	r1, [r3, #4]
1a002352:	f7fd ff35 	bl	1a0001c0 <bss_init>
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a002356:	4623      	mov	r3, r4
        SectionLen = *SectionTableAddr++;
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
1a002358:	4a08      	ldr	r2, [pc, #32]	; (1a00237c <ResetISR+0x78>)
1a00235a:	4293      	cmp	r3, r2
1a00235c:	d3f5      	bcc.n	1a00234a <ResetISR+0x46>

#if defined (__REDLIB__)
    // Call the Redlib library, which in turn calls main()
    __main();
#else
    main();
1a00235e:	f7fe f879 	bl	1a000454 <main>
    //
    // main() shouldn't return, but if it does, we'll just enter an infinite loop
    //
    while (1) {
        ;
    }
1a002362:	e7fe      	b.n	1a002362 <ResetISR+0x5e>
1a002364:	10df1000 	.word	0x10df1000
1a002368:	40053100 	.word	0x40053100
1a00236c:	01dff7ff 	.word	0x01dff7ff
1a002370:	e000e280 	.word	0xe000e280
1a002374:	1a000114 	.word	0x1a000114
1a002378:	1a000150 	.word	0x1a000150
1a00237c:	1a000178 	.word	0x1a000178

1a002380 <__aeabi_uldivmod>:
1a002380:	b953      	cbnz	r3, 1a002398 <__aeabi_uldivmod+0x18>
1a002382:	b94a      	cbnz	r2, 1a002398 <__aeabi_uldivmod+0x18>
1a002384:	2900      	cmp	r1, #0
1a002386:	bf08      	it	eq
1a002388:	2800      	cmpeq	r0, #0
1a00238a:	bf1c      	itt	ne
1a00238c:	f04f 31ff 	movne.w	r1, #4294967295
1a002390:	f04f 30ff 	movne.w	r0, #4294967295
1a002394:	f000 b83c 	b.w	1a002410 <__aeabi_idiv0>
1a002398:	b082      	sub	sp, #8
1a00239a:	46ec      	mov	ip, sp
1a00239c:	e92d 5000 	stmdb	sp!, {ip, lr}
1a0023a0:	f000 f81e 	bl	1a0023e0 <__gnu_uldivmod_helper>
1a0023a4:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0023a8:	b002      	add	sp, #8
1a0023aa:	bc0c      	pop	{r2, r3}
1a0023ac:	4770      	bx	lr
1a0023ae:	bf00      	nop

1a0023b0 <__gnu_ldivmod_helper>:
1a0023b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0023b4:	9c06      	ldr	r4, [sp, #24]
1a0023b6:	4615      	mov	r5, r2
1a0023b8:	4606      	mov	r6, r0
1a0023ba:	460f      	mov	r7, r1
1a0023bc:	4698      	mov	r8, r3
1a0023be:	f000 f829 	bl	1a002414 <__divdi3>
1a0023c2:	fb05 f301 	mul.w	r3, r5, r1
1a0023c6:	fb00 3808 	mla	r8, r0, r8, r3
1a0023ca:	fba5 2300 	umull	r2, r3, r5, r0
1a0023ce:	1ab2      	subs	r2, r6, r2
1a0023d0:	4443      	add	r3, r8
1a0023d2:	eb67 0303 	sbc.w	r3, r7, r3
1a0023d6:	e9c4 2300 	strd	r2, r3, [r4]
1a0023da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0023de:	bf00      	nop

1a0023e0 <__gnu_uldivmod_helper>:
1a0023e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0023e4:	9c06      	ldr	r4, [sp, #24]
1a0023e6:	4690      	mov	r8, r2
1a0023e8:	4606      	mov	r6, r0
1a0023ea:	460f      	mov	r7, r1
1a0023ec:	461d      	mov	r5, r3
1a0023ee:	f000 f95f 	bl	1a0026b0 <__udivdi3>
1a0023f2:	fb00 f505 	mul.w	r5, r0, r5
1a0023f6:	fba0 2308 	umull	r2, r3, r0, r8
1a0023fa:	fb08 5501 	mla	r5, r8, r1, r5
1a0023fe:	1ab2      	subs	r2, r6, r2
1a002400:	442b      	add	r3, r5
1a002402:	eb67 0303 	sbc.w	r3, r7, r3
1a002406:	e9c4 2300 	strd	r2, r3, [r4]
1a00240a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00240e:	bf00      	nop

1a002410 <__aeabi_idiv0>:
1a002410:	4770      	bx	lr
1a002412:	bf00      	nop

1a002414 <__divdi3>:
1a002414:	2900      	cmp	r1, #0
1a002416:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a00241a:	f2c0 80a6 	blt.w	1a00256a <__divdi3+0x156>
1a00241e:	2600      	movs	r6, #0
1a002420:	2b00      	cmp	r3, #0
1a002422:	f2c0 809c 	blt.w	1a00255e <__divdi3+0x14a>
1a002426:	4688      	mov	r8, r1
1a002428:	4694      	mov	ip, r2
1a00242a:	469e      	mov	lr, r3
1a00242c:	4615      	mov	r5, r2
1a00242e:	4604      	mov	r4, r0
1a002430:	460f      	mov	r7, r1
1a002432:	2b00      	cmp	r3, #0
1a002434:	d13d      	bne.n	1a0024b2 <__divdi3+0x9e>
1a002436:	428a      	cmp	r2, r1
1a002438:	d959      	bls.n	1a0024ee <__divdi3+0xda>
1a00243a:	fab2 f382 	clz	r3, r2
1a00243e:	b13b      	cbz	r3, 1a002450 <__divdi3+0x3c>
1a002440:	f1c3 0220 	rsb	r2, r3, #32
1a002444:	409f      	lsls	r7, r3
1a002446:	fa20 f202 	lsr.w	r2, r0, r2
1a00244a:	409d      	lsls	r5, r3
1a00244c:	4317      	orrs	r7, r2
1a00244e:	409c      	lsls	r4, r3
1a002450:	0c29      	lsrs	r1, r5, #16
1a002452:	0c22      	lsrs	r2, r4, #16
1a002454:	fbb7 fef1 	udiv	lr, r7, r1
1a002458:	b2a8      	uxth	r0, r5
1a00245a:	fb01 771e 	mls	r7, r1, lr, r7
1a00245e:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
1a002462:	fb00 f30e 	mul.w	r3, r0, lr
1a002466:	42bb      	cmp	r3, r7
1a002468:	d90a      	bls.n	1a002480 <__divdi3+0x6c>
1a00246a:	197f      	adds	r7, r7, r5
1a00246c:	f10e 32ff 	add.w	r2, lr, #4294967295
1a002470:	f080 8105 	bcs.w	1a00267e <__divdi3+0x26a>
1a002474:	42bb      	cmp	r3, r7
1a002476:	f240 8102 	bls.w	1a00267e <__divdi3+0x26a>
1a00247a:	f1ae 0e02 	sub.w	lr, lr, #2
1a00247e:	442f      	add	r7, r5
1a002480:	1aff      	subs	r7, r7, r3
1a002482:	b2a4      	uxth	r4, r4
1a002484:	fbb7 f3f1 	udiv	r3, r7, r1
1a002488:	fb01 7713 	mls	r7, r1, r3, r7
1a00248c:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a002490:	fb00 f003 	mul.w	r0, r0, r3
1a002494:	42b8      	cmp	r0, r7
1a002496:	d908      	bls.n	1a0024aa <__divdi3+0x96>
1a002498:	197f      	adds	r7, r7, r5
1a00249a:	f103 32ff 	add.w	r2, r3, #4294967295
1a00249e:	f080 80f0 	bcs.w	1a002682 <__divdi3+0x26e>
1a0024a2:	42b8      	cmp	r0, r7
1a0024a4:	f240 80ed 	bls.w	1a002682 <__divdi3+0x26e>
1a0024a8:	3b02      	subs	r3, #2
1a0024aa:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
1a0024ae:	2200      	movs	r2, #0
1a0024b0:	e003      	b.n	1a0024ba <__divdi3+0xa6>
1a0024b2:	428b      	cmp	r3, r1
1a0024b4:	d90f      	bls.n	1a0024d6 <__divdi3+0xc2>
1a0024b6:	2200      	movs	r2, #0
1a0024b8:	4613      	mov	r3, r2
1a0024ba:	1c34      	adds	r4, r6, #0
1a0024bc:	bf18      	it	ne
1a0024be:	2401      	movne	r4, #1
1a0024c0:	4260      	negs	r0, r4
1a0024c2:	f04f 0500 	mov.w	r5, #0
1a0024c6:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
1a0024ca:	4058      	eors	r0, r3
1a0024cc:	4051      	eors	r1, r2
1a0024ce:	1900      	adds	r0, r0, r4
1a0024d0:	4169      	adcs	r1, r5
1a0024d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a0024d6:	fab3 f283 	clz	r2, r3
1a0024da:	2a00      	cmp	r2, #0
1a0024dc:	f040 8086 	bne.w	1a0025ec <__divdi3+0x1d8>
1a0024e0:	428b      	cmp	r3, r1
1a0024e2:	d302      	bcc.n	1a0024ea <__divdi3+0xd6>
1a0024e4:	4584      	cmp	ip, r0
1a0024e6:	f200 80db 	bhi.w	1a0026a0 <__divdi3+0x28c>
1a0024ea:	2301      	movs	r3, #1
1a0024ec:	e7e5      	b.n	1a0024ba <__divdi3+0xa6>
1a0024ee:	b912      	cbnz	r2, 1a0024f6 <__divdi3+0xe2>
1a0024f0:	2301      	movs	r3, #1
1a0024f2:	fbb3 f5f2 	udiv	r5, r3, r2
1a0024f6:	fab5 f085 	clz	r0, r5
1a0024fa:	2800      	cmp	r0, #0
1a0024fc:	d13b      	bne.n	1a002576 <__divdi3+0x162>
1a0024fe:	1b78      	subs	r0, r7, r5
1a002500:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002504:	fa1f fc85 	uxth.w	ip, r5
1a002508:	2201      	movs	r2, #1
1a00250a:	fbb0 f8fe 	udiv	r8, r0, lr
1a00250e:	0c21      	lsrs	r1, r4, #16
1a002510:	fb0e 0718 	mls	r7, lr, r8, r0
1a002514:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
1a002518:	fb0c f308 	mul.w	r3, ip, r8
1a00251c:	42bb      	cmp	r3, r7
1a00251e:	d907      	bls.n	1a002530 <__divdi3+0x11c>
1a002520:	197f      	adds	r7, r7, r5
1a002522:	f108 31ff 	add.w	r1, r8, #4294967295
1a002526:	d202      	bcs.n	1a00252e <__divdi3+0x11a>
1a002528:	42bb      	cmp	r3, r7
1a00252a:	f200 80bd 	bhi.w	1a0026a8 <__divdi3+0x294>
1a00252e:	4688      	mov	r8, r1
1a002530:	1aff      	subs	r7, r7, r3
1a002532:	b2a4      	uxth	r4, r4
1a002534:	fbb7 f3fe 	udiv	r3, r7, lr
1a002538:	fb0e 7713 	mls	r7, lr, r3, r7
1a00253c:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a002540:	fb0c fc03 	mul.w	ip, ip, r3
1a002544:	45bc      	cmp	ip, r7
1a002546:	d907      	bls.n	1a002558 <__divdi3+0x144>
1a002548:	197f      	adds	r7, r7, r5
1a00254a:	f103 31ff 	add.w	r1, r3, #4294967295
1a00254e:	d202      	bcs.n	1a002556 <__divdi3+0x142>
1a002550:	45bc      	cmp	ip, r7
1a002552:	f200 80a7 	bhi.w	1a0026a4 <__divdi3+0x290>
1a002556:	460b      	mov	r3, r1
1a002558:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a00255c:	e7ad      	b.n	1a0024ba <__divdi3+0xa6>
1a00255e:	4252      	negs	r2, r2
1a002560:	ea6f 0606 	mvn.w	r6, r6
1a002564:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a002568:	e75d      	b.n	1a002426 <__divdi3+0x12>
1a00256a:	4240      	negs	r0, r0
1a00256c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a002570:	f04f 36ff 	mov.w	r6, #4294967295
1a002574:	e754      	b.n	1a002420 <__divdi3+0xc>
1a002576:	f1c0 0220 	rsb	r2, r0, #32
1a00257a:	fa24 f102 	lsr.w	r1, r4, r2
1a00257e:	fa07 f300 	lsl.w	r3, r7, r0
1a002582:	4085      	lsls	r5, r0
1a002584:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002588:	40d7      	lsrs	r7, r2
1a00258a:	4319      	orrs	r1, r3
1a00258c:	fbb7 f2fe 	udiv	r2, r7, lr
1a002590:	0c0b      	lsrs	r3, r1, #16
1a002592:	fb0e 7712 	mls	r7, lr, r2, r7
1a002596:	fa1f fc85 	uxth.w	ip, r5
1a00259a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
1a00259e:	fb0c f702 	mul.w	r7, ip, r2
1a0025a2:	429f      	cmp	r7, r3
1a0025a4:	fa04 f400 	lsl.w	r4, r4, r0
1a0025a8:	d907      	bls.n	1a0025ba <__divdi3+0x1a6>
1a0025aa:	195b      	adds	r3, r3, r5
1a0025ac:	f102 30ff 	add.w	r0, r2, #4294967295
1a0025b0:	d274      	bcs.n	1a00269c <__divdi3+0x288>
1a0025b2:	429f      	cmp	r7, r3
1a0025b4:	d972      	bls.n	1a00269c <__divdi3+0x288>
1a0025b6:	3a02      	subs	r2, #2
1a0025b8:	442b      	add	r3, r5
1a0025ba:	1bdf      	subs	r7, r3, r7
1a0025bc:	b289      	uxth	r1, r1
1a0025be:	fbb7 f8fe 	udiv	r8, r7, lr
1a0025c2:	fb0e 7318 	mls	r3, lr, r8, r7
1a0025c6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a0025ca:	fb0c f708 	mul.w	r7, ip, r8
1a0025ce:	429f      	cmp	r7, r3
1a0025d0:	d908      	bls.n	1a0025e4 <__divdi3+0x1d0>
1a0025d2:	195b      	adds	r3, r3, r5
1a0025d4:	f108 31ff 	add.w	r1, r8, #4294967295
1a0025d8:	d25c      	bcs.n	1a002694 <__divdi3+0x280>
1a0025da:	429f      	cmp	r7, r3
1a0025dc:	d95a      	bls.n	1a002694 <__divdi3+0x280>
1a0025de:	f1a8 0802 	sub.w	r8, r8, #2
1a0025e2:	442b      	add	r3, r5
1a0025e4:	1bd8      	subs	r0, r3, r7
1a0025e6:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
1a0025ea:	e78e      	b.n	1a00250a <__divdi3+0xf6>
1a0025ec:	f1c2 0320 	rsb	r3, r2, #32
1a0025f0:	fa2c f103 	lsr.w	r1, ip, r3
1a0025f4:	fa0e fe02 	lsl.w	lr, lr, r2
1a0025f8:	fa20 f703 	lsr.w	r7, r0, r3
1a0025fc:	ea41 0e0e 	orr.w	lr, r1, lr
1a002600:	fa08 f002 	lsl.w	r0, r8, r2
1a002604:	fa28 f103 	lsr.w	r1, r8, r3
1a002608:	ea4f 451e 	mov.w	r5, lr, lsr #16
1a00260c:	4338      	orrs	r0, r7
1a00260e:	fbb1 f8f5 	udiv	r8, r1, r5
1a002612:	0c03      	lsrs	r3, r0, #16
1a002614:	fb05 1118 	mls	r1, r5, r8, r1
1a002618:	fa1f f78e 	uxth.w	r7, lr
1a00261c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a002620:	fb07 f308 	mul.w	r3, r7, r8
1a002624:	428b      	cmp	r3, r1
1a002626:	fa0c fc02 	lsl.w	ip, ip, r2
1a00262a:	d909      	bls.n	1a002640 <__divdi3+0x22c>
1a00262c:	eb11 010e 	adds.w	r1, r1, lr
1a002630:	f108 39ff 	add.w	r9, r8, #4294967295
1a002634:	d230      	bcs.n	1a002698 <__divdi3+0x284>
1a002636:	428b      	cmp	r3, r1
1a002638:	d92e      	bls.n	1a002698 <__divdi3+0x284>
1a00263a:	f1a8 0802 	sub.w	r8, r8, #2
1a00263e:	4471      	add	r1, lr
1a002640:	1ac9      	subs	r1, r1, r3
1a002642:	b280      	uxth	r0, r0
1a002644:	fbb1 f3f5 	udiv	r3, r1, r5
1a002648:	fb05 1113 	mls	r1, r5, r3, r1
1a00264c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
1a002650:	fb07 f703 	mul.w	r7, r7, r3
1a002654:	428f      	cmp	r7, r1
1a002656:	d908      	bls.n	1a00266a <__divdi3+0x256>
1a002658:	eb11 010e 	adds.w	r1, r1, lr
1a00265c:	f103 30ff 	add.w	r0, r3, #4294967295
1a002660:	d216      	bcs.n	1a002690 <__divdi3+0x27c>
1a002662:	428f      	cmp	r7, r1
1a002664:	d914      	bls.n	1a002690 <__divdi3+0x27c>
1a002666:	3b02      	subs	r3, #2
1a002668:	4471      	add	r1, lr
1a00266a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a00266e:	1bc9      	subs	r1, r1, r7
1a002670:	fba3 890c 	umull	r8, r9, r3, ip
1a002674:	4549      	cmp	r1, r9
1a002676:	d309      	bcc.n	1a00268c <__divdi3+0x278>
1a002678:	d005      	beq.n	1a002686 <__divdi3+0x272>
1a00267a:	2200      	movs	r2, #0
1a00267c:	e71d      	b.n	1a0024ba <__divdi3+0xa6>
1a00267e:	4696      	mov	lr, r2
1a002680:	e6fe      	b.n	1a002480 <__divdi3+0x6c>
1a002682:	4613      	mov	r3, r2
1a002684:	e711      	b.n	1a0024aa <__divdi3+0x96>
1a002686:	4094      	lsls	r4, r2
1a002688:	4544      	cmp	r4, r8
1a00268a:	d2f6      	bcs.n	1a00267a <__divdi3+0x266>
1a00268c:	3b01      	subs	r3, #1
1a00268e:	e7f4      	b.n	1a00267a <__divdi3+0x266>
1a002690:	4603      	mov	r3, r0
1a002692:	e7ea      	b.n	1a00266a <__divdi3+0x256>
1a002694:	4688      	mov	r8, r1
1a002696:	e7a5      	b.n	1a0025e4 <__divdi3+0x1d0>
1a002698:	46c8      	mov	r8, r9
1a00269a:	e7d1      	b.n	1a002640 <__divdi3+0x22c>
1a00269c:	4602      	mov	r2, r0
1a00269e:	e78c      	b.n	1a0025ba <__divdi3+0x1a6>
1a0026a0:	4613      	mov	r3, r2
1a0026a2:	e70a      	b.n	1a0024ba <__divdi3+0xa6>
1a0026a4:	3b02      	subs	r3, #2
1a0026a6:	e757      	b.n	1a002558 <__divdi3+0x144>
1a0026a8:	f1a8 0802 	sub.w	r8, r8, #2
1a0026ac:	442f      	add	r7, r5
1a0026ae:	e73f      	b.n	1a002530 <__divdi3+0x11c>

1a0026b0 <__udivdi3>:
1a0026b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0026b4:	2b00      	cmp	r3, #0
1a0026b6:	d144      	bne.n	1a002742 <__udivdi3+0x92>
1a0026b8:	428a      	cmp	r2, r1
1a0026ba:	4615      	mov	r5, r2
1a0026bc:	4604      	mov	r4, r0
1a0026be:	d94f      	bls.n	1a002760 <__udivdi3+0xb0>
1a0026c0:	fab2 f782 	clz	r7, r2
1a0026c4:	460e      	mov	r6, r1
1a0026c6:	b14f      	cbz	r7, 1a0026dc <__udivdi3+0x2c>
1a0026c8:	f1c7 0320 	rsb	r3, r7, #32
1a0026cc:	40b9      	lsls	r1, r7
1a0026ce:	fa20 f603 	lsr.w	r6, r0, r3
1a0026d2:	fa02 f507 	lsl.w	r5, r2, r7
1a0026d6:	430e      	orrs	r6, r1
1a0026d8:	fa00 f407 	lsl.w	r4, r0, r7
1a0026dc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0026e0:	0c23      	lsrs	r3, r4, #16
1a0026e2:	fbb6 f0fe 	udiv	r0, r6, lr
1a0026e6:	b2af      	uxth	r7, r5
1a0026e8:	fb0e 6110 	mls	r1, lr, r0, r6
1a0026ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0026f0:	fb07 f100 	mul.w	r1, r7, r0
1a0026f4:	4299      	cmp	r1, r3
1a0026f6:	d909      	bls.n	1a00270c <__udivdi3+0x5c>
1a0026f8:	195b      	adds	r3, r3, r5
1a0026fa:	f100 32ff 	add.w	r2, r0, #4294967295
1a0026fe:	f080 80ec 	bcs.w	1a0028da <__udivdi3+0x22a>
1a002702:	4299      	cmp	r1, r3
1a002704:	f240 80e9 	bls.w	1a0028da <__udivdi3+0x22a>
1a002708:	3802      	subs	r0, #2
1a00270a:	442b      	add	r3, r5
1a00270c:	1a5a      	subs	r2, r3, r1
1a00270e:	b2a4      	uxth	r4, r4
1a002710:	fbb2 f3fe 	udiv	r3, r2, lr
1a002714:	fb0e 2213 	mls	r2, lr, r3, r2
1a002718:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
1a00271c:	fb07 f703 	mul.w	r7, r7, r3
1a002720:	4297      	cmp	r7, r2
1a002722:	d908      	bls.n	1a002736 <__udivdi3+0x86>
1a002724:	1952      	adds	r2, r2, r5
1a002726:	f103 31ff 	add.w	r1, r3, #4294967295
1a00272a:	f080 80d8 	bcs.w	1a0028de <__udivdi3+0x22e>
1a00272e:	4297      	cmp	r7, r2
1a002730:	f240 80d5 	bls.w	1a0028de <__udivdi3+0x22e>
1a002734:	3b02      	subs	r3, #2
1a002736:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a00273a:	2600      	movs	r6, #0
1a00273c:	4631      	mov	r1, r6
1a00273e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002742:	428b      	cmp	r3, r1
1a002744:	d847      	bhi.n	1a0027d6 <__udivdi3+0x126>
1a002746:	fab3 f683 	clz	r6, r3
1a00274a:	2e00      	cmp	r6, #0
1a00274c:	d148      	bne.n	1a0027e0 <__udivdi3+0x130>
1a00274e:	428b      	cmp	r3, r1
1a002750:	d302      	bcc.n	1a002758 <__udivdi3+0xa8>
1a002752:	4282      	cmp	r2, r0
1a002754:	f200 80cd 	bhi.w	1a0028f2 <__udivdi3+0x242>
1a002758:	2001      	movs	r0, #1
1a00275a:	4631      	mov	r1, r6
1a00275c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002760:	b912      	cbnz	r2, 1a002768 <__udivdi3+0xb8>
1a002762:	2501      	movs	r5, #1
1a002764:	fbb5 f5f2 	udiv	r5, r5, r2
1a002768:	fab5 f885 	clz	r8, r5
1a00276c:	f1b8 0f00 	cmp.w	r8, #0
1a002770:	d177      	bne.n	1a002862 <__udivdi3+0x1b2>
1a002772:	1b4a      	subs	r2, r1, r5
1a002774:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002778:	b2af      	uxth	r7, r5
1a00277a:	2601      	movs	r6, #1
1a00277c:	fbb2 f0fe 	udiv	r0, r2, lr
1a002780:	0c23      	lsrs	r3, r4, #16
1a002782:	fb0e 2110 	mls	r1, lr, r0, r2
1a002786:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a00278a:	fb07 f300 	mul.w	r3, r7, r0
1a00278e:	428b      	cmp	r3, r1
1a002790:	d907      	bls.n	1a0027a2 <__udivdi3+0xf2>
1a002792:	1949      	adds	r1, r1, r5
1a002794:	f100 32ff 	add.w	r2, r0, #4294967295
1a002798:	d202      	bcs.n	1a0027a0 <__udivdi3+0xf0>
1a00279a:	428b      	cmp	r3, r1
1a00279c:	f200 80ba 	bhi.w	1a002914 <__udivdi3+0x264>
1a0027a0:	4610      	mov	r0, r2
1a0027a2:	1ac9      	subs	r1, r1, r3
1a0027a4:	b2a4      	uxth	r4, r4
1a0027a6:	fbb1 f3fe 	udiv	r3, r1, lr
1a0027aa:	fb0e 1113 	mls	r1, lr, r3, r1
1a0027ae:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
1a0027b2:	fb07 f703 	mul.w	r7, r7, r3
1a0027b6:	42a7      	cmp	r7, r4
1a0027b8:	d908      	bls.n	1a0027cc <__udivdi3+0x11c>
1a0027ba:	1964      	adds	r4, r4, r5
1a0027bc:	f103 32ff 	add.w	r2, r3, #4294967295
1a0027c0:	f080 808f 	bcs.w	1a0028e2 <__udivdi3+0x232>
1a0027c4:	42a7      	cmp	r7, r4
1a0027c6:	f240 808c 	bls.w	1a0028e2 <__udivdi3+0x232>
1a0027ca:	3b02      	subs	r3, #2
1a0027cc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a0027d0:	4631      	mov	r1, r6
1a0027d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0027d6:	2600      	movs	r6, #0
1a0027d8:	4630      	mov	r0, r6
1a0027da:	4631      	mov	r1, r6
1a0027dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0027e0:	f1c6 0420 	rsb	r4, r6, #32
1a0027e4:	fa22 f504 	lsr.w	r5, r2, r4
1a0027e8:	40b3      	lsls	r3, r6
1a0027ea:	432b      	orrs	r3, r5
1a0027ec:	fa20 fc04 	lsr.w	ip, r0, r4
1a0027f0:	fa01 f706 	lsl.w	r7, r1, r6
1a0027f4:	fa21 f504 	lsr.w	r5, r1, r4
1a0027f8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
1a0027fc:	ea4c 0707 	orr.w	r7, ip, r7
1a002800:	fbb5 f8fe 	udiv	r8, r5, lr
1a002804:	0c39      	lsrs	r1, r7, #16
1a002806:	fb0e 5518 	mls	r5, lr, r8, r5
1a00280a:	fa1f fc83 	uxth.w	ip, r3
1a00280e:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
1a002812:	fb0c f108 	mul.w	r1, ip, r8
1a002816:	42a9      	cmp	r1, r5
1a002818:	fa02 f206 	lsl.w	r2, r2, r6
1a00281c:	d904      	bls.n	1a002828 <__udivdi3+0x178>
1a00281e:	18ed      	adds	r5, r5, r3
1a002820:	f108 34ff 	add.w	r4, r8, #4294967295
1a002824:	d367      	bcc.n	1a0028f6 <__udivdi3+0x246>
1a002826:	46a0      	mov	r8, r4
1a002828:	1a6d      	subs	r5, r5, r1
1a00282a:	b2bf      	uxth	r7, r7
1a00282c:	fbb5 f4fe 	udiv	r4, r5, lr
1a002830:	fb0e 5514 	mls	r5, lr, r4, r5
1a002834:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
1a002838:	fb0c fc04 	mul.w	ip, ip, r4
1a00283c:	458c      	cmp	ip, r1
1a00283e:	d904      	bls.n	1a00284a <__udivdi3+0x19a>
1a002840:	18c9      	adds	r1, r1, r3
1a002842:	f104 35ff 	add.w	r5, r4, #4294967295
1a002846:	d35c      	bcc.n	1a002902 <__udivdi3+0x252>
1a002848:	462c      	mov	r4, r5
1a00284a:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
1a00284e:	ebcc 0101 	rsb	r1, ip, r1
1a002852:	fba4 2302 	umull	r2, r3, r4, r2
1a002856:	4299      	cmp	r1, r3
1a002858:	d348      	bcc.n	1a0028ec <__udivdi3+0x23c>
1a00285a:	d044      	beq.n	1a0028e6 <__udivdi3+0x236>
1a00285c:	4620      	mov	r0, r4
1a00285e:	2600      	movs	r6, #0
1a002860:	e76c      	b.n	1a00273c <__udivdi3+0x8c>
1a002862:	f1c8 0420 	rsb	r4, r8, #32
1a002866:	fa01 f308 	lsl.w	r3, r1, r8
1a00286a:	fa05 f508 	lsl.w	r5, r5, r8
1a00286e:	fa20 f704 	lsr.w	r7, r0, r4
1a002872:	40e1      	lsrs	r1, r4
1a002874:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002878:	431f      	orrs	r7, r3
1a00287a:	fbb1 f6fe 	udiv	r6, r1, lr
1a00287e:	0c3a      	lsrs	r2, r7, #16
1a002880:	fb0e 1116 	mls	r1, lr, r6, r1
1a002884:	fa1f fc85 	uxth.w	ip, r5
1a002888:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
1a00288c:	fb0c f206 	mul.w	r2, ip, r6
1a002890:	429a      	cmp	r2, r3
1a002892:	fa00 f408 	lsl.w	r4, r0, r8
1a002896:	d907      	bls.n	1a0028a8 <__udivdi3+0x1f8>
1a002898:	195b      	adds	r3, r3, r5
1a00289a:	f106 31ff 	add.w	r1, r6, #4294967295
1a00289e:	d237      	bcs.n	1a002910 <__udivdi3+0x260>
1a0028a0:	429a      	cmp	r2, r3
1a0028a2:	d935      	bls.n	1a002910 <__udivdi3+0x260>
1a0028a4:	3e02      	subs	r6, #2
1a0028a6:	442b      	add	r3, r5
1a0028a8:	1a9b      	subs	r3, r3, r2
1a0028aa:	b2bf      	uxth	r7, r7
1a0028ac:	fbb3 f0fe 	udiv	r0, r3, lr
1a0028b0:	fb0e 3310 	mls	r3, lr, r0, r3
1a0028b4:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
1a0028b8:	fb0c f100 	mul.w	r1, ip, r0
1a0028bc:	4299      	cmp	r1, r3
1a0028be:	d907      	bls.n	1a0028d0 <__udivdi3+0x220>
1a0028c0:	195b      	adds	r3, r3, r5
1a0028c2:	f100 32ff 	add.w	r2, r0, #4294967295
1a0028c6:	d221      	bcs.n	1a00290c <__udivdi3+0x25c>
1a0028c8:	4299      	cmp	r1, r3
1a0028ca:	d91f      	bls.n	1a00290c <__udivdi3+0x25c>
1a0028cc:	3802      	subs	r0, #2
1a0028ce:	442b      	add	r3, r5
1a0028d0:	1a5a      	subs	r2, r3, r1
1a0028d2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
1a0028d6:	4667      	mov	r7, ip
1a0028d8:	e750      	b.n	1a00277c <__udivdi3+0xcc>
1a0028da:	4610      	mov	r0, r2
1a0028dc:	e716      	b.n	1a00270c <__udivdi3+0x5c>
1a0028de:	460b      	mov	r3, r1
1a0028e0:	e729      	b.n	1a002736 <__udivdi3+0x86>
1a0028e2:	4613      	mov	r3, r2
1a0028e4:	e772      	b.n	1a0027cc <__udivdi3+0x11c>
1a0028e6:	40b0      	lsls	r0, r6
1a0028e8:	4290      	cmp	r0, r2
1a0028ea:	d2b7      	bcs.n	1a00285c <__udivdi3+0x1ac>
1a0028ec:	1e60      	subs	r0, r4, #1
1a0028ee:	2600      	movs	r6, #0
1a0028f0:	e724      	b.n	1a00273c <__udivdi3+0x8c>
1a0028f2:	4630      	mov	r0, r6
1a0028f4:	e722      	b.n	1a00273c <__udivdi3+0x8c>
1a0028f6:	42a9      	cmp	r1, r5
1a0028f8:	d995      	bls.n	1a002826 <__udivdi3+0x176>
1a0028fa:	f1a8 0802 	sub.w	r8, r8, #2
1a0028fe:	441d      	add	r5, r3
1a002900:	e792      	b.n	1a002828 <__udivdi3+0x178>
1a002902:	458c      	cmp	ip, r1
1a002904:	d9a0      	bls.n	1a002848 <__udivdi3+0x198>
1a002906:	3c02      	subs	r4, #2
1a002908:	4419      	add	r1, r3
1a00290a:	e79e      	b.n	1a00284a <__udivdi3+0x19a>
1a00290c:	4610      	mov	r0, r2
1a00290e:	e7df      	b.n	1a0028d0 <__udivdi3+0x220>
1a002910:	460e      	mov	r6, r1
1a002912:	e7c9      	b.n	1a0028a8 <__udivdi3+0x1f8>
1a002914:	3802      	subs	r0, #2
1a002916:	4429      	add	r1, r5
1a002918:	e743      	b.n	1a0027a2 <__udivdi3+0xf2>
1a00291a:	bf00      	nop

1a00291c <memcpy>:
1a00291c:	b510      	push	{r4, lr}
1a00291e:	1e43      	subs	r3, r0, #1
1a002920:	440a      	add	r2, r1
1a002922:	4291      	cmp	r1, r2
1a002924:	d004      	beq.n	1a002930 <memcpy+0x14>
1a002926:	f811 4b01 	ldrb.w	r4, [r1], #1
1a00292a:	f803 4f01 	strb.w	r4, [r3, #1]!
1a00292e:	e7f8      	b.n	1a002922 <memcpy+0x6>
1a002930:	bd10      	pop	{r4, pc}

1a002932 <memset>:
1a002932:	4402      	add	r2, r0
1a002934:	4603      	mov	r3, r0
1a002936:	4293      	cmp	r3, r2
1a002938:	d002      	beq.n	1a002940 <memset+0xe>
1a00293a:	f803 1b01 	strb.w	r1, [r3], #1
1a00293e:	e7fa      	b.n	1a002936 <memset+0x4>
1a002940:	4770      	bx	lr
	...

1a002944 <timer_sd>:
1a002944:	4000 4008 0020 0000 000c 0000 5000 4008     .@.@ ........P.@
1a002954:	0021 0000 000d 0000 3000 400c 0022 0000     !........0.@"...
1a002964:	000e 0000 4000 400c 0023 0000 000f 0000     .....@.@#.......

1a002974 <gpioPinsConfig>:
1a002974:	0104 0200 0701 0005 0d03 0501 0100 0408     ................
1a002984:	0002 0202 0304 0200 0403 0000 0002 0407     ................
1a002994:	0300 030c 0402 0905 0103 0504 0208 0403     ................
1a0029a4:	0305 0402 0504 0604 000c 0802 0b06 0300     ................
1a0029b4:	0607 0009 0503 0706 0504 060f 0004 0303     ................
1a0029c4:	0404 0200 0404 0005 0502 0604 0200 0406     ................
1a0029d4:	0408 0c05 0a04 0504 010e 0003 0a00 1401     ................
1a0029e4:	0000 010f 0012 0d00 1101 0000 010c 0010     ................
1a0029f4:	0300 0707 0300 000f 0001 0100 0000 0000     ................
1a002a04:	0600 000a 0603 0806 0504 0610 0005 0403     ................
1a002a14:	0106 0300 0400 0409 0d05 0401 0000 010b     ................
1a002a24:	000f 0200 0001 0000 0104 0001 0800 0201     ................
1a002a34:	0000 0109 0006 0901 0002 0504 0200 0401     ................
1a002a44:	0105 0202 0504 0202 000a 0e00 0b02 0100     ................
1a002a54:	020b 000c 0c01 0004 0200 0400 0001 0102     ................
1a002a64:	0204 0200 0402 0003 0302 0307 0300 070b     ................
1a002a74:	0004 0c03 0507 0300 070d 0006 0e03 0102     ................
1a002a84:	0504 0401 0006 0602 0504 0200 0405 0004     ................
1a002a94:	0402 0804 0504 040c 0409 0d05 0a04 0504     ................
1a002aa4:	010e 0005 0801 0000                         ........

1a002aac <gpioLEDBits>:
1a002aac:	0e00 0b01 0c01 0005 0105 0205 6000 1237     .............`7.
1a002abc:	5634 0000                                   4V..

1a002ac0 <OscRateIn>:
1a002ac0:	1b00 00b7                                   ....

1a002ac4 <ExtRateIn>:
1a002ac4:	0000 0000                                   ....

1a002ac8 <pinmuxing>:
1a002ac8:	0a02 0040 0b02 0040 0c02 0040 0002 0044     ..@...@...@...D.
1a002ad8:	0102 0044 0202 0044 0302 0052 0402 0052     ..D...D...R...R.
1a002ae8:	0509 0052 0609 0057 0206 0057 0001 0050     ..R...W...W...P.
1a002af8:	0101 0050 0201 0050 0601 0050 0f01 00f3     ..P...P...P.....
1a002b08:	1001 00f7 1101 00f3 1201 00b3 1301 00f0     ................
1a002b18:	1401 00b3 0707 00b6 0000 00f2 0100 00b6     ................

1a002b28 <InitClkStates>:
1a002b28:	0308 0001 0307 0001 0f01 0101               ............

1a002b34 <UART_PClock>:
1a002b34:	0081 0082 00a1 00a2                         ........

1a002b3c <UART_BClock>:
1a002b3c:	01c2 01a2 0182 0162                         ......b.

1a002b44 <usbPLLSetup>:
1a002b44:	601d 0000 7ffa 0616 0000 0000 0000 0000     .`..............
1a002b54:	3800 1c9c                                   .8..

1a002b58 <periph_to_base>:
1a002b58:	0000 0005 000a 0020 0024 0009 0040 0040     ...... .$...@.@.
1a002b68:	0005 0060 00a6 0004 00c0 00c3 0002 00e0     ..`.............
1a002b78:	00e0 0001 0100 0100 0003 0120 0120 0006     .......... . ...
1a002b88:	0140 0140 000c 0142 0142 0019 0162 0162     @.@...B.B...b.b.
1a002b98:	0013 0182 0182 0012 01a2 01a2 0011 01c2     ................
1a002ba8:	01c2 0010 01e2 01e2 000f 0202 0202 000e     ................
1a002bb8:	0222 0222 000d 0223 0223 001c 0201 0804     "."...#.#.......
1a002bc8:	0f03 0f0f 00ff 0000                         ........

1a002bd0 <InitClkStates>:
1a002bd0:	0100 0001 0909 0001 090a 0001 0701 0101     ................
1a002be0:	0902 0001 0906 0001 090c 0101 090d 0001     ................
1a002bf0:	090e 0001 090f 0001 0910 0001 0911 0001     ................
1a002c00:	0912 0001 0913 0001 1114 0001 1119 0001     ................
1a002c10:	111a 0001 111b 0001                         ........
